
DEVICE2.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000516  00800100  000054ec  00005580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000084e  00800616  00800616  00005a96  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005a96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000678  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ea7f  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021c8  00000000  00000000  00014c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000465e  00000000  00000000  00016e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d9c  00000000  00000000  0001b480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d48  00000000  00000000  0001d21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cac7  00000000  00000000  0001ef64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  0002ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__dtors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__vector_11>
      30:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__vector_12>
      34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 2b 22 	jmp	0x4456	; 0x4456 <__vector_18>
      4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

0000008c <__ctors_start>:
      8c:	1e 08       	sbc	r1, r14

0000008e <__ctors_end>:
      8e:	57 08       	sbc	r5, r7

00000090 <__dtors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d0 e1       	ldi	r29, 0x10	; 16
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	16 e0       	ldi	r17, 0x06	; 6
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	ec ee       	ldi	r30, 0xEC	; 236
      a4:	f4 e5       	ldi	r31, 0x54	; 84
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	2e e0       	ldi	r18, 0x0E	; 14
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b6 e0       	ldi	r27, 0x06	; 6
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 36       	cpi	r26, 0x64	; 100
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <__do_global_ctors>:
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	c7 e4       	ldi	r28, 0x47	; 71
      c6:	d0 e0       	ldi	r29, 0x00	; 0
      c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_global_ctors+0x10>
      ca:	21 97       	sbiw	r28, 0x01	; 1
      cc:	fe 01       	movw	r30, r28
      ce:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <__tablejump2__>
      d2:	c6 34       	cpi	r28, 0x46	; 70
      d4:	d1 07       	cpc	r29, r17
      d6:	c9 f7       	brne	.-14     	; 0xca <__do_global_ctors+0x8>
      d8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <main>
      dc:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__do_global_dtors>

000000e0 <__bad_interrupt>:
      e0:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_default>

000000e4 <_ZN6ADCLIBC1Ev>:
#include <util/delay.h>
#include "ADCLIB.h"
#include "../PIN/PIN.h"

// default constructor
ADCLIB::ADCLIB()
      e4:	08 95       	ret

000000e6 <_ZN6ADCLIB10InitializeEv>:
} //ADCLIB


int ADCLIB::Initialize(void)
{
	ADCSRA |= (1<<ADPS1) | (1<<ADPS2) | (0<<ADPS0) | (1<<ADATE); //set the prescaler to 64
      e6:	86 b1       	in	r24, 0x06	; 6
      e8:	86 62       	ori	r24, 0x26	; 38
      ea:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0); //set the reference voltage to 5v
      ec:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= 0b00000001; //set the ADC channel to 1
      ee:	38 9a       	sbi	0x07, 0	; 7
	
	//ADCSRB = 0; // free running mode
	ADCSRB |= (1<<ADTS0); // free running mode
      f0:	ee e8       	ldi	r30, 0x8E	; 142
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	81 60       	ori	r24, 0x01	; 1
      f8:	80 83       	st	Z, r24

	//ADMUX |= (1<<ADLAR); //set the adlar to high
	ADCSRA |= (1<<ADEN); //enable ADC
      fa:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC); //start ADC
      fc:	36 9a       	sbi	0x06, 6	; 6
	return 0;
}
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	08 95       	ret

00000104 <_ZN6ADCLIB10choose_ADCEh>:


int ADCLIB::choose_ADC(uint8_t num_adc)
{
	// select ADC Channel
	ADMUX &= 0xf0;
     104:	87 b1       	in	r24, 0x07	; 7
     106:	80 7f       	andi	r24, 0xF0	; 240
     108:	87 b9       	out	0x07, r24	; 7
	ADMUX |= num_adc;
     10a:	87 b1       	in	r24, 0x07	; 7
     10c:	68 2b       	or	r22, r24
     10e:	67 b9       	out	0x07, r22	; 7
	//ADCSRA |= (1<<ADSC);

	return 0;
}
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	08 95       	ret

00000116 <_ZN6ADCLIB16read_mux_sensorsEi>:

uint32_t ADCLIB::read_mux_sensors(int select)
{
	//ADMUX = 0b01000011;

	(select & 0b0001) ? PORTA |= (1 << MUX0_S0) : PORTA &= ~(1 << MUX0_S0);
     116:	60 ff       	sbrs	r22, 0
     118:	02 c0       	rjmp	.+4      	; 0x11e <_ZN6ADCLIB16read_mux_sensorsEi+0x8>
     11a:	dc 9a       	sbi	0x1b, 4	; 27
     11c:	01 c0       	rjmp	.+2      	; 0x120 <_ZN6ADCLIB16read_mux_sensorsEi+0xa>
     11e:	dc 98       	cbi	0x1b, 4	; 27
	(select & 0b0010) ? PORTA |= (1 << MUX0_S1) : PORTA &= ~(1 << MUX0_S1);
     120:	61 ff       	sbrs	r22, 1
     122:	02 c0       	rjmp	.+4      	; 0x128 <_ZN6ADCLIB16read_mux_sensorsEi+0x12>
     124:	db 9a       	sbi	0x1b, 3	; 27
     126:	01 c0       	rjmp	.+2      	; 0x12a <_ZN6ADCLIB16read_mux_sensorsEi+0x14>
     128:	db 98       	cbi	0x1b, 3	; 27
	(select & 0b0100) ? PORTA |= (1 << MUX0_S2) : PORTA &= ~(1 << MUX0_S2);
     12a:	62 ff       	sbrs	r22, 2
     12c:	02 c0       	rjmp	.+4      	; 0x132 <_ZN6ADCLIB16read_mux_sensorsEi+0x1c>
     12e:	da 9a       	sbi	0x1b, 2	; 27
     130:	01 c0       	rjmp	.+2      	; 0x134 <_ZN6ADCLIB16read_mux_sensorsEi+0x1e>
     132:	da 98       	cbi	0x1b, 2	; 27
	(select & 0b1000) ? PORTA |= (1 << MUX0_S3) : PORTA &= ~(1 << MUX0_S3);
     134:	63 ff       	sbrs	r22, 3
     136:	02 c0       	rjmp	.+4      	; 0x13c <_ZN6ADCLIB16read_mux_sensorsEi+0x26>
     138:	d9 9a       	sbi	0x1b, 1	; 27
     13a:	01 c0       	rjmp	.+2      	; 0x13e <_ZN6ADCLIB16read_mux_sensorsEi+0x28>
     13c:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13e:	8f e1       	ldi	r24, 0x1F	; 31
     140:	9e e4       	ldi	r25, 0x4E	; 78
     142:	01 97       	sbiw	r24, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <_ZN6ADCLIB16read_mux_sensorsEi+0x2c>
     146:	00 c0       	rjmp	.+0      	; 0x148 <_ZN6ADCLIB16read_mux_sensorsEi+0x32>
     148:	00 00       	nop
	_delay_ms(10);	// Let digital values propagate
	
	//PORTA |= (select<<SS0);
	ADCSRA |= (1<<ADSC);
     14a:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     14c:	36 99       	sbic	0x06, 6	; 6
     14e:	fe cf       	rjmp	.-4      	; 0x14c <_ZN6ADCLIB16read_mux_sensorsEi+0x36>
	
	uint32_t sensor_value = ADCL;
     150:	24 b1       	in	r18, 0x04	; 4
	sensor_value |= (ADCH << 8);
     152:	65 b1       	in	r22, 0x05	; 5
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	76 2f       	mov	r23, r22
     158:	66 27       	eor	r22, r22
     15a:	cb 01       	movw	r24, r22
     15c:	77 0f       	add	r23, r23
     15e:	aa 0b       	sbc	r26, r26
     160:	bb 0b       	sbc	r27, r27
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	62 2b       	or	r22, r18
	
	return sensor_value;
}
     168:	08 95       	ret

0000016a <_ZN6ADCLIB10read_sharpEii>:


uint32_t ADCLIB::read_sharp(int ADC_pin, int pin)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
	//first the sharp output is set to output using the direction register
	//the voltage is initially set to low
	//then before reading the ADC, the pin is set to low
	//ADMUX = 0b01000000;
	
	PORTA &= ~(1 << pin); //set the TGS2600_SNS pin to low
     172:	2b b3       	in	r18, 0x1b	; 27
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	bc 01       	movw	r22, r24
     17a:	02 c0       	rjmp	.+4      	; 0x180 <_ZN6ADCLIB10read_sharpEii+0x16>
     17c:	66 0f       	add	r22, r22
     17e:	77 1f       	adc	r23, r23
     180:	4a 95       	dec	r20
     182:	e2 f7       	brpl	.-8      	; 0x17c <_ZN6ADCLIB10read_sharpEii+0x12>
     184:	ab 01       	movw	r20, r22
     186:	86 2f       	mov	r24, r22
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8b bb       	out	0x1b, r24	; 27

	ADCSRA |= (1<<ADSC);
     18e:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	8f e2       	ldi	r24, 0x2F	; 47
     192:	92 e0       	ldi	r25, 0x02	; 2
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <_ZN6ADCLIB10read_sharpEii+0x2a>
     198:	00 c0       	rjmp	.+0      	; 0x19a <_ZN6ADCLIB10read_sharpEii+0x30>
     19a:	00 00       	nop
	_delay_us(280);
	while (ADCSRA & (1<<ADSC));
     19c:	36 99       	sbic	0x06, 6	; 6
     19e:	fe cf       	rjmp	.-4      	; 0x19c <_ZN6ADCLIB10read_sharpEii+0x32>
	//ADMUX = ADC_pin;
	uint32_t dust_value = ADCL;
     1a0:	64 b1       	in	r22, 0x04	; 4
     1a2:	c6 2e       	mov	r12, r22
     1a4:	d1 2c       	mov	r13, r1
     1a6:	e1 2c       	mov	r14, r1
     1a8:	f1 2c       	mov	r15, r1
	dust_value |= (ADCH << 8);
     1aa:	25 b1       	in	r18, 0x05	; 5
     1ac:	9a e6       	ldi	r25, 0x6A	; 106
     1ae:	9a 95       	dec	r25
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <_ZN6ADCLIB10read_sharpEii+0x44>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_ZN6ADCLIB10read_sharpEii+0x4a>
	
	_delay_us(40);
	
	PORTA |= (1 << pin); //set the TGS2600_SNS pin to high
     1b4:	8b b3       	in	r24, 0x1b	; 27
     1b6:	48 2b       	or	r20, r24
     1b8:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ba:	8f e1       	ldi	r24, 0x1F	; 31
     1bc:	9e e4       	ldi	r25, 0x4E	; 78
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_ZN6ADCLIB10read_sharpEii+0x54>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN6ADCLIB10read_sharpEii+0x5a>
     1c4:	00 00       	nop
	ADCSRA |= (1<<ADSC);
	_delay_us(280);
	while (ADCSRA & (1<<ADSC));
	//ADMUX = ADC_pin;
	uint32_t dust_value = ADCL;
	dust_value |= (ADCH << 8);
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	92 2f       	mov	r25, r18
     1ca:	88 27       	eor	r24, r24
     1cc:	09 2e       	mov	r0, r25
     1ce:	00 0c       	add	r0, r0
     1d0:	aa 0b       	sbc	r26, r26
     1d2:	bb 0b       	sbc	r27, r27
     1d4:	bc 01       	movw	r22, r24
     1d6:	cd 01       	movw	r24, r26
     1d8:	6c 29       	or	r22, r12
     1da:	7d 29       	or	r23, r13
     1dc:	8e 29       	or	r24, r14
     1de:	9f 29       	or	r25, r15
	PORTA |= (1 << pin); //set the TGS2600_SNS pin to high
	
	_delay_ms(10);
	
	return dust_value;
}
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <_ZN6ADCLIB8read_tgsEi>:


uint32_t ADCLIB::read_tgs(int ADC_pin)
{
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
	// select ADC Channel
	//ADMUX &= 0xF8;
	//ADMUX |= (ADC_pin);
	//ADMUX = 0b01000010;
	
	ADCSRA |= (1<<ADSC);
     1ee:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     1f0:	36 99       	sbic	0x06, 6	; 6
     1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <_ZN6ADCLIB8read_tgsEi+0x6>

	uint32_t tgs_value = ADCL;
     1f4:	64 b1       	in	r22, 0x04	; 4
     1f6:	46 2f       	mov	r20, r22
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
	tgs_value |= (ADCH <<8);
     1fe:	25 b1       	in	r18, 0x05	; 5
     200:	8f e1       	ldi	r24, 0x1F	; 31
     202:	9e e4       	ldi	r25, 0x4E	; 78
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <_ZN6ADCLIB8read_tgsEi+0x1a>
     208:	00 c0       	rjmp	.+0      	; 0x20a <_ZN6ADCLIB8read_tgsEi+0x20>
     20a:	00 00       	nop
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	92 2f       	mov	r25, r18
     210:	88 27       	eor	r24, r24
     212:	09 2e       	mov	r0, r25
     214:	00 0c       	add	r0, r0
     216:	aa 0b       	sbc	r26, r26
     218:	bb 0b       	sbc	r27, r27
     21a:	8c 01       	movw	r16, r24
     21c:	9d 01       	movw	r18, r26
     21e:	04 2b       	or	r16, r20
     220:	15 2b       	or	r17, r21
     222:	26 2b       	or	r18, r22
     224:	37 2b       	or	r19, r23
     226:	c9 01       	movw	r24, r18
     228:	b8 01       	movw	r22, r16
	_delay_ms(10);
	
	return tgs_value;
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <_ZN3DHTC1Ev>:


#include "DHT.h"

// default constructor
DHT::DHT()
     230:	28 ec       	ldi	r18, 0xC8	; 200
     232:	fc 01       	movw	r30, r24
     234:	25 83       	std	Z+5, r18	; 0x05
     236:	08 95       	ret

00000238 <_ZN3DHT11startSignalEiPjS0_>:
{
} //DHT

uint16_t DHT::startSignal(int pin, uint16_t *temperature, uint16_t *humidity)
{
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	8f 92       	push	r8
     242:	9f 92       	push	r9
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	dc 01       	movw	r26, r24
	//reset port maybe; the data register has be be set as output and the pin high
	DDRE |= (1 << pin); //output
     25a:	82 b1       	in	r24, 0x02	; 2
     25c:	e1 e0       	ldi	r30, 0x01	; 1
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	06 2e       	mov	r0, r22
     262:	02 c0       	rjmp	.+4      	; 0x268 <_ZN3DHT11startSignalEiPjS0_+0x30>
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <_ZN3DHT11startSignalEiPjS0_+0x2c>
     26c:	8e 2b       	or	r24, r30
     26e:	82 b9       	out	0x02, r24	; 2
	PORTE |= (1 << pin); //high
     270:	83 b1       	in	r24, 0x03	; 3
     272:	8e 2b       	or	r24, r30
     274:	83 b9       	out	0x03, r24	; 3
     276:	7f e7       	ldi	r23, 0x7F	; 127
     278:	8a e1       	ldi	r24, 0x1A	; 26
     27a:	96 e0       	ldi	r25, 0x06	; 6
     27c:	71 50       	subi	r23, 0x01	; 1
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <_ZN3DHT11startSignalEiPjS0_+0x44>
     284:	00 c0       	rjmp	.+0      	; 0x286 <_ZN3DHT11startSignalEiPjS0_+0x4e>
     286:	00 00       	nop
	_delay_ms(250);
	
	//start to send the request//
	PORTE &= ~(1 << pin); //set the pin to low
     288:	93 b1       	in	r25, 0x03	; 3
     28a:	7e 2f       	mov	r23, r30
     28c:	70 95       	com	r23
     28e:	97 23       	and	r25, r23
     290:	93 b9       	out	0x03, r25	; 3
     292:	cf e3       	ldi	r28, 0x3F	; 63
     294:	dc e9       	ldi	r29, 0x9C	; 156
     296:	21 97       	sbiw	r28, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <_ZN3DHT11startSignalEiPjS0_+0x5e>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <_ZN3DHT11startSignalEiPjS0_+0x64>
     29c:	00 00       	nop
	_delay_ms(20); //wait for atleast 1 ms
	
	PORTE |= (1 << pin); //then set DHT pin to high
     29e:	93 b1       	in	r25, 0x03	; 3
     2a0:	9e 2b       	or	r25, r30
     2a2:	93 b9       	out	0x03, r25	; 3
	DDRE &= ~(1 << pin); //set the pin to input because it should start to rx info from the sensor
     2a4:	82 b1       	in	r24, 0x02	; 2
     2a6:	87 23       	and	r24, r23
     2a8:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2aa:	da e6       	ldi	r29, 0x6A	; 106
     2ac:	da 95       	dec	r29
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <_ZN3DHT11startSignalEiPjS0_+0x74>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <_ZN3DHT11startSignalEiPjS0_+0x7a>
     2b2:	75 ed       	ldi	r23, 0xD5	; 213
     2b4:	7a 95       	dec	r23
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <_ZN3DHT11startSignalEiPjS0_+0x7c>
     2b8:	00 00       	nop
	
	_delay_us(40); //then wait for 40 us
	//if ((PIND & (1<<DHT_PIN))) LED_ON; //check if the pin is high; it should be low
	
	_delay_us(80); // delay for 80 us until the sensor pulls up
	if (!(PINE & (1 << pin))) return 0; //check if the pin is low; it should be high
     2ba:	81 b1       	in	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	06 2e       	mov	r0, r22
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <_ZN3DHT11startSignalEiPjS0_+0x8e>
     2c2:	95 95       	asr	r25
     2c4:	87 95       	ror	r24
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <_ZN3DHT11startSignalEiPjS0_+0x8a>
     2ca:	80 ff       	sbrs	r24, 0
     2cc:	a7 c0       	rjmp	.+334    	; 0x41c <_ZN3DHT11startSignalEiPjS0_+0x1e4>
     2ce:	85 ed       	ldi	r24, 0xD5	; 213
     2d0:	8a 95       	dec	r24
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <_ZN3DHT11startSignalEiPjS0_+0x98>
     2d4:	00 00       	nop
	
	_delay_us(80); // delay another 80 us until the sensor starts to transmit data
	if ((PINE & (1 << pin))) return 0;
     2d6:	81 b1       	in	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <_ZN3DHT11startSignalEiPjS0_+0xa8>
     2dc:	95 95       	asr	r25
     2de:	87 95       	ror	r24
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <_ZN3DHT11startSignalEiPjS0_+0xa4>
     2e4:	80 fd       	sbrc	r24, 0
     2e6:	9a c0       	rjmp	.+308    	; 0x41c <_ZN3DHT11startSignalEiPjS0_+0x1e4>
	
	memset(bitValue, 0, sizeof(bitValue)); // reset the all the values to 0
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	ed 01       	movw	r28, r26
     2ec:	19 92       	st	Y+, r1
     2ee:	8a 95       	dec	r24
     2f0:	e9 f7       	brne	.-6      	; 0x2ec <_ZN3DHT11startSignalEiPjS0_+0xb4>
     2f2:	3d 01       	movw	r6, r26
     2f4:	8d 01       	movw	r16, r26
     2f6:	0b 5f       	subi	r16, 0xFB	; 251
     2f8:	1f 4f       	sbci	r17, 0xFF	; 255
DHT::DHT()
{
} //DHT

uint16_t DHT::startSignal(int pin, uint16_t *temperature, uint16_t *humidity)
{
     2fa:	0f 2e       	mov	r0, r31
     2fc:	f7 e0       	ldi	r31, 0x07	; 7
     2fe:	cf 2e       	mov	r12, r31
     300:	f0 2d       	mov	r31, r0
     302:	91 2c       	mov	r9, r1
     304:	81 2c       	mov	r8, r1
				timecount ++;
				if (timecount > timeout) return 0;
			}
			
			_delay_us(30); //wait for 30 us to see if the pin is high or low
			if (PINE & (1 << pin)) value |= (1<<(7-j)); //this is where i add the bits to the result; i left shift the bit by whatever bit it is supposed to be on so that it becomes an 8 bit number
     306:	44 24       	eor	r4, r4
     308:	43 94       	inc	r4
     30a:	51 2c       	mov	r5, r1
DHT::DHT()
{
} //DHT

uint16_t DHT::startSignal(int pin, uint16_t *temperature, uint16_t *humidity)
{
     30c:	d1 2c       	mov	r13, r1
     30e:	a1 2c       	mov	r10, r1
     310:	38 c0       	rjmp	.+112    	; 0x382 <_ZN3DHT11startSignalEiPjS0_+0x14a>
		{
			timecount=0;
			
			while (!(PINE & (1 << pin))) //i will wait until the pin is not low anymore
			{
				timecount ++;
     312:	df ef       	ldi	r29, 0xFF	; 255
     314:	ed 1a       	sub	r14, r29
     316:	fd 0a       	sbc	r15, r29
				if (timecount > timeout) return 0;
     318:	15 96       	adiw	r26, 0x05	; 5
     31a:	6c 91       	ld	r22, X
     31c:	15 97       	sbiw	r26, 0x05	; 5
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	6e 15       	cp	r22, r14
     322:	7f 05       	cpc	r23, r15
     324:	18 f4       	brcc	.+6      	; 0x32c <_ZN3DHT11startSignalEiPjS0_+0xf4>
     326:	7a c0       	rjmp	.+244    	; 0x41c <_ZN3DHT11startSignalEiPjS0_+0x1e4>
DHT::DHT()
{
} //DHT

uint16_t DHT::startSignal(int pin, uint16_t *temperature, uint16_t *humidity)
{
     328:	ed 2c       	mov	r14, r13
     32a:	fa 2c       	mov	r15, r10
		uint8_t value = 0; // this value holds the current 8 bits of data
		for (int j=0; j<8; j++)
		{
			timecount=0;
			
			while (!(PINE & (1 << pin))) //i will wait until the pin is not low anymore
     32c:	61 b1       	in	r22, 0x01	; 1
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	6e 23       	and	r22, r30
     332:	7f 23       	and	r23, r31
     334:	67 2b       	or	r22, r23
     336:	69 f3       	breq	.-38     	; 0x312 <_ZN3DHT11startSignalEiPjS0_+0xda>
     338:	60 e5       	ldi	r22, 0x50	; 80
     33a:	6a 95       	dec	r22
     33c:	f1 f7       	brne	.-4      	; 0x33a <_ZN3DHT11startSignalEiPjS0_+0x102>
				timecount ++;
				if (timecount > timeout) return 0;
			}
			
			_delay_us(30); //wait for 30 us to see if the pin is high or low
			if (PINE & (1 << pin)) value |= (1<<(7-j)); //this is where i add the bits to the result; i left shift the bit by whatever bit it is supposed to be on so that it becomes an 8 bit number
     33e:	61 b1       	in	r22, 0x01	; 1
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	6e 23       	and	r22, r30
     344:	7f 23       	and	r23, r31
     346:	67 2b       	or	r22, r23
     348:	41 f0       	breq	.+16     	; 0x35a <_ZN3DHT11startSignalEiPjS0_+0x122>
     34a:	b2 01       	movw	r22, r4
     34c:	08 2e       	mov	r0, r24
     34e:	02 c0       	rjmp	.+4      	; 0x354 <_ZN3DHT11startSignalEiPjS0_+0x11c>
     350:	66 0f       	add	r22, r22
     352:	77 1f       	adc	r23, r23
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <_ZN3DHT11startSignalEiPjS0_+0x118>
     358:	b6 2a       	or	r11, r22
			timecount=0;
			
			while (PINE & (1 << pin)); //wait until the pin is low
     35a:	61 b1       	in	r22, 0x01	; 1
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	6e 23       	and	r22, r30
     360:	7f 23       	and	r23, r31
     362:	67 2b       	or	r22, r23
     364:	d1 f7       	brne	.-12     	; 0x35a <_ZN3DHT11startSignalEiPjS0_+0x122>
			{
				timecount ++;
				if (timecount > timeout) return 0;
     366:	15 96       	adiw	r26, 0x05	; 5
     368:	6c 91       	ld	r22, X
     36a:	15 97       	sbiw	r26, 0x05	; 5
     36c:	66 23       	and	r22, r22
     36e:	09 f4       	brne	.+2      	; 0x372 <_ZN3DHT11startSignalEiPjS0_+0x13a>
     370:	55 c0       	rjmp	.+170    	; 0x41c <_ZN3DHT11startSignalEiPjS0_+0x1e4>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	c8 f6       	brcc	.-78     	; 0x328 <_ZN3DHT11startSignalEiPjS0_+0xf0>
			}
		}
		bitValue[i] = value;
     376:	e3 01       	movw	r28, r6
     378:	b9 92       	st	Y+, r11
     37a:	3e 01       	movw	r6, r28
	if ((PINE & (1 << pin))) return 0;
	
	memset(bitValue, 0, sizeof(bitValue)); // reset the all the values to 0
	uint16_t timecount = 0; //reset the timeout
	
	for (int i=0; i<5; i++)
     37c:	c0 17       	cp	r28, r16
     37e:	d1 07       	cpc	r29, r17
     380:	21 f0       	breq	.+8      	; 0x38a <_ZN3DHT11startSignalEiPjS0_+0x152>
DHT::DHT()
{
} //DHT

uint16_t DHT::startSignal(int pin, uint16_t *temperature, uint16_t *humidity)
{
     382:	8c 2d       	mov	r24, r12
     384:	99 2d       	mov	r25, r9
     386:	b8 2c       	mov	r11, r8
     388:	cf cf       	rjmp	.-98     	; 0x328 <_ZN3DHT11startSignalEiPjS0_+0xf0>
		}
		bitValue[i] = value;
	}
	
	//reset the port
	DDRE |= (1 << pin); //output
     38a:	82 b1       	in	r24, 0x02	; 2
     38c:	8e 2b       	or	r24, r30
     38e:	82 b9       	out	0x02, r24	; 2
	PORTE |= (1 << pin); //high
     390:	83 b1       	in	r24, 0x03	; 3
     392:	e8 2b       	or	r30, r24
     394:	e3 b9       	out	0x03, r30	; 3
     396:	e7 ec       	ldi	r30, 0xC7	; 199
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <_ZN3DHT11startSignalEiPjS0_+0x162>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <_ZN3DHT11startSignalEiPjS0_+0x168>
     3a0:	00 00       	nop
	
	//now check the sum of the
	uint16_t temperature_raw;
	uint16_t humidity_raw;
	
	if ((uint8_t)(bitValue[0] + bitValue[1] + bitValue[2] + bitValue[3]) == bitValue[4]) // this has to be an unsigned int to work
     3a2:	ec 91       	ld	r30, X
     3a4:	11 96       	adiw	r26, 0x01	; 1
     3a6:	6c 91       	ld	r22, X
     3a8:	11 97       	sbiw	r26, 0x01	; 1
     3aa:	96 2f       	mov	r25, r22
     3ac:	9e 0f       	add	r25, r30
     3ae:	12 96       	adiw	r26, 0x02	; 2
     3b0:	8c 91       	ld	r24, X
     3b2:	12 97       	sbiw	r26, 0x02	; 2
     3b4:	98 0f       	add	r25, r24
     3b6:	13 96       	adiw	r26, 0x03	; 3
     3b8:	8c 91       	ld	r24, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	89 0f       	add	r24, r25
     3be:	14 96       	adiw	r26, 0x04	; 4
     3c0:	9c 91       	ld	r25, X
     3c2:	14 97       	sbiw	r26, 0x04	; 4
     3c4:	89 13       	cpse	r24, r25
     3c6:	2a c0       	rjmp	.+84     	; 0x41c <_ZN3DHT11startSignalEiPjS0_+0x1e4>
     3c8:	e9 01       	movw	r28, r18
     3ca:	8a 01       	movw	r16, r20
     3cc:	7d 01       	movw	r14, r26
	{
		humidity_raw = bitValue[0]<<8 | bitValue[1];
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	7e 2b       	or	r23, r30
		*humidity = ((humidity_raw)/10.0);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__floatunsisf>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	40 e2       	ldi	r20, 0x20	; 32
     3e0:	51 e4       	ldi	r21, 0x41	; 65
     3e2:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__divsf3>
     3e6:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <__fixunssfsi>
     3ea:	79 83       	std	Y+1, r23	; 0x01
     3ec:	68 83       	st	Y, r22
		
		//temperature_raw = bitValue[3];
		//temperature_raw |= (bitValue[2]<<8); // alternative way of doing things
		
		temperature_raw = bitValue[2]<<8 | bitValue[3];
     3ee:	e7 01       	movw	r28, r14
     3f0:	6a 81       	ldd	r22, Y+2	; 0x02
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	76 2f       	mov	r23, r22
     3f6:	66 27       	eor	r22, r22
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	68 2b       	or	r22, r24
		*temperature = ((temperature_raw)/10.0);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__floatunsisf>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e2       	ldi	r20, 0x20	; 32
     40a:	51 e4       	ldi	r21, 0x41	; 65
     40c:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__divsf3>
     410:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <__fixunssfsi>
     414:	f8 01       	movw	r30, r16
     416:	71 83       	std	Z+1, r23	; 0x01
     418:	60 83       	st	Z, r22
     41a:	02 c0       	rjmp	.+4      	; 0x420 <_ZN3DHT11startSignalEiPjS0_+0x1e8>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	else return 0;
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	7f 90       	pop	r7
     43a:	6f 90       	pop	r6
     43c:	5f 90       	pop	r5
     43e:	4f 90       	pop	r4
     440:	08 95       	ret

00000442 <_ZN3DHT25returnTemperatureHumidityEiPjS0_>:


int DHT::returnTemperatureHumidity(int pin, uint16_t *temperature, uint16_t *humidity)
{
	return startSignal(pin, temperature, humidity);
     442:	0e 94 1c 01 	call	0x238	; 0x238 <_ZN3DHT11startSignalEiPjS0_>
}
     446:	08 95       	ret

00000448 <_ZN3I2CC1Ev>:
#define RSTART 0x10

int flag;

// default constructor
I2C::I2C()
     448:	08 95       	ret

0000044a <_ZN3I2C10InitializeEv>:



int I2C::Initialize(void)
{
	TWBR = TWBR_val;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	80 93 70 00 	sts	0x0070, r24
	return 0;
}
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret

00000456 <_ZN3I2C5StartEv>:


int I2C::Start()
{
	
	TWCR = 0;
     456:	e4 e7       	ldi	r30, 0x74	; 116
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	10 82       	st	Z, r1
	//set the start condition
	//TWINT is the flag, this must be set to 1 because it will become 0 when the start condition is met
	//TWSTA is to start, TWEN is to enable
	
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     45c:	84 ea       	ldi	r24, 0xA4	; 164
     45e:	80 83       	st	Z, r24
	//wait for the TWINT flag set which tells if the start condition has been transmitted
	while (!(TWCR & (1<<TWINT)));
     460:	80 81       	ld	r24, Z
     462:	88 23       	and	r24, r24
     464:	ec f7       	brge	.-6      	; 0x460 <_ZN3I2C5StartEv+0xa>
	//check the TWI status
	if ((TWSR & 0xF8) != TW_START) ERROR();
     466:	80 91 71 00 	lds	r24, 0x0071
     46a:	88 7f       	andi	r24, 0xF8	; 248
     46c:	88 30       	cpi	r24, 0x08	; 8
     46e:	19 f0       	breq	.+6      	; 0x476 <_ZN3I2C5StartEv+0x20>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     470:	86 e6       	ldi	r24, 0x66	; 102
     472:	80 93 9c 00 	sts	0x009C, r24
	while (!(TWCR & (1<<TWINT)));
	//check the TWI status
	if ((TWSR & 0xF8) != TW_START) ERROR();
	
	return 0;
}
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	08 95       	ret

0000047c <_ZN3I2C6RStartEv>:

int I2C::RStart()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     47c:	84 ea       	ldi	r24, 0xA4	; 164
     47e:	80 93 74 00 	sts	0x0074, r24
	while (!(TWCR & (1<<TWINT)));
     482:	e4 e7       	ldi	r30, 0x74	; 116
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	88 23       	and	r24, r24
     48a:	ec f7       	brge	.-6      	; 0x486 <_ZN3I2C6RStartEv+0xa>
	if ((TWSR & 0xF8) != RSTART) ERROR(); //the only difference between this and a normal start is that the status is different
     48c:	80 91 71 00 	lds	r24, 0x0071
     490:	88 7f       	andi	r24, 0xF8	; 248
     492:	80 31       	cpi	r24, 0x10	; 16
     494:	19 f0       	breq	.+6      	; 0x49c <_ZN3I2C6RStartEv+0x20>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     496:	86 e6       	ldi	r24, 0x66	; 102
     498:	80 93 9c 00 	sts	0x009C, r24
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != RSTART) ERROR(); //the only difference between this and a normal start is that the status is different
	return 0;
}
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	08 95       	ret

000004a2 <_ZN3I2C4SLATEh>:

int I2C::SLAT(uint8_t SLA_W)
{
	
	//this is where I input the address of the slave
	TWDR = SLA_W;
     4a2:	60 93 73 00 	sts	0x0073, r22
	//clear the TWINT bit in the
	TWCR = (1<<TWINT) | (1<<TWEN);
     4a6:	84 e8       	ldi	r24, 0x84	; 132
     4a8:	80 93 74 00 	sts	0x0074, r24
	//wait for the TWINT flag to indicate that the slave address has been sent
	while (!(TWCR & (1<<TWINT)));
     4ac:	e4 e7       	ldi	r30, 0x74	; 116
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	88 23       	and	r24, r24
     4b4:	ec f7       	brge	.-6      	; 0x4b0 <_ZN3I2C4SLATEh+0xe>
	//check that the slave address was received, otherwise reference the ERROR function
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) ERROR();
     4b6:	80 91 71 00 	lds	r24, 0x0071
     4ba:	88 7f       	andi	r24, 0xF8	; 248
     4bc:	88 31       	cpi	r24, 0x18	; 24
     4be:	19 f0       	breq	.+6      	; 0x4c6 <_ZN3I2C4SLATEh+0x24>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     4c0:	86 e6       	ldi	r24, 0x66	; 102
     4c2:	80 93 9c 00 	sts	0x009C, r24
	//wait for the TWINT flag to indicate that the slave address has been sent
	while (!(TWCR & (1<<TWINT)));
	//check that the slave address was received, otherwise reference the ERROR function
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK) ERROR();
	return 0;
}
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	08 95       	ret

000004cc <_ZN3I2C4SLAREh>:

int I2C::SLAR(uint8_t SLA_W)
{
	//this is where I input the address of the slave
	TWDR = SLA_W;
     4cc:	60 93 73 00 	sts	0x0073, r22
	//clear the TWINT bit in the
	TWCR = (1<<TWINT) | (1<<TWEN);
     4d0:	84 e8       	ldi	r24, 0x84	; 132
     4d2:	80 93 74 00 	sts	0x0074, r24
	//wait for the TWINT flag to indicate that the slave address has been sent
	
	while (!(TWCR & (1<<TWINT)));
     4d6:	e4 e7       	ldi	r30, 0x74	; 116
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	88 23       	and	r24, r24
     4de:	ec f7       	brge	.-6      	; 0x4da <_ZN3I2C4SLAREh+0xe>
	
	//check that the slave address was received, otherwise reference the ERROR function
	if ((TWSR & 0xF8) != TW_MR_SLA_ACK) ERROR();
     4e0:	80 91 71 00 	lds	r24, 0x0071
     4e4:	88 7f       	andi	r24, 0xF8	; 248
     4e6:	80 34       	cpi	r24, 0x40	; 64
     4e8:	19 f0       	breq	.+6      	; 0x4f0 <_ZN3I2C4SLAREh+0x24>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     4ea:	86 e6       	ldi	r24, 0x66	; 102
     4ec:	80 93 9c 00 	sts	0x009C, r24
	while (!(TWCR & (1<<TWINT)));
	
	//check that the slave address was received, otherwise reference the ERROR function
	if ((TWSR & 0xF8) != TW_MR_SLA_ACK) ERROR();
	return 0;
}
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <_ZN3I2C5WriteEh>:

int I2C::Write(uint8_t data)
{
	//load the data into the TWDR register
	TWDR = data;
     4f6:	60 93 73 00 	sts	0x0073, r22
	//clear the TWINT bit
	TWCR= (1<<TWINT) | (1<<TWEN);
     4fa:	84 e8       	ldi	r24, 0x84	; 132
     4fc:	80 93 74 00 	sts	0x0074, r24
	//wait for the TWINT flag to indicate that the process was completed
	while (!(TWCR & (1<<TWINT)));
     500:	e4 e7       	ldi	r30, 0x74	; 116
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	88 23       	and	r24, r24
     508:	ec f7       	brge	.-6      	; 0x504 <_ZN3I2C5WriteEh+0xe>
	//check that the data was sent
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) ERROR();
     50a:	80 91 71 00 	lds	r24, 0x0071
     50e:	88 7f       	andi	r24, 0xF8	; 248
     510:	88 32       	cpi	r24, 0x28	; 40
     512:	19 f0       	breq	.+6      	; 0x51a <_ZN3I2C5WriteEh+0x24>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     514:	86 e6       	ldi	r24, 0x66	; 102
     516:	80 93 9c 00 	sts	0x009C, r24
	//wait for the TWINT flag to indicate that the process was completed
	while (!(TWCR & (1<<TWINT)));
	//check that the data was sent
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK) ERROR();
	return 0;
}
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	08 95       	ret

00000520 <_ZN3I2C9Read_NAckEv>:

uint8_t I2C::Read_NAck(void)
{
	
	//need to write the TWEA ack so that the slave knows that you want to read another byte after
	TWCR = (1<<TWINT) | (1<<TWEN);
     520:	84 e8       	ldi	r24, 0x84	; 132
     522:	80 93 74 00 	sts	0x0074, r24
	
	//wait for transmission
	while(!(TWCR & (1<<TWINT)));
     526:	e4 e7       	ldi	r30, 0x74	; 116
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	88 23       	and	r24, r24
     52e:	ec f7       	brge	.-6      	; 0x52a <_ZN3I2C9Read_NAckEv+0xa>
	//make sure that the status register confirms that data was received
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK) ERROR();
     530:	80 91 71 00 	lds	r24, 0x0071
     534:	88 7f       	andi	r24, 0xF8	; 248
     536:	88 35       	cpi	r24, 0x58	; 88
     538:	19 f0       	breq	.+6      	; 0x540 <_ZN3I2C9Read_NAckEv+0x20>
} //I2C

int I2C::ERROR()
{
	uint8_t flag = 1;
	UDR1 = 'f';
     53a:	86 e6       	ldi	r24, 0x66	; 102
     53c:	80 93 9c 00 	sts	0x009C, r24
	
	//wait for transmission
	while(!(TWCR & (1<<TWINT)));
	//make sure that the status register confirms that data was received
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK) ERROR();
	return TWDR;
     540:	80 91 73 00 	lds	r24, 0x0073
}
     544:	08 95       	ret

00000546 <_ZN3I2C4StopEv>:

void I2C::Stop(void)
{
	//transmit the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     546:	84 e9       	ldi	r24, 0x94	; 148
     548:	80 93 74 00 	sts	0x0074, r24
     54c:	08 95       	ret

0000054e <_ZN6LOGGERC1Ev>:


#include "LOGGER.h"

// default constructor
LOGGER::LOGGER()
     54e:	fc 01       	movw	r30, r24
     550:	e3 55       	subi	r30, 0x53	; 83
     552:	fc 4f       	sbci	r31, 0xFC	; 252
     554:	10 82       	st	Z, r1
     556:	39 96       	adiw	r30, 0x09	; 9
     558:	10 82       	st	Z, r1
     55a:	11 82       	std	Z+1, r1	; 0x01
     55c:	12 82       	std	Z+2, r1	; 0x02
     55e:	13 82       	std	Z+3, r1	; 0x03
     560:	34 96       	adiw	r30, 0x04	; 4
     562:	88 e1       	ldi	r24, 0x18	; 24
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <_ZN6LOGGERD1Ev>:
{
} //LOGGER

// default destructor
LOGGER::~LOGGER()
     56c:	08 95       	ret

0000056e <_ZN6LOGGER8readTimeEP3RTCP3I2C>:
} //~LOGGER



int LOGGER::readTime(RTC* pRTC, I2C* pI2C)
{
     56e:	9f 92       	push	r9
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
     586:	6b 01       	movw	r12, r22
     588:	5a 01       	movw	r10, r20
	//memset(BUFFER,0,data_length);

	int year = pRTC->Read(pI2C,0x05);
     58a:	45 e0       	ldi	r20, 0x05	; 5
     58c:	b5 01       	movw	r22, r10
     58e:	c6 01       	movw	r24, r12
     590:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
     594:	18 2f       	mov	r17, r24
	uint8_t month = pRTC->Read(pI2C,0x04);
     596:	44 e0       	ldi	r20, 0x04	; 4
     598:	b5 01       	movw	r22, r10
     59a:	c6 01       	movw	r24, r12
     59c:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
     5a0:	08 2f       	mov	r16, r24
	uint8_t day = pRTC->Read(pI2C,0x03);
     5a2:	43 e0       	ldi	r20, 0x03	; 3
     5a4:	b5 01       	movw	r22, r10
     5a6:	c6 01       	movw	r24, r12
     5a8:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
     5ac:	f8 2e       	mov	r15, r24
	uint8_t hour = pRTC->Read(pI2C,0x02) & 0x7F;
     5ae:	42 e0       	ldi	r20, 0x02	; 2
     5b0:	b5 01       	movw	r22, r10
     5b2:	c6 01       	movw	r24, r12
     5b4:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
     5b8:	e8 2e       	mov	r14, r24
	uint8_t minute = pRTC->Read(pI2C,0x01);
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	b5 01       	movw	r22, r10
     5be:	c6 01       	movw	r24, r12
     5c0:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
     5c4:	98 2e       	mov	r9, r24
	uint8_t second = pRTC->Read(pI2C,0x00);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	b5 01       	movw	r22, r10
     5ca:	c6 01       	movw	r24, r12
     5cc:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN3RTC4ReadEP3I2Ch>
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     5d0:	fe 01       	movw	r30, r28
     5d2:	b9 96       	adiw	r30, 0x29	; 41
     5d4:	df 01       	movw	r26, r30
     5d6:	0d 90       	ld	r0, X+
     5d8:	00 20       	and	r0, r0
     5da:	e9 f7       	brne	.-6      	; 0x5d6 <_ZN6LOGGER8readTimeEP3RTCP3I2C+0x68>
     5dc:	bd 01       	movw	r22, r26
     5de:	6e 1b       	sub	r22, r30
     5e0:	7f 0b       	sbc	r23, r31
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
	int act_mo = (int)((month & 0xf0) >> 4) * 10 + (month & 0x0f);
	int act_dy = (int)((day & 0xf0) >> 4) * 10 + (day & 0x0f);
	int act_hr = (int)((hour & 0xf0) >> 4) * 10 + (hour & 0x0f);
	int act_mn = (int)((minute & 0xf0) >> 4) * 10 + (minute & 0x0f);
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
     5e2:	28 2f       	mov	r18, r24
     5e4:	22 95       	swap	r18
     5e6:	2f 70       	andi	r18, 0x0F	; 15
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	a9 01       	movw	r20, r18
     5ec:	44 0f       	add	r20, r20
     5ee:	55 1f       	adc	r21, r21
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	24 0f       	add	r18, r20
     5fe:	35 1f       	adc	r19, r21
     600:	8f 70       	andi	r24, 0x0F	; 15
     602:	a9 01       	movw	r20, r18
     604:	48 0f       	add	r20, r24
     606:	51 1d       	adc	r21, r1
     608:	ca 01       	movw	r24, r20
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     60a:	9f 93       	push	r25
     60c:	4f 93       	push	r20
	
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
	int act_mo = (int)((month & 0xf0) >> 4) * 10 + (month & 0x0f);
	int act_dy = (int)((day & 0xf0) >> 4) * 10 + (day & 0x0f);
	int act_hr = (int)((hour & 0xf0) >> 4) * 10 + (hour & 0x0f);
	int act_mn = (int)((minute & 0xf0) >> 4) * 10 + (minute & 0x0f);
     60e:	49 2d       	mov	r20, r9
     610:	42 95       	swap	r20
     612:	4f 70       	andi	r20, 0x0F	; 15
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	9a 01       	movw	r18, r20
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	44 0f       	add	r20, r20
     61e:	55 1f       	adc	r21, r21
     620:	44 0f       	add	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	44 0f       	add	r20, r20
     626:	55 1f       	adc	r21, r21
     628:	24 0f       	add	r18, r20
     62a:	35 1f       	adc	r19, r21
     62c:	89 2d       	mov	r24, r9
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	28 0f       	add	r18, r24
     632:	31 1d       	adc	r19, r1
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     634:	3f 93       	push	r19
     636:	2f 93       	push	r18
	//memset(BUFFER,0,data_length);

	int year = pRTC->Read(pI2C,0x05);
	uint8_t month = pRTC->Read(pI2C,0x04);
	uint8_t day = pRTC->Read(pI2C,0x03);
	uint8_t hour = pRTC->Read(pI2C,0x02) & 0x7F;
     638:	4e 2d       	mov	r20, r14
     63a:	4f 77       	andi	r20, 0x7F	; 127
	uint8_t second = pRTC->Read(pI2C,0x00);
	
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
	int act_mo = (int)((month & 0xf0) >> 4) * 10 + (month & 0x0f);
	int act_dy = (int)((day & 0xf0) >> 4) * 10 + (day & 0x0f);
	int act_hr = (int)((hour & 0xf0) >> 4) * 10 + (hour & 0x0f);
     63c:	42 95       	swap	r20
     63e:	4f 70       	andi	r20, 0x0F	; 15
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	9a 01       	movw	r18, r20
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	44 0f       	add	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	44 0f       	add	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	24 0f       	add	r18, r20
     656:	35 1f       	adc	r19, r21
     658:	8e 2d       	mov	r24, r14
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	28 0f       	add	r18, r24
     65e:	31 1d       	adc	r19, r1
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     660:	3f 93       	push	r19
     662:	2f 93       	push	r18
	uint8_t minute = pRTC->Read(pI2C,0x01);
	uint8_t second = pRTC->Read(pI2C,0x00);
	
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
	int act_mo = (int)((month & 0xf0) >> 4) * 10 + (month & 0x0f);
	int act_dy = (int)((day & 0xf0) >> 4) * 10 + (day & 0x0f);
     664:	2f 2d       	mov	r18, r15
     666:	22 95       	swap	r18
     668:	2f 70       	andi	r18, 0x0F	; 15
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	c9 01       	movw	r24, r18
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	22 0f       	add	r18, r18
     674:	33 1f       	adc	r19, r19
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	22 0f       	add	r18, r18
     67c:	33 1f       	adc	r19, r19
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	2f 2d       	mov	r18, r15
     684:	2f 70       	andi	r18, 0x0F	; 15
     686:	82 0f       	add	r24, r18
     688:	91 1d       	adc	r25, r1
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     68a:	9f 93       	push	r25
     68c:	8f 93       	push	r24
	uint8_t hour = pRTC->Read(pI2C,0x02) & 0x7F;
	uint8_t minute = pRTC->Read(pI2C,0x01);
	uint8_t second = pRTC->Read(pI2C,0x00);
	
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
	int act_mo = (int)((month & 0xf0) >> 4) * 10 + (month & 0x0f);
     68e:	20 2f       	mov	r18, r16
     690:	22 95       	swap	r18
     692:	2f 70       	andi	r18, 0x0F	; 15
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	c9 01       	movw	r24, r18
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	22 0f       	add	r18, r18
     69e:	33 1f       	adc	r19, r19
     6a0:	22 0f       	add	r18, r18
     6a2:	33 1f       	adc	r19, r19
     6a4:	22 0f       	add	r18, r18
     6a6:	33 1f       	adc	r19, r19
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	0f 70       	andi	r16, 0x0F	; 15
     6ae:	80 0f       	add	r24, r16
     6b0:	91 1d       	adc	r25, r1
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
	uint8_t day = pRTC->Read(pI2C,0x03);
	uint8_t hour = pRTC->Read(pI2C,0x02) & 0x7F;
	uint8_t minute = pRTC->Read(pI2C,0x01);
	uint8_t second = pRTC->Read(pI2C,0x00);
	
	int act_yr = (int)((year & 0xf0) >> 4) * 10 + (year & 0x0f);
     6b6:	41 2f       	mov	r20, r17
     6b8:	40 7f       	andi	r20, 0xF0	; 240
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	55 95       	asr	r21
     6be:	47 95       	ror	r20
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	55 95       	asr	r21
     6ca:	47 95       	ror	r20
     6cc:	9a 01       	movw	r18, r20
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	44 0f       	add	r20, r20
     6d4:	55 1f       	adc	r21, r21
     6d6:	44 0f       	add	r20, r20
     6d8:	55 1f       	adc	r21, r21
     6da:	44 0f       	add	r20, r20
     6dc:	55 1f       	adc	r21, r21
     6de:	24 0f       	add	r18, r20
     6e0:	35 1f       	adc	r19, r21
     6e2:	1f 70       	andi	r17, 0x0F	; 15
     6e4:	21 0f       	add	r18, r17
     6e6:	31 1d       	adc	r19, r1
	int act_sc = (int)((second & 0xf0) >> 4) * 10 + (second & 0x0f);
	
	// act_yr, act_mo, act_dy, act_hr, act_mn, act_sc
	// year, month, day, hour, minute, second
	
	sprintf(BUFFER + strlen(BUFFER), "%d,\"20%02d-%02d-%02d %02d:%02d:%02d\"", device_id, act_yr, act_mo, act_dy, act_hr, act_mn, act_sc); // i took out the newline for sending
     6e8:	3f 93       	push	r19
     6ea:	2f 93       	push	r18
     6ec:	ef 56       	subi	r30, 0x6F	; 111
     6ee:	fc 4f       	sbci	r31, 0xFC	; 252
     6f0:	81 81       	ldd	r24, Z+1	; 0x01
     6f2:	8f 93       	push	r24
     6f4:	80 81       	ld	r24, Z
     6f6:	8f 93       	push	r24
     6f8:	84 ea       	ldi	r24, 0xA4	; 164
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	68 5d       	subi	r22, 0xD8	; 216
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	c6 0f       	add	r28, r22
     706:	d7 1f       	adc	r29, r23
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
	
	return 0;
     710:	4d b7       	in	r20, 0x3d	; 61
     712:	5e b7       	in	r21, 0x3e	; 62
     714:	4e 5e       	subi	r20, 0xEE	; 238
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	5e bf       	out	0x3e, r21	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	4d bf       	out	0x3d, r20	; 61
}
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	08 95       	ret

0000073e <_ZN6LOGGER6logDHTEP3DHTh>:


int LOGGER::logDHT(DHT* pDHT, uint8_t address_DHT)
{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <_ZN6LOGGER6logDHTEP3DHTh+0xa>
     748:	00 d0       	rcall	.+0      	; 0x74a <_ZN6LOGGER6logDHTEP3DHTh+0xc>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	8c 01       	movw	r16, r24
     750:	cb 01       	movw	r24, r22
	
	uint16_t temperature;
	uint16_t humidity;

	char vals = pDHT->returnTemperatureHumidity(address_DHT, &temperature, &humidity);
     752:	64 2f       	mov	r22, r20
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	9e 01       	movw	r18, r28
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	ae 01       	movw	r20, r28
     75e:	4d 5f       	subi	r20, 0xFD	; 253
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	0e 94 21 02 	call	0x442	; 0x442 <_ZN3DHT25returnTemperatureHumidityEiPjS0_>
	sprintf(BUFFER+strlen(BUFFER),",%d,%d", temperature, humidity);
     766:	f8 01       	movw	r30, r16
     768:	b9 96       	adiw	r30, 0x29	; 41
     76a:	df 01       	movw	r26, r30
     76c:	0d 90       	ld	r0, X+
     76e:	00 20       	and	r0, r0
     770:	e9 f7       	brne	.-6      	; 0x76c <_ZN6LOGGER6logDHTEP3DHTh+0x2e>
     772:	9d 01       	movw	r18, r26
     774:	2e 1b       	sub	r18, r30
     776:	3f 0b       	sbc	r19, r31
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	8f 93       	push	r24
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	8f 93       	push	r24
     780:	8c 81       	ldd	r24, Y+4	; 0x04
     782:	8f 93       	push	r24
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	8f 93       	push	r24
     788:	89 ec       	ldi	r24, 0xC9	; 201
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	28 5d       	subi	r18, 0xD8	; 216
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	c8 01       	movw	r24, r16
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
	//sprintf(BUFFER+strlen(BUFFER),"temperature%d:%d\r\nhumidity%d:%d\r\n", address, temperature, address, humidity);
	
	return 0;
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
}
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <_ZN6LOGGER6logMUXEP6ADCLIB>:


int LOGGER::logMUX(ADCLIB* pADCLIB)
{
     7c2:	af 92       	push	r10
     7c4:	bf 92       	push	r11
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	7c 01       	movw	r14, r24
     7d8:	6b 01       	movw	r12, r22
	//memset(BUFFER,0,data_length);
	pADCLIB->choose_ADC(MUX0_OUT);
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	c6 01       	movw	r24, r12
     7de:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6ADCLIB10choose_ADCEh>
	
	//mux = fADC.Read_Mux(1);
	//sprintf(BUFFER+strlen(BUFFER),"\tMux: %d", fADC.Read_Mux(1));
	
	for (int i = 0; i<16; i++)
     7e2:	a1 2c       	mov	r10, r1
     7e4:	b1 2c       	mov	r11, r1
	{
		sprintf(BUFFER+strlen(BUFFER), ",%d", pADCLIB->read_mux_sensors(i));
     7e6:	87 01       	movw	r16, r14
     7e8:	07 5d       	subi	r16, 0xD7	; 215
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	cc ec       	ldi	r28, 0xCC	; 204
     7ee:	d1 e0       	ldi	r29, 0x01	; 1
     7f0:	b5 01       	movw	r22, r10
     7f2:	c6 01       	movw	r24, r12
     7f4:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN6ADCLIB16read_mux_sensorsEi>
     7f8:	f8 01       	movw	r30, r16
     7fa:	01 90       	ld	r0, Z+
     7fc:	00 20       	and	r0, r0
     7fe:	e9 f7       	brne	.-6      	; 0x7fa <_ZN6LOGGER6logMUXEP6ADCLIB+0x38>
     800:	9f 01       	movw	r18, r30
     802:	20 1b       	sub	r18, r16
     804:	31 0b       	sbc	r19, r17
     806:	9f 93       	push	r25
     808:	8f 93       	push	r24
     80a:	7f 93       	push	r23
     80c:	6f 93       	push	r22
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	28 5d       	subi	r18, 0xD8	; 216
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	2e 0d       	add	r18, r14
     818:	3f 1d       	adc	r19, r15
     81a:	3f 93       	push	r19
     81c:	2f 93       	push	r18
     81e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
	pADCLIB->choose_ADC(MUX0_OUT);
	
	//mux = fADC.Read_Mux(1);
	//sprintf(BUFFER+strlen(BUFFER),"\tMux: %d", fADC.Read_Mux(1));
	
	for (int i = 0; i<16; i++)
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	a8 1a       	sub	r10, r24
     826:	b8 0a       	sbc	r11, r24
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	08 96       	adiw	r24, 0x08	; 8
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	9e bf       	out	0x3e, r25	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	8d bf       	out	0x3d, r24	; 61
     838:	90 e1       	ldi	r25, 0x10	; 16
     83a:	a9 16       	cp	r10, r25
     83c:	b1 04       	cpc	r11, r1
     83e:	c1 f6       	brne	.-80     	; 0x7f0 <_ZN6LOGGER6logMUXEP6ADCLIB+0x2e>
	}

	//sprintf(BUFFER+strlen(BUFFER), "\r\nMux: %d", mux);

	return 0;
}
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	08 95       	ret

0000085a <_ZN6LOGGER6logADCEP6ADCLIBhh>:


int LOGGER::logADC(ADCLIB* pADCLIB, uint8_t address_ADC, uint8_t ctrl)
{
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	8c 01       	movw	r16, r24
     868:	7b 01       	movw	r14, r22
     86a:	c4 2f       	mov	r28, r20
     86c:	d2 2f       	mov	r29, r18
	
	uint32_t sharp;
	//memset(BUFFER,0,data_length);
	pADCLIB->choose_ADC(address_ADC);
     86e:	64 2f       	mov	r22, r20
     870:	c7 01       	movw	r24, r14
     872:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6ADCLIB10choose_ADCEh>
	sharp = pADCLIB->read_sharp(address_ADC, ctrl);
     876:	4d 2f       	mov	r20, r29
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	6c 2f       	mov	r22, r28
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	c7 01       	movw	r24, r14
     880:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN6ADCLIB10read_sharpEii>
	//sprintf(BUFFER+strlen(BUFFER),"\tsharp: %d", sharp);
	sprintf(BUFFER+strlen(BUFFER),",%d", sharp);
     884:	f8 01       	movw	r30, r16
     886:	b9 96       	adiw	r30, 0x29	; 41
     888:	df 01       	movw	r26, r30
     88a:	0d 90       	ld	r0, X+
     88c:	00 20       	and	r0, r0
     88e:	e9 f7       	brne	.-6      	; 0x88a <_ZN6LOGGER6logADCEP6ADCLIBhh+0x30>
     890:	9d 01       	movw	r18, r26
     892:	2e 1b       	sub	r18, r30
     894:	3f 0b       	sbc	r19, r31
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	7f 93       	push	r23
     89c:	6f 93       	push	r22
     89e:	8c ec       	ldi	r24, 0xCC	; 204
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	9f 93       	push	r25
     8a4:	8f 93       	push	r24
     8a6:	28 5d       	subi	r18, 0xD8	; 216
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	c8 01       	movw	r24, r16
     8ac:	82 0f       	add	r24, r18
     8ae:	93 1f       	adc	r25, r19
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>

	return 0;
     8b8:	8d b7       	in	r24, 0x3d	; 61
     8ba:	9e b7       	in	r25, 0x3e	; 62
     8bc:	08 96       	adiw	r24, 0x08	; 8
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	9e bf       	out	0x3e, r25	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	8d bf       	out	0x3d, r24	; 61
}
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	08 95       	ret

000008da <_ZN6LOGGER6logTGSEP6ADCLIBh>:


int LOGGER::logTGS(ADCLIB* pADCLIB, uint8_t address_TGS)
{
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	8c 01       	movw	r16, r24
     8e6:	7b 01       	movw	r14, r22
     8e8:	c4 2f       	mov	r28, r20
	uint32_t tgs;
	pADCLIB->choose_ADC(address_TGS);
     8ea:	64 2f       	mov	r22, r20
     8ec:	c7 01       	movw	r24, r14
     8ee:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6ADCLIB10choose_ADCEh>
	tgs = pADCLIB->read_tgs(address_TGS);
     8f2:	6c 2f       	mov	r22, r28
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	c7 01       	movw	r24, r14
     8f8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN6ADCLIB8read_tgsEi>
	sprintf(BUFFER + strlen(BUFFER), ",%d", tgs);
     8fc:	f8 01       	movw	r30, r16
     8fe:	b9 96       	adiw	r30, 0x29	; 41
     900:	df 01       	movw	r26, r30
     902:	0d 90       	ld	r0, X+
     904:	00 20       	and	r0, r0
     906:	e9 f7       	brne	.-6      	; 0x902 <_ZN6LOGGER6logTGSEP6ADCLIBh+0x28>
     908:	9d 01       	movw	r18, r26
     90a:	2e 1b       	sub	r18, r30
     90c:	3f 0b       	sbc	r19, r31
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	7f 93       	push	r23
     914:	6f 93       	push	r22
     916:	8c ec       	ldi	r24, 0xCC	; 204
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	28 5d       	subi	r18, 0xD8	; 216
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	c8 01       	movw	r24, r16
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>

	return 0;
     930:	8d b7       	in	r24, 0x3d	; 61
     932:	9e b7       	in	r25, 0x3e	; 62
     934:	08 96       	adiw	r24, 0x08	; 8
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	9e bf       	out	0x3e, r25	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	8d bf       	out	0x3d, r24	; 61
}
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <_ZN6LOGGER9logSINYEIEP5USARTmm>:


int LOGGER::logSINYEI(USART* pUSART, unsigned long lowocc_us, unsigned long sampletime_ms)
{
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	82 2f       	mov	r24, r18
     960:	93 2f       	mov	r25, r19
	//float concentration = 0;
	//
	//ratio = lowocc_us / (sampletime_ms * 1000.0) * 100.0;
	//concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
	
	sprintf(SINYEI + strlen(SINYEI), ",%lu,%lu", sampletime_ms, lowocc_us);
     962:	de 01       	movw	r26, r28
     964:	af 57       	subi	r26, 0x7F	; 127
     966:	bd 4f       	sbci	r27, 0xFD	; 253
     968:	fd 01       	movw	r30, r26
     96a:	01 90       	ld	r0, Z+
     96c:	00 20       	and	r0, r0
     96e:	e9 f7       	brne	.-6      	; 0x96a <_ZN6LOGGER9logSINYEIEP5USARTmm+0x1a>
     970:	9f 01       	movw	r18, r30
     972:	2a 1b       	sub	r18, r26
     974:	3b 0b       	sbc	r19, r27
     976:	5f 93       	push	r21
     978:	4f 93       	push	r20
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	1f 93       	push	r17
     980:	0f 93       	push	r16
     982:	ff 92       	push	r15
     984:	ef 92       	push	r14
     986:	80 ed       	ldi	r24, 0xD0	; 208
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	20 58       	subi	r18, 0x80	; 128
     990:	3d 4f       	sbci	r19, 0xFD	; 253
     992:	2c 0f       	add	r18, r28
     994:	3d 1f       	adc	r19, r29
     996:	3f 93       	push	r19
     998:	2f 93       	push	r18
     99a:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
	SINYEI_logged = 1;
     99e:	c3 55       	subi	r28, 0x53	; 83
     9a0:	dc 4f       	sbci	r29, 0xFC	; 252
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	88 83       	st	Y, r24
	//pUSART->sendToUSART1(SINYEI);
	return 0;
     9a6:	8d b7       	in	r24, 0x3d	; 61
     9a8:	9e b7       	in	r25, 0x3e	; 62
     9aa:	0c 96       	adiw	r24, 0x0c	; 12
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	9e bf       	out	0x3e, r25	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	8d bf       	out	0x3d, r24	; 61
}
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <_ZN6LOGGER10send_to_SDEP5USARTP7SDMacroP3FILPc>:
	return 0;
}


int LOGGER::send_to_SD(USART* pUSART, SDMacro* pSDMacro, FIL* file, char* filename)
{
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ea 01       	movw	r28, r20
     9d8:	b9 01       	movw	r22, r18
     9da:	98 01       	movw	r18, r16
	//char BUFFER_SD[data_length];
	//strncpy(BUFFER_SD, BUFFER, strlen(BUFFER));
	//sprintf(BUFFER_SD + strlen(BUFFER_SD), "\r\n");
	//pUSART->sendToUSART1(BUFFER);

	sprintf(BUFFER + strlen(BUFFER), "\r\n");
     9dc:	ac 01       	movw	r20, r24
     9de:	47 5d       	subi	r20, 0xD7	; 215
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	fa 01       	movw	r30, r20
     9e4:	01 90       	ld	r0, Z+
     9e6:	00 20       	and	r0, r0
     9e8:	e9 f7       	brne	.-6      	; 0x9e4 <_ZN6LOGGER10send_to_SDEP5USARTP7SDMacroP3FILPc+0x1c>
     9ea:	e4 1b       	sub	r30, r20
     9ec:	f5 0b       	sbc	r31, r21
     9ee:	e8 0f       	add	r30, r24
     9f0:	f9 1f       	adc	r31, r25
     9f2:	0f 2e       	mov	r0, r31
     9f4:	fd e0       	ldi	r31, 0x0D	; 13
     9f6:	cf 2e       	mov	r12, r31
     9f8:	fa e0       	ldi	r31, 0x0A	; 10
     9fa:	df 2e       	mov	r13, r31
     9fc:	e1 2c       	mov	r14, r1
     9fe:	f0 2d       	mov	r31, r0
     a00:	c0 a6       	std	Z+40, r12	; 0x28
     a02:	d1 a6       	std	Z+41, r13	; 0x29
     a04:	e2 a6       	std	Z+42, r14	; 0x2a
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a06:	f8 94       	cli

	ATOMIC_BLOCK(ATOMIC_FORCEON) pSDMacro->SendData(file, BUFFER, filename);
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN7SDMacro8SendDataEP3FILPcS2_>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     a0e:	78 94       	sei
	//memset(BUFFER_SD, 0, data_length);

	return 0;
}
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	08 95       	ret

00000a24 <_ZN6LOGGER12send_to_WIFIEP4WIFIP5USARTPci>:


int LOGGER::send_to_WIFI(WIFI* pWIFI, USART* pUSART, char* HEADER, int HEADER_len)
{
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	eb 01       	movw	r28, r22
     a32:	ba 01       	movw	r22, r20
	int BUFFER_len = strlen(BUFFER);
     a34:	ac 01       	movw	r20, r24
     a36:	47 5d       	subi	r20, 0xD7	; 215
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	fa 01       	movw	r30, r20
     a3c:	01 90       	ld	r0, Z+
     a3e:	00 20       	and	r0, r0
     a40:	e9 f7       	brne	.-6      	; 0xa3c <_ZN6LOGGER12send_to_WIFIEP4WIFIP5USARTPci+0x18>
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	e4 1b       	sub	r30, r20
     a46:	f5 0b       	sbc	r31, r21

	//if (pWIFI.send_application(&fUSART, BUFFER, BUFFER_len, HEADER, HEADER_len) == 1) pWIFI.setupWifi(&fUSART, USERNAME, PASSWORD);
	uint8_t send_to_WIFI_FLAG = pWIFI->send_application(pUSART, BUFFER, BUFFER_len, HEADER, HEADER_len);
     a48:	78 01       	movw	r14, r16
     a4a:	89 01       	movw	r16, r18
     a4c:	9f 01       	movw	r18, r30
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_ZN4WIFI16send_applicationEP5USARTPciS2_i>
	return send_to_WIFI_FLAG;
}
     a54:	99 27       	eor	r25, r25
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <_ZN6LOGGER11resetBUFFEREv>:


int LOGGER::resetBUFFER()
{
	memset(BUFFER,0,data_length);
     a64:	89 96       	adiw	r24, 0x29	; 41
     a66:	2c e2       	ldi	r18, 0x2C	; 44
     a68:	31 e0       	ldi	r19, 0x01	; 1
     a6a:	fc 01       	movw	r30, r24
     a6c:	a9 01       	movw	r20, r18
     a6e:	11 92       	st	Z+, r1
     a70:	41 50       	subi	r20, 0x01	; 1
     a72:	50 40       	sbci	r21, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <_ZN6LOGGER11resetBUFFEREv+0xa>
	return 0;
}
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	08 95       	ret

00000a7c <_ZN6LOGGER7preSENDEP5USART>:


// this function is used to check if sinyei has logged yet or not
int LOGGER::preSEND(USART* pUSART)
{
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
	
	//char h[3];
	//sprintf(h, "%d", SINYEI_logged);
	//pUSART->sendToUSART1(h);

	if (SINYEI_logged == 1) {
     a84:	fc 01       	movw	r30, r24
     a86:	e3 55       	subi	r30, 0x53	; 83
     a88:	fc 4f       	sbci	r31, 0xFC	; 252
     a8a:	20 81       	ld	r18, Z
     a8c:	21 30       	cpi	r18, 0x01	; 1
     a8e:	29 f5       	brne	.+74     	; 0xada <_ZN6LOGGER7preSENDEP5USART+0x5e>
     a90:	ec 01       	movw	r28, r24
		sprintf(BUFFER + strlen(BUFFER), "%s", SINYEI);
     a92:	8c 01       	movw	r16, r24
     a94:	0f 57       	subi	r16, 0x7F	; 127
     a96:	1d 4f       	sbci	r17, 0xFD	; 253
     a98:	e4 58       	subi	r30, 0x84	; 132
     a9a:	f3 40       	sbci	r31, 0x03	; 3
     a9c:	df 01       	movw	r26, r30
     a9e:	0d 90       	ld	r0, X+
     aa0:	00 20       	and	r0, r0
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <_ZN6LOGGER7preSENDEP5USART+0x22>
     aa4:	9d 01       	movw	r18, r26
     aa6:	2e 1b       	sub	r18, r30
     aa8:	3f 0b       	sbc	r19, r31
     aaa:	c9 01       	movw	r24, r18
     aac:	88 96       	adiw	r24, 0x28	; 40
     aae:	b8 01       	movw	r22, r16
     ab0:	8c 0f       	add	r24, r28
     ab2:	9d 1f       	adc	r25, r29
     ab4:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <strcpy>
		SINYEI_logged = 0;
     ab8:	c3 55       	subi	r28, 0x53	; 83
     aba:	dc 4f       	sbci	r29, 0xFC	; 252
     abc:	18 82       	st	Y, r1
		memset(SINYEI, 0, strlen(SINYEI));
     abe:	f8 01       	movw	r30, r16
     ac0:	01 90       	ld	r0, Z+
     ac2:	00 20       	and	r0, r0
     ac4:	e9 f7       	brne	.-6      	; 0xac0 <_ZN6LOGGER7preSENDEP5USART+0x44>
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	af 01       	movw	r20, r30
     aca:	40 1b       	sub	r20, r16
     acc:	51 0b       	sbc	r21, r17
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <memset>
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <_ZN6LOGGER7preSENDEP5USART+0x82>
	}
	else sprintf(BUFFER + strlen(BUFFER), ",NULL,NULL");
     ada:	fc 01       	movw	r30, r24
     adc:	b9 96       	adiw	r30, 0x29	; 41
     ade:	df 01       	movw	r26, r30
     ae0:	0d 90       	ld	r0, X+
     ae2:	00 20       	and	r0, r0
     ae4:	e9 f7       	brne	.-6      	; 0xae0 <_ZN6LOGGER7preSENDEP5USART+0x64>
     ae6:	ae 1b       	sub	r26, r30
     ae8:	bf 0b       	sbc	r27, r31
     aea:	98 96       	adiw	r26, 0x28	; 40
     aec:	a8 0f       	add	r26, r24
     aee:	b9 1f       	adc	r27, r25
     af0:	8b e0       	ldi	r24, 0x0B	; 11
     af2:	e9 ed       	ldi	r30, 0xD9	; 217
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	8a 95       	dec	r24
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <_ZN6LOGGER7preSENDEP5USART+0x7a>

}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <_ZN6LOGGER6logALLEP5USARTP3RTCP3I2CP3DHTP6ADCLIB>:


int LOGGER::logALL(USART* pUSART, RTC* pRTC, I2C* pI2C, DHT* pDHT, ADCLIB* pADC)
{
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	6b 01       	movw	r12, r22
     b24:	5a 01       	movw	r10, r20
     b26:	49 01       	movw	r8, r18
	
	resetBUFFER();
     b28:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN6LOGGER11resetBUFFEREv>

	readTime(pRTC, pI2C);
     b2c:	a4 01       	movw	r20, r8
     b2e:	b5 01       	movw	r22, r10
     b30:	ce 01       	movw	r24, r28
     b32:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6LOGGER8readTimeEP3RTCP3I2C>

	// DHT22_2_SNS will be first for device 23, 24, 25, 26
	logDHT(pDHT, DHT22_2_SNS);
     b36:	45 e0       	ldi	r20, 0x05	; 5
     b38:	b8 01       	movw	r22, r16
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN6LOGGER6logDHTEP3DHTh>
	logDHT(pDHT, DHT22_1_SNS);
     b40:	44 e0       	ldi	r20, 0x04	; 4
     b42:	b8 01       	movw	r22, r16
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN6LOGGER6logDHTEP3DHTh>
	// DHT22_2_SNS will be second for device 19, 20, 21, 22, 27, 28
	//logDHT(pDHT, DHT22_2_SNS);


	logMUX(pADC);
     b4a:	b7 01       	movw	r22, r14
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN6LOGGER6logMUXEP6ADCLIB>

	logADC(pADC, GP2Y010_1_SNS, GP2Y1010_1_CTRL);
     b52:	26 e0       	ldi	r18, 0x06	; 6
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	b7 01       	movw	r22, r14
     b58:	ce 01       	movw	r24, r28
     b5a:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN6LOGGER6logADCEP6ADCLIBhh>
	logADC(pADC, GP2Y010_2_SNS, GP2Y1010_2_CTRL);
     b5e:	25 e0       	ldi	r18, 0x05	; 5
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	b7 01       	movw	r22, r14
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN6LOGGER6logADCEP6ADCLIBhh>

	logTGS(pADC, TGS2600_SNS);
     b6a:	42 e0       	ldi	r20, 0x02	; 2
     b6c:	b7 01       	movw	r22, r14
     b6e:	ce 01       	movw	r24, r28
     b70:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN6LOGGER6logTGSEP6ADCLIBh>

	preSEND(pUSART);
     b74:	b6 01       	movw	r22, r12
     b76:	ce 01       	movw	r24, r28
     b78:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_ZN6LOGGER7preSENDEP5USART>

	return 0;

}
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	9f 90       	pop	r9
     b96:	8f 90       	pop	r8
     b98:	08 95       	ret

00000b9a <_Z18setupPotentiometerv>:



// this function sets the initial resistances of the potentiometers
void setupPotentiometer(void)
{
     b9a:	0f 93       	push	r16
	fPIC.Set(&fI2C, P1, GP2Y010_F1_P1, 13); // setup GP2Y010_F1_P1
     b9c:	0d e0       	ldi	r16, 0x0D	; 13
     b9e:	23 e0       	ldi	r18, 0x03	; 3
     ba0:	48 e5       	ldi	r20, 0x58	; 88
     ba2:	6e e0       	ldi	r22, 0x0E	; 14
     ba4:	7d e0       	ldi	r23, 0x0D	; 13
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	9d e0       	ldi	r25, 0x0D	; 13
     baa:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P2, GP2Y010_F0_P2, 13); // setup GP2Y010_F0_P2
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	4c e5       	ldi	r20, 0x5C	; 92
     bb2:	6e e0       	ldi	r22, 0x0E	; 14
     bb4:	7d e0       	ldi	r23, 0x0D	; 13
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	9d e0       	ldi	r25, 0x0D	; 13
     bba:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P1, MICS2614_14_P1, 25); // setup MICS2614_14_P1
     bbe:	09 e1       	ldi	r16, 0x19	; 25
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	48 e5       	ldi	r20, 0x58	; 88
     bc4:	6e e0       	ldi	r22, 0x0E	; 14
     bc6:	7d e0       	ldi	r23, 0x0D	; 13
     bc8:	85 e0       	ldi	r24, 0x05	; 5
     bca:	9d e0       	ldi	r25, 0x0D	; 13
     bcc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P2, MICS2614_15_P2, 50); // setup MICS2614_15_P2
     bd0:	02 e3       	ldi	r16, 0x32	; 50
     bd2:	22 e0       	ldi	r18, 0x02	; 2
     bd4:	4c e5       	ldi	r20, 0x5C	; 92
     bd6:	6e e0       	ldi	r22, 0x0E	; 14
     bd8:	7d e0       	ldi	r23, 0x0D	; 13
     bda:	85 e0       	ldi	r24, 0x05	; 5
     bdc:	9d e0       	ldi	r25, 0x0D	; 13
     bde:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P4, TGS2620_11_P4, 13); // setup TGS2620_11_P4
     be2:	0d e0       	ldi	r16, 0x0D	; 13
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	4e e5       	ldi	r20, 0x5E	; 94
     be8:	6e e0       	ldi	r22, 0x0E	; 14
     bea:	7d e0       	ldi	r23, 0x0D	; 13
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	9d e0       	ldi	r25, 0x0D	; 13
     bf0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P3, TGS2620_2_P3, 13); // setup TGS2620_2_P3
     bf4:	22 e0       	ldi	r18, 0x02	; 2
     bf6:	4a e5       	ldi	r20, 0x5A	; 90
     bf8:	6e e0       	ldi	r22, 0x0E	; 14
     bfa:	7d e0       	ldi	r23, 0x0D	; 13
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	9d e0       	ldi	r25, 0x0D	; 13
     c00:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P4, MICS4514_8_P4, 25); // setup MICS4514_8_P4
     c04:	09 e1       	ldi	r16, 0x19	; 25
     c06:	22 e0       	ldi	r18, 0x02	; 2
     c08:	4e e5       	ldi	r20, 0x5E	; 94
     c0a:	6e e0       	ldi	r22, 0x0E	; 14
     c0c:	7d e0       	ldi	r23, 0x0D	; 13
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	9d e0       	ldi	r25, 0x0D	; 13
     c12:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P4, MICS4514_10_P4, 255); // setup MICS4514_10_P4
     c16:	0f ef       	ldi	r16, 0xFF	; 255
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	4e e5       	ldi	r20, 0x5E	; 94
     c1c:	6e e0       	ldi	r22, 0x0E	; 14
     c1e:	7d e0       	ldi	r23, 0x0D	; 13
     c20:	85 e0       	ldi	r24, 0x05	; 5
     c22:	9d e0       	ldi	r25, 0x0D	; 13
     c24:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P3, MICS5121_6_P3, 255); // setup MICS5121_6_P3
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	4a e5       	ldi	r20, 0x5A	; 90
     c2c:	6e e0       	ldi	r22, 0x0E	; 14
     c2e:	7d e0       	ldi	r23, 0x0D	; 13
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	9d e0       	ldi	r25, 0x0D	; 13
     c34:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P3, MICS5524_5_P3, 255); // setup MICS5524_5_P3
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	4a e5       	ldi	r20, 0x5A	; 90
     c3c:	6e e0       	ldi	r22, 0x0E	; 14
     c3e:	7d e0       	ldi	r23, 0x0D	; 13
     c40:	85 e0       	ldi	r24, 0x05	; 5
     c42:	9d e0       	ldi	r25, 0x0D	; 13
     c44:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P4, MICS5526_4_P4, 255); // setup MICS5526_4_P4
     c48:	23 e0       	ldi	r18, 0x03	; 3
     c4a:	4e e5       	ldi	r20, 0x5E	; 94
     c4c:	6e e0       	ldi	r22, 0x0E	; 14
     c4e:	7d e0       	ldi	r23, 0x0D	; 13
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	9d e0       	ldi	r25, 0x0D	; 13
     c54:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P3, MQ3_7_P3, 255); // setup MQ3_7_P3
     c58:	23 e0       	ldi	r18, 0x03	; 3
     c5a:	4a e5       	ldi	r20, 0x5A	; 90
     c5c:	6e e0       	ldi	r22, 0x0E	; 14
     c5e:	7d e0       	ldi	r23, 0x0D	; 13
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	9d e0       	ldi	r25, 0x0D	; 13
     c64:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P1, TGS2600_F2_P1, 255); // setup TGS2600_F2_P1
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	48 e5       	ldi	r20, 0x58	; 88
     c6c:	6e e0       	ldi	r22, 0x0E	; 14
     c6e:	7d e0       	ldi	r23, 0x0D	; 13
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	9d e0       	ldi	r25, 0x0D	; 13
     c74:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P1, TGS822_3_P1, 25); // setup TGS822_3_P1
     c78:	09 e1       	ldi	r16, 0x19	; 25
     c7a:	22 e0       	ldi	r18, 0x02	; 2
     c7c:	48 e5       	ldi	r20, 0x58	; 88
     c7e:	6e e0       	ldi	r22, 0x0E	; 14
     c80:	7d e0       	ldi	r23, 0x0D	; 13
     c82:	85 e0       	ldi	r24, 0x05	; 5
     c84:	9d e0       	ldi	r25, 0x0D	; 13
     c86:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
	fPIC.Set(&fI2C, P2, TGS880_9_P2, 255); // setup TGS880_9_P2fda
     c8a:	0f ef       	ldi	r16, 0xFF	; 255
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	4c e5       	ldi	r20, 0x5C	; 92
     c90:	6e e0       	ldi	r22, 0x0E	; 14
     c92:	7d e0       	ldi	r23, 0x0D	; 13
     c94:	85 e0       	ldi	r24, 0x05	; 5
     c96:	9d e0       	ldi	r25, 0x0D	; 13
     c98:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN3PIC3SetEP3I2Chhh>
}
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <_Z14getCredentials3FIL>:
	sprintf(BUFFER + strlen(BUFFER), ",%d", voltage);
}


int getCredentials(FIL cFIL)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	2a 97       	sbiw	r28, 0x0a	; 10
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61

	if (f_open(&cFIL, "network.txt", FA_READ) == FR_OK);
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	63 ef       	ldi	r22, 0xF3	; 243
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	ce 01       	movw	r24, r28
     cc0:	41 96       	adiw	r24, 0x11	; 17
     cc2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <f_open>
     cc6:	88 23       	and	r24, r24
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <_Z14getCredentials3FIL+0x36>
	else fUSART.sendToUSART1("failed to open network.txt");
     cca:	64 ee       	ldi	r22, 0xE4	; 228
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	80 e1       	ldi	r24, 0x10	; 16
     cd0:	9d e0       	ldi	r25, 0x0D	; 13
     cd2:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	char line[10];

	while (f_gets(line, sizeof(line), &cFIL)) {
		sprintf(USERNAME + strlen(USERNAME), "%s", line);
     cd6:	0c e7       	ldi	r16, 0x7C	; 124
     cd8:	16 e0       	ldi	r17, 0x06	; 6
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <_Z14getCredentials3FIL+0x52>
     cdc:	f8 01       	movw	r30, r16
     cde:	01 90       	ld	r0, Z+
     ce0:	00 20       	and	r0, r0
     ce2:	e9 f7       	brne	.-6      	; 0xcde <_Z14getCredentials3FIL+0x3e>
     ce4:	cf 01       	movw	r24, r30
     ce6:	be 01       	movw	r22, r28
     ce8:	6f 5f       	subi	r22, 0xFF	; 255
     cea:	7f 4f       	sbci	r23, 0xFF	; 255
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <strcpy>

	if (f_open(&cFIL, "network.txt", FA_READ) == FR_OK);
	else fUSART.sendToUSART1("failed to open network.txt");
	char line[10];

	while (f_gets(line, sizeof(line), &cFIL)) {
     cf2:	ae 01       	movw	r20, r28
     cf4:	4f 5e       	subi	r20, 0xEF	; 239
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	6a e0       	ldi	r22, 0x0A	; 10
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 0e 1c 	call	0x381c	; 0x381c <f_gets>
     d04:	89 2b       	or	r24, r25
     d06:	51 f7       	brne	.-44     	; 0xcdc <_Z14getCredentials3FIL+0x3c>
		sprintf(USERNAME + strlen(USERNAME), "%s", line);
	}

	if (f_open(&cFIL, "password.txt", FA_READ) == FR_OK);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	6f ef       	ldi	r22, 0xFF	; 255
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	ce 01       	movw	r24, r28
     d10:	41 96       	adiw	r24, 0x11	; 17
     d12:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <f_open>
     d16:	88 23       	and	r24, r24
     d18:	31 f0       	breq	.+12     	; 0xd26 <_Z14getCredentials3FIL+0x86>
	else fUSART.sendToUSART1("dsf");
     d1a:	6c e0       	ldi	r22, 0x0C	; 12
     d1c:	72 e0       	ldi	r23, 0x02	; 2
     d1e:	80 e1       	ldi	r24, 0x10	; 16
     d20:	9d e0       	ldi	r25, 0x0D	; 13
     d22:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	
	while (f_gets(line, sizeof(line), &cFIL)) {
		sprintf(PASSWORD + strlen(PASSWORD), "%s", line);
     d26:	08 e1       	ldi	r16, 0x18	; 24
     d28:	16 e0       	ldi	r17, 0x06	; 6
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <_Z14getCredentials3FIL+0xa2>
     d2c:	f8 01       	movw	r30, r16
     d2e:	01 90       	ld	r0, Z+
     d30:	00 20       	and	r0, r0
     d32:	e9 f7       	brne	.-6      	; 0xd2e <_Z14getCredentials3FIL+0x8e>
     d34:	cf 01       	movw	r24, r30
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <strcpy>
	}

	if (f_open(&cFIL, "password.txt", FA_READ) == FR_OK);
	else fUSART.sendToUSART1("dsf");
	
	while (f_gets(line, sizeof(line), &cFIL)) {
     d42:	ae 01       	movw	r20, r28
     d44:	4f 5e       	subi	r20, 0xEF	; 239
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	6a e0       	ldi	r22, 0x0A	; 10
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	0e 94 0e 1c 	call	0x381c	; 0x381c <f_gets>
     d54:	89 2b       	or	r24, r25
     d56:	51 f7       	brne	.-44     	; 0xd2c <_Z14getCredentials3FIL+0x8c>
		sprintf(PASSWORD + strlen(PASSWORD), "%s", line);
	}

	return 0;

}
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2a 96       	adiw	r28, 0x0a	; 10
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <_Z9setupWIFIv>:


void setupWIFI(void)
{
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
	uint8_t toggle_wifi_power = 0;
     d7c:	c0 e0       	ldi	r28, 0x00	; 0

	while (fWIFI.setupWifi(&fUSART, USERNAME, PASSWORD) == 0)
     d7e:	2c c0       	rjmp	.+88     	; 0xdd8 <_Z9setupWIFIv+0x66>
	{

		fLOGGER.logALL(&fUSART, &fRTC, &fI2C, &fDHT, &fADC);
     d80:	0f 2e       	mov	r0, r31
     d82:	f1 e1       	ldi	r31, 0x11	; 17
     d84:	ef 2e       	mov	r14, r31
     d86:	fd e0       	ldi	r31, 0x0D	; 13
     d88:	ff 2e       	mov	r15, r31
     d8a:	f0 2d       	mov	r31, r0
     d8c:	06 e0       	ldi	r16, 0x06	; 6
     d8e:	1d e0       	ldi	r17, 0x0D	; 13
     d90:	2e e0       	ldi	r18, 0x0E	; 14
     d92:	3d e0       	ldi	r19, 0x0D	; 13
     d94:	4f e0       	ldi	r20, 0x0F	; 15
     d96:	5d e0       	ldi	r21, 0x0D	; 13
     d98:	60 e1       	ldi	r22, 0x10	; 16
     d9a:	7d e0       	ldi	r23, 0x0D	; 13
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	97 e0       	ldi	r25, 0x07	; 7
     da0:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN6LOGGER6logALLEP5USARTP3RTCP3I2CP3DHTP6ADCLIB>
		fLOGGER.send_to_SD(&fUSART, &fSDMacro, &file, filename);
     da4:	0e e8       	ldi	r16, 0x8E	; 142
     da6:	11 e0       	ldi	r17, 0x01	; 1
     da8:	20 ee       	ldi	r18, 0xE0	; 224
     daa:	36 e0       	ldi	r19, 0x06	; 6
     dac:	4c eb       	ldi	r20, 0xBC	; 188
     dae:	5a e0       	ldi	r21, 0x0A	; 10
     db0:	60 e1       	ldi	r22, 0x10	; 16
     db2:	7d e0       	ldi	r23, 0x0D	; 13
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	97 e0       	ldi	r25, 0x07	; 7
     db8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZN6LOGGER10send_to_SDEP5USARTP7SDMacroP3FILPc>

		toggle_wifi_power ++;
     dbc:	cf 5f       	subi	r28, 0xFF	; 255

		if (toggle_wifi_power >= 5) {
     dbe:	c5 30       	cpi	r28, 0x05	; 5
     dc0:	58 f0       	brcs	.+22     	; 0xdd8 <_Z9setupWIFIv+0x66>
			USART0_OFF;
     dc2:	1e 9a       	sbi	0x03, 6	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
     dc6:	84 e3       	ldi	r24, 0x34	; 52
     dc8:	9c e0       	ldi	r25, 0x0C	; 12
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	80 40       	sbci	r24, 0x00	; 0
     dce:	90 40       	sbci	r25, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <_Z9setupWIFIv+0x58>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <_Z9setupWIFIv+0x62>
     dd4:	00 00       	nop
			_delay_ms(500);
			USART0_ON;
     dd6:	1e 98       	cbi	0x03, 6	; 3

void setupWIFI(void)
{
	uint8_t toggle_wifi_power = 0;

	while (fWIFI.setupWifi(&fUSART, USERNAME, PASSWORD) == 0)
     dd8:	28 e1       	ldi	r18, 0x18	; 24
     dda:	36 e0       	ldi	r19, 0x06	; 6
     ddc:	4c e7       	ldi	r20, 0x7C	; 124
     dde:	56 e0       	ldi	r21, 0x06	; 6
     de0:	60 e1       	ldi	r22, 0x10	; 16
     de2:	7d e0       	ldi	r23, 0x0D	; 13
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	9d e0       	ldi	r25, 0x0D	; 13
     de8:	0e 94 48 23 	call	0x4690	; 0x4690 <_ZN4WIFI9setupWifiEP5USARTPcS2_>
     dec:	89 2b       	or	r24, r25
     dee:	41 f2       	breq	.-112    	; 0xd80 <_Z9setupWIFIv+0xe>
			_delay_ms(500);
			USART0_ON;
		}
	}
	
}
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <_Z6loggerv>:


void logger(void)
{
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
	//fUSART.sendToUSART1("start logging");
	fLOGGER.logALL(&fUSART, &fRTC, &fI2C, &fDHT, &fADC);
     e04:	0f 2e       	mov	r0, r31
     e06:	f1 e1       	ldi	r31, 0x11	; 17
     e08:	ef 2e       	mov	r14, r31
     e0a:	fd e0       	ldi	r31, 0x0D	; 13
     e0c:	ff 2e       	mov	r15, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	06 e0       	ldi	r16, 0x06	; 6
     e12:	1d e0       	ldi	r17, 0x0D	; 13
     e14:	2e e0       	ldi	r18, 0x0E	; 14
     e16:	3d e0       	ldi	r19, 0x0D	; 13
     e18:	4f e0       	ldi	r20, 0x0F	; 15
     e1a:	5d e0       	ldi	r21, 0x0D	; 13
     e1c:	60 e1       	ldi	r22, 0x10	; 16
     e1e:	7d e0       	ldi	r23, 0x0D	; 13
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	97 e0       	ldi	r25, 0x07	; 7
     e24:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN6LOGGER6logALLEP5USARTP3RTCP3I2CP3DHTP6ADCLIB>

	// check that the post was sent properly
	if (fLOGGER.send_to_WIFI(&fWIFI, &fUSART, HEADER, HEADER_len) == 0) setupWIFI();
     e28:	00 91 16 06 	lds	r16, 0x0616
     e2c:	10 91 17 06 	lds	r17, 0x0617
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	31 e0       	ldi	r19, 0x01	; 1
     e34:	40 e1       	ldi	r20, 0x10	; 16
     e36:	5d e0       	ldi	r21, 0x0D	; 13
     e38:	64 e0       	ldi	r22, 0x04	; 4
     e3a:	7d e0       	ldi	r23, 0x0D	; 13
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN6LOGGER12send_to_WIFIEP4WIFIP5USARTPci>
     e44:	89 2b       	or	r24, r25
     e46:	11 f4       	brne	.+4      	; 0xe4c <_Z6loggerv+0x50>
     e48:	0e 94 b9 06 	call	0xd72	; 0xd72 <_Z9setupWIFIv>

	//fLOGGER.send_to_USART(&fUSART);
	fLOGGER.send_to_SD(&fUSART, &fSDMacro, &file, filename);
     e4c:	0e e8       	ldi	r16, 0x8E	; 142
     e4e:	11 e0       	ldi	r17, 0x01	; 1
     e50:	20 ee       	ldi	r18, 0xE0	; 224
     e52:	36 e0       	ldi	r19, 0x06	; 6
     e54:	4c eb       	ldi	r20, 0xBC	; 188
     e56:	5a e0       	ldi	r21, 0x0A	; 10
     e58:	60 e1       	ldi	r22, 0x10	; 16
     e5a:	7d e0       	ldi	r23, 0x0D	; 13
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	97 e0       	ldi	r25, 0x07	; 7
     e60:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZN6LOGGER10send_to_SDEP5USARTP7SDMacroP3FILPc>

}
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	08 95       	ret

00000e6e <_Z5setupv>:

//void setup

void setup(void)
{
	pin_setup();
     e6e:	0e 94 83 08 	call	0x1106	; 0x1106 <_Z9pin_setupv>

	//start the uart
	fUSART.Initialize1(MYUBRR1);
     e72:	6c e0       	ldi	r22, 0x0C	; 12
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e1       	ldi	r24, 0x10	; 16
     e78:	9d e0       	ldi	r25, 0x0D	; 13
     e7a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_ZN5USART11Initialize1Ej>
	fUSART.Initialize0(MYUBRR0);
     e7e:	6c e0       	ldi	r22, 0x0C	; 12
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e1       	ldi	r24, 0x10	; 16
     e84:	9d e0       	ldi	r25, 0x0D	; 13
     e86:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <_ZN5USART11Initialize0Ej>
	
	fUSART.sendToUSART1("setup");
     e8a:	60 e1       	ldi	r22, 0x10	; 16
     e8c:	72 e0       	ldi	r23, 0x02	; 2
     e8e:	80 e1       	ldi	r24, 0x10	; 16
     e90:	9d e0       	ldi	r25, 0x0D	; 13
     e92:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	//start the adc
	fADC.Initialize();
     e96:	81 e1       	ldi	r24, 0x11	; 17
     e98:	9d e0       	ldi	r25, 0x0D	; 13
     e9a:	0e 94 73 00 	call	0xe6	; 0xe6 <_ZN6ADCLIB10InitializeEv>
	
	//start the RTC
	fI2C.Initialize();
     e9e:	8e e0       	ldi	r24, 0x0E	; 14
     ea0:	9d e0       	ldi	r25, 0x0D	; 13
     ea2:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN3I2C10InitializeEv>
	
	//setup the potentiometers
	setupPotentiometer();
     ea6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z18setupPotentiometerv>
     eaa:	2f ef       	ldi	r18, 0xFF	; 255
     eac:	81 ee       	ldi	r24, 0xE1	; 225
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	21 50       	subi	r18, 0x01	; 1
     eb2:	80 40       	sbci	r24, 0x00	; 0
     eb4:	90 40       	sbci	r25, 0x00	; 0
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <_Z5setupv+0x42>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <_Z5setupv+0x4c>
     eba:	00 00       	nop

	_delay_ms(200);
	//PORTE &= ~0b00001111;
	
	// check if these files are already created or not
	fSDMacro.CheckFile(file, filename);
     ebc:	8e e8       	ldi	r24, 0x8E	; 142
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	8d b7       	in	r24, 0x3d	; 61
     ec6:	9e b7       	in	r25, 0x3e	; 62
     ec8:	80 97       	sbiw	r24, 0x20	; 32
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	9e bf       	out	0x3e, r25	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	8d bf       	out	0x3d, r24	; 61
     ed4:	ad b7       	in	r26, 0x3d	; 61
     ed6:	be b7       	in	r27, 0x3e	; 62
     ed8:	11 96       	adiw	r26, 0x01	; 1
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	e0 ee       	ldi	r30, 0xE0	; 224
     ede:	f6 e0       	ldi	r31, 0x06	; 6
     ee0:	01 90       	ld	r0, Z+
     ee2:	0d 92       	st	X+, r0
     ee4:	8a 95       	dec	r24
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <_Z5setupv+0x72>
     ee8:	8c eb       	ldi	r24, 0xBC	; 188
     eea:	9a e0       	ldi	r25, 0x0A	; 10
     eec:	0e 94 9e 20 	call	0x413c	; 0x413c <_ZN7SDMacro9CheckFileE3FILPc>
	
	//get wifi network name and password
	getCredentials(file);
     ef0:	8d b7       	in	r24, 0x3d	; 61
     ef2:	9e b7       	in	r25, 0x3e	; 62
     ef4:	82 96       	adiw	r24, 0x22	; 34
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	9e bf       	out	0x3e, r25	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	8d bf       	out	0x3d, r24	; 61
     f00:	80 97       	sbiw	r24, 0x20	; 32
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	9e bf       	out	0x3e, r25	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	8d bf       	out	0x3d, r24	; 61
     f0c:	ad b7       	in	r26, 0x3d	; 61
     f0e:	be b7       	in	r27, 0x3e	; 62
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	e0 ee       	ldi	r30, 0xE0	; 224
     f16:	f6 e0       	ldi	r31, 0x06	; 6
     f18:	01 90       	ld	r0, Z+
     f1a:	0d 92       	st	X+, r0
     f1c:	8a 95       	dec	r24
     f1e:	e1 f7       	brne	.-8      	; 0xf18 <_Z5setupv+0xaa>
     f20:	0e 94 50 06 	call	0xca0	; 0xca0 <_Z14getCredentials3FIL>
	fUSART.sendToUSART1(USERNAME);
     f24:	8d b7       	in	r24, 0x3d	; 61
     f26:	9e b7       	in	r25, 0x3e	; 62
     f28:	80 96       	adiw	r24, 0x20	; 32
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	9e bf       	out	0x3e, r25	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	8d bf       	out	0x3d, r24	; 61
     f34:	6c e7       	ldi	r22, 0x7C	; 124
     f36:	76 e0       	ldi	r23, 0x06	; 6
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	9d e0       	ldi	r25, 0x0D	; 13
     f3c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART.sendToUSART1(PASSWORD);
     f40:	68 e1       	ldi	r22, 0x18	; 24
     f42:	76 e0       	ldi	r23, 0x06	; 6
     f44:	80 e1       	ldi	r24, 0x10	; 16
     f46:	9d e0       	ldi	r25, 0x0D	; 13
     f48:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>

	sei();
     f4c:	78 94       	sei

	//WIFI setup
	setupWIFI();
     f4e:	0e 94 b9 06 	call	0xd72	; 0xd72 <_Z9setupWIFIv>
	
	// init timer2 instead
	//fTIMER.TIMER1_init();
	fTIMER2.initialize();
     f52:	8c e0       	ldi	r24, 0x0C	; 12
     f54:	9d e0       	ldi	r25, 0x0D	; 13
     f56:	0e 94 a6 21 	call	0x434c	; 0x434c <_ZN6TIMER210initializeEv>
     f5a:	08 95       	ret

00000f5c <__vector_default>:
}


// catch all unhandled ISRs which could be causing the program to reset
ISR(BADISR_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	8f 93       	push	r24
	//if (BAD_VECT_COUNT > BAD_VECT_TIMEOUT) main();
	UDR1 = '!';
     f68:	81 e2       	ldi	r24, 0x21	; 33
     f6a:	80 93 9c 00 	sts	0x009C, r24
	//setup();
	//for(;;) UDR1 = '!';
}
     f6e:	8f 91       	pop	r24
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <main>:
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	39 e6       	ldi	r19, 0x69	; 105
     f7e:	48 e1       	ldi	r20, 0x18	; 24
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	30 40       	sbci	r19, 0x00	; 0
     f84:	40 40       	sbci	r20, 0x00	; 0
     f86:	e1 f7       	brne	.-8      	; 0xf80 <main+0x6>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <main+0x10>
     f8a:	00 00       	nop
int main(void)
{
	
	_delay_ms(1000);

	setup();
     f8c:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z5setupv>
	
	unsigned long sny_lowocc_us = 0; // sum of time spent LOW
	unsigned long last_sen_read = fTIMER2.millis();
     f90:	8c e0       	ldi	r24, 0x0C	; 12
     f92:	9d e0       	ldi	r25, 0x0D	; 13
     f94:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
     f98:	4b 01       	movw	r8, r22
     f9a:	5c 01       	movw	r10, r24
	unsigned long last_sny_read = fTIMER2.millis();
     f9c:	8c e0       	ldi	r24, 0x0C	; 12
     f9e:	9d e0       	ldi	r25, 0x0D	; 13
     fa0:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
     fa4:	6b 01       	movw	r12, r22
     fa6:	7c 01       	movw	r14, r24
	
    while(1)
    {
		
		if ((fTIMER2.millis() - last_sen_read) > SEN_INT){
     fa8:	8c e0       	ldi	r24, 0x0C	; 12
     faa:	9d e0       	ldi	r25, 0x0D	; 13
     fac:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	88 19       	sub	r24, r8
     fb6:	99 09       	sbc	r25, r9
     fb8:	aa 09       	sbc	r26, r10
     fba:	bb 09       	sbc	r27, r11
     fbc:	89 3e       	cpi	r24, 0xE9	; 233
     fbe:	93 40       	sbci	r25, 0x03	; 3
     fc0:	a1 05       	cpc	r26, r1
     fc2:	b1 05       	cpc	r27, r1
     fc4:	10 f0       	brcs	.+4      	; 0xfca <main+0x50>
			logger();
     fc6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_Z6loggerv>
			
		}
		
		if ((fTIMER2.millis() - last_sny_read) > SNY_INT) {
     fca:	8c e0       	ldi	r24, 0x0C	; 12
     fcc:	9d e0       	ldi	r25, 0x0D	; 13
     fce:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8c 19       	sub	r24, r12
     fd8:	9d 09       	sbc	r25, r13
     fda:	ae 09       	sbc	r26, r14
     fdc:	bf 09       	sbc	r27, r15
     fde:	81 33       	cpi	r24, 0x31	; 49
     fe0:	95 47       	sbci	r25, 0x75	; 117
     fe2:	a1 05       	cpc	r26, r1
     fe4:	b1 05       	cpc	r27, r1
     fe6:	00 f1       	brcs	.+64     	; 0x1028 <main+0xae>
			sny_lowocc_us = fTIMER2.get_sample();
     fe8:	8c e0       	ldi	r24, 0x0C	; 12
     fea:	9d e0       	ldi	r25, 0x0D	; 13
     fec:	0e 94 95 21 	call	0x432a	; 0x432a <_ZN6TIMER210get_sampleEv>
     ff0:	2b 01       	movw	r4, r22
     ff2:	3c 01       	movw	r6, r24
			fLOGGER.logSINYEI(&fUSART, sny_lowocc_us, fTIMER2.millis() - last_sny_read);
     ff4:	8c e0       	ldi	r24, 0x0C	; 12
     ff6:	9d e0       	ldi	r25, 0x0D	; 13
     ff8:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	2c 19       	sub	r18, r12
    1002:	3d 09       	sbc	r19, r13
    1004:	4e 09       	sbc	r20, r14
    1006:	5f 09       	sbc	r21, r15
    1008:	79 01       	movw	r14, r18
    100a:	8a 01       	movw	r16, r20
    100c:	a3 01       	movw	r20, r6
    100e:	92 01       	movw	r18, r4
    1010:	60 e1       	ldi	r22, 0x10	; 16
    1012:	7d e0       	ldi	r23, 0x0D	; 13
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN6LOGGER9logSINYEIEP5USARTmm>
			last_sny_read = fTIMER2.millis();
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	9d e0       	ldi	r25, 0x0D	; 13
    1020:	0e 94 b9 21 	call	0x4372	; 0x4372 <_ZN6TIMER26millisEv>
    1024:	6b 01       	movw	r12, r22
    1026:	7c 01       	movw	r14, r24
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	40 e7       	ldi	r20, 0x70	; 112
    102c:	52 e0       	ldi	r21, 0x02	; 2
    102e:	31 50       	subi	r19, 0x01	; 1
    1030:	40 40       	sbci	r20, 0x00	; 0
    1032:	50 40       	sbci	r21, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <main+0xb4>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <main+0xbe>
    1038:	00 00       	nop
    103a:	b6 cf       	rjmp	.-148    	; 0xfa8 <main+0x2e>

0000103c <_GLOBAL__sub_I_fADC>:
#include "PIC/PIC.h"
#include "TIMER/TIMER2.h"
#include "LOGGER/LOGGER.h"

// set up pointers for libraries
ADCLIB fADC;
    103c:	81 e1       	ldi	r24, 0x11	; 17
    103e:	9d e0       	ldi	r25, 0x0D	; 13
    1040:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6ADCLIBC1Ev>
USART fUSART;
    1044:	80 e1       	ldi	r24, 0x10	; 16
    1046:	9d e0       	ldi	r25, 0x0D	; 13
    1048:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <_ZN5USARTC1Ev>
RTC fRTC;
    104c:	8f e0       	ldi	r24, 0x0F	; 15
    104e:	9d e0       	ldi	r25, 0x0D	; 13
    1050:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN3RTCC1Ev>
I2C fI2C;
    1054:	8e e0       	ldi	r24, 0x0E	; 14
    1056:	9d e0       	ldi	r25, 0x0D	; 13
    1058:	0e 94 24 02 	call	0x448	; 0x448 <_ZN3I2CC1Ev>
TIMER fTIMER;
    105c:	8d e0       	ldi	r24, 0x0D	; 13
    105e:	9d e0       	ldi	r25, 0x0D	; 13
    1060:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <_ZN5TIMERC1Ev>
TIMER2 fTIMER2;
    1064:	8c e0       	ldi	r24, 0x0C	; 12
    1066:	9d e0       	ldi	r25, 0x0D	; 13
    1068:	0e 94 94 21 	call	0x4328	; 0x4328 <_ZN6TIMER2C1Ev>
DHT fDHT;
    106c:	86 e0       	ldi	r24, 0x06	; 6
    106e:	9d e0       	ldi	r25, 0x0D	; 13
    1070:	0e 94 18 01 	call	0x230	; 0x230 <_ZN3DHTC1Ev>
PIC fPIC;
    1074:	85 e0       	ldi	r24, 0x05	; 5
    1076:	9d e0       	ldi	r25, 0x0D	; 13
    1078:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN3PICC1Ev>
//GPRS fGPRS;
WIFI fWIFI;
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	9d e0       	ldi	r25, 0x0D	; 13
    1080:	0e 94 5d 22 	call	0x44ba	; 0x44ba <_ZN4WIFIC1Ev>
SDMacro fSDMacro;
    1084:	8c eb       	ldi	r24, 0xBC	; 188
    1086:	9a e0       	ldi	r25, 0x0A	; 10
    1088:	0e 94 9c 20 	call	0x4138	; 0x4138 <_ZN7SDMacroC1Ev>
LOGGER fLOGGER;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	97 e0       	ldi	r25, 0x07	; 7
    1090:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN6LOGGERC1Ev>
bool tempfile_select = false;

int tempfile_select2;

char HEADER[] = "col1,col2,col3,col4,col24,col25,col6,col8,col27,col26,col11,col12,col28,col14,col33,col7,col18,col19,col29,col30,col16,col17,col5,col20,col21";
int HEADER_len = strlen(HEADER);
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	01 90       	ld	r0, Z+
    109a:	00 20       	and	r0, r0
    109c:	e9 f7       	brne	.-6      	; 0x1098 <_GLOBAL__sub_I_fADC+0x5c>
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	e0 50       	subi	r30, 0x00	; 0
    10a2:	f1 40       	sbci	r31, 0x01	; 1
    10a4:	f0 93 17 06 	sts	0x0617, r31
    10a8:	e0 93 16 06 	sts	0x0616, r30
    10ac:	08 95       	ret

000010ae <_GLOBAL__sub_D_fADC>:
DHT fDHT;
PIC fPIC;
//GPRS fGPRS;
WIFI fWIFI;
SDMacro fSDMacro;
LOGGER fLOGGER;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	97 e0       	ldi	r25, 0x07	; 7
    10b2:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN6LOGGERD1Ev>
TIMER2 fTIMER2;
DHT fDHT;
PIC fPIC;
//GPRS fGPRS;
WIFI fWIFI;
SDMacro fSDMacro;
    10b6:	8c eb       	ldi	r24, 0xBC	; 188
    10b8:	9a e0       	ldi	r25, 0x0A	; 10
    10ba:	0e 94 9d 20 	call	0x413a	; 0x413a <_ZN7SDMacroD1Ev>
    10be:	08 95       	ret

000010c0 <_ZN3PICC1Ev>:
#define WD 0b00000000

//#define volt 0b00000111

// default constructor
PIC::PIC()
    10c0:	08 95       	ret

000010c2 <_ZN3PIC3SetEP3I2Chhh>:
{
} //PIC


int PIC::Set(I2C* fI2C, uint8_t address, uint8_t instruction, uint8_t voltage)
{
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	eb 01       	movw	r28, r22
    10ce:	f4 2e       	mov	r15, r20
    10d0:	12 2f       	mov	r17, r18
	
	fI2C->Start();
    10d2:	cb 01       	movw	r24, r22
    10d4:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN3I2C5StartEv>
	fI2C->SLAT(address+WRITE);
    10d8:	6f 2d       	mov	r22, r15
    10da:	ce 01       	movw	r24, r28
    10dc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN3I2C4SLATEh>
	fI2C->Write(instruction);
    10e0:	61 2f       	mov	r22, r17
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN3I2C5WriteEh>
	fI2C->Write(voltage);
    10e8:	60 2f       	mov	r22, r16
    10ea:	ce 01       	movw	r24, r28
    10ec:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN3I2C5WriteEh>
	fI2C->Stop();
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3I2C4StopEv>
	return 0;
	
}
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	08 95       	ret

00001106 <_Z9pin_setupv>:
{
	// Pin Setup
	// Set Ports as Output
	
	//DDRA = (1 << C_2610) | (1 << C_880) | (1 << C_706) | (1 << SS0) | (1 << SS1) | (1 << SS2) | (1 << SS3);
	DDRA = (1 << MUX0_S3) | (1 << MUX0_S2) | (1 << MUX0_S1) | (1 << MUX0_S0) | (1 << GP2Y1010_2_CTRL) | (1 << GP2Y1010_1_CTRL);
    1106:	8e e7       	ldi	r24, 0x7E	; 126
    1108:	8a bb       	out	0x1a, r24	; 26
	// Set Initial Value. 0 to Control pin means turning sensor on.
	//PORTA = (1 << C_2610) | (0 << C_880) | (1 << C_706) | (0 << SS0) | (0 << SS1) | (0 << SS2) | (0 << SS3);
	PORTA = (0 << MUX0_S3) | (0 << MUX0_S2) | (0 << MUX0_S1) | (0 << MUX0_S0) | (0 << GP2Y1010_2_CTRL) | (0 << GP2Y1010_1_CTRL);
    110a:	1b ba       	out	0x1b, r1	; 27
	
	// port b is used for the SD card
	DDRB = (1 << SPI_CS_N) | (1 << SPI_CLK) | (1 << SPI_MOSI) | (0 << SPI_MISO) | (0 << SD_DETECT_3V3);
    110c:	87 e0       	ldi	r24, 0x07	; 7
    110e:	87 bb       	out	0x17, r24	; 23
	PORTB = (1 << SPI_CS_N) | (1 << SPI_CLK);
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << SPI_MOSI);
    1114:	c2 98       	cbi	0x18, 2	; 24

	DDRC = 0;
    1116:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
    1118:	15 ba       	out	0x15, r1	; 21

	//DDRD = (1 << SCL) | (1 << SDA) | (1 << C_FAN) | (1 << SHP_D) | (0 << PPD) | (0 << DHT_PIN) | (1 << C_MQ3) | (1 << C_24);
	DDRD = (1 << I2C_SCL) | (1 << I2C_SDA) | (1 << USART1_PWR_EN);
    111a:	83 e8       	ldi	r24, 0x83	; 131
    111c:	81 bb       	out	0x11, r24	; 17
	PORTD = (1 << I2C_SCL) | (1 << I2C_SDA) | (1 << USART1_PWR_EN);
    111e:	82 bb       	out	0x12, r24	; 18

	DDRE = (0 << PPD42_SNS) | (0 << DHT22_1_SNS) | (0 << DHT22_2_SNS) | (1 << USART0_PWR_EN);
    1120:	80 e4       	ldi	r24, 0x40	; 64
    1122:	82 b9       	out	0x02, r24	; 2
	PORTE = (1 << DHT22_1_SNS) | (1 << DHT22_2_SNS) | (0 << USART0_PWR_EN);
    1124:	80 e3       	ldi	r24, 0x30	; 48
    1126:	83 b9       	out	0x03, r24	; 3
	//PORTE = (0 << PRG4) | (0 << PRG3) | (0 << PRG2) | (0 << PRG1);
	
	DDRF = (0 << GP2Y010_1_SNS) | (0 << GP2Y010_2_SNS) | (0 << TGS2600_SNS) | (0 << MUX0_OUT);
    1128:	10 92 61 00 	sts	0x0061, r1
    112c:	08 95       	ret

0000112e <_ZN3RTCC1Ev>:
#include <util/twi.h>
#include "RTC.h"


// default constructor
RTC::RTC()
    112e:	08 95       	ret

00001130 <_ZN3RTC4ReadEP3I2Ch>:
	TWBR = TWBR_val;
	return 0;
}

uint8_t RTC::Read(I2C* fI2C, uint8_t address)
{
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	eb 01       	movw	r28, r22
    1138:	14 2f       	mov	r17, r20

	fI2C->Start(); // first i start the I2C
    113a:	cb 01       	movw	r24, r22
    113c:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN3I2C5StartEv>
	fI2C->SLAT(SLA+WRITE); // then I input the address plus the write bit
    1140:	6e ed       	ldi	r22, 0xDE	; 222
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN3I2C4SLATEh>
	fI2C->Write(address); // then i put the address that i want to read
    1148:	61 2f       	mov	r22, r17
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN3I2C5WriteEh>
	fI2C->RStart(); // then i do a repeat start
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN3I2C6RStartEv>
	fI2C->SLAR(SLA+READ); // then i input the address plus the read bit
    1156:	6f ed       	ldi	r22, 0xDF	; 223
    1158:	ce 01       	movw	r24, r28
    115a:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN3I2C4SLAREh>
	uint8_t data = fI2C->Read_NAck(); // then i actually read the data from that address
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 90 02 	call	0x520	; 0x520 <_ZN3I2C9Read_NAckEv>
    1164:	18 2f       	mov	r17, r24
	fI2C->Stop(); // then i stop the service
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3I2C4StopEv>
	return data; // then I return the data
}
    116c:	81 2f       	mov	r24, r17
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	08 95       	ret

00001176 <mem_cpy>:
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	42 30       	cpi	r20, 0x02	; 2
    117c:	51 05       	cpc	r21, r1
    117e:	c0 f0       	brcs	.+48     	; 0x11b0 <mem_cpy+0x3a>
    1180:	db 01       	movw	r26, r22
    1182:	fc 01       	movw	r30, r24
    1184:	9a 01       	movw	r18, r20
    1186:	cd 91       	ld	r28, X+
    1188:	dd 91       	ld	r29, X+
    118a:	c1 93       	st	Z+, r28
    118c:	d1 93       	st	Z+, r29
    118e:	22 50       	subi	r18, 0x02	; 2
    1190:	31 09       	sbc	r19, r1
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	b8 f7       	brcc	.-18     	; 0x1186 <mem_cpy+0x10>
    1198:	9a 01       	movw	r18, r20
    119a:	22 50       	subi	r18, 0x02	; 2
    119c:	31 09       	sbc	r19, r1
    119e:	2e 7f       	andi	r18, 0xFE	; 254
    11a0:	2e 5f       	subi	r18, 0xFE	; 254
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	62 0f       	add	r22, r18
    11aa:	73 1f       	adc	r23, r19
    11ac:	41 70       	andi	r20, 0x01	; 1
    11ae:	55 27       	eor	r21, r21
    11b0:	41 15       	cp	r20, r1
    11b2:	51 05       	cpc	r21, r1
    11b4:	49 f0       	breq	.+18     	; 0x11c8 <mem_cpy+0x52>
    11b6:	db 01       	movw	r26, r22
    11b8:	fc 01       	movw	r30, r24
    11ba:	48 0f       	add	r20, r24
    11bc:	59 1f       	adc	r21, r25
    11be:	9d 91       	ld	r25, X+
    11c0:	91 93       	st	Z+, r25
    11c2:	e4 17       	cp	r30, r20
    11c4:	f5 07       	cpc	r31, r21
    11c6:	d9 f7       	brne	.-10     	; 0x11be <mem_cpy+0x48>
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <mem_set>:
    11ce:	41 15       	cp	r20, r1
    11d0:	51 05       	cpc	r21, r1
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <mem_set+0x14>
    11d4:	fc 01       	movw	r30, r24
    11d6:	84 0f       	add	r24, r20
    11d8:	95 1f       	adc	r25, r21
    11da:	61 93       	st	Z+, r22
    11dc:	e8 17       	cp	r30, r24
    11de:	f9 07       	cpc	r31, r25
    11e0:	e1 f7       	brne	.-8      	; 0x11da <mem_set+0xc>
    11e2:	08 95       	ret

000011e4 <ld_clust>:
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	dc 01       	movw	r26, r24
    11ea:	fb 01       	movw	r30, r22
    11ec:	62 8d       	ldd	r22, Z+26	; 0x1a
    11ee:	73 8d       	ldd	r23, Z+27	; 0x1b
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	2c 91       	ld	r18, X
    11f6:	23 30       	cpi	r18, 0x03	; 3
    11f8:	59 f4       	brne	.+22     	; 0x1210 <ld_clust+0x2c>
    11fa:	04 89       	ldd	r16, Z+20	; 0x14
    11fc:	15 89       	ldd	r17, Z+21	; 0x15
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	98 01       	movw	r18, r16
    1204:	11 27       	eor	r17, r17
    1206:	00 27       	eor	r16, r16
    1208:	60 2b       	or	r22, r16
    120a:	71 2b       	or	r23, r17
    120c:	82 2b       	or	r24, r18
    120e:	93 2b       	or	r25, r19
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <get_ldnumber>:
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	a8 81       	ld	r26, Y
    121e:	b9 81       	ldd	r27, Y+1	; 0x01
    1220:	10 97       	sbiw	r26, 0x00	; 0
    1222:	31 f1       	breq	.+76     	; 0x1270 <get_ldnumber+0x5a>
    1224:	4c 91       	ld	r20, X
    1226:	41 32       	cpi	r20, 0x21	; 33
    1228:	58 f0       	brcs	.+22     	; 0x1240 <get_ldnumber+0x2a>
    122a:	4a 33       	cpi	r20, 0x3A	; 58
    122c:	51 f1       	breq	.+84     	; 0x1282 <get_ldnumber+0x6c>
    122e:	fd 01       	movw	r30, r26
    1230:	31 96       	adiw	r30, 0x01	; 1
    1232:	9f 01       	movw	r18, r30
    1234:	91 91       	ld	r25, Z+
    1236:	91 32       	cpi	r25, 0x21	; 33
    1238:	28 f0       	brcs	.+10     	; 0x1244 <get_ldnumber+0x2e>
    123a:	9a 33       	cpi	r25, 0x3A	; 58
    123c:	d1 f7       	brne	.-12     	; 0x1232 <get_ldnumber+0x1c>
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <get_ldnumber+0x32>
    1240:	94 2f       	mov	r25, r20
    1242:	9d 01       	movw	r18, r26
    1244:	9a 33       	cpi	r25, 0x3A	; 58
    1246:	81 f4       	brne	.+32     	; 0x1268 <get_ldnumber+0x52>
    1248:	cd 01       	movw	r24, r26
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	28 17       	cp	r18, r24
    124e:	39 07       	cpc	r19, r25
    1250:	91 f4       	brne	.+36     	; 0x1276 <get_ldnumber+0x60>
    1252:	24 2f       	mov	r18, r20
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	c9 01       	movw	r24, r18
    1258:	c0 97       	sbiw	r24, 0x30	; 48
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	91 05       	cpc	r25, r1
    125e:	70 f4       	brcc	.+28     	; 0x127c <get_ldnumber+0x66>
    1260:	12 96       	adiw	r26, 0x02	; 2
    1262:	b9 83       	std	Y+1, r27	; 0x01
    1264:	a8 83       	st	Y, r26
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <get_ldnumber+0x70>
    1268:	80 91 12 0d 	lds	r24, 0x0D12
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0b c0       	rjmp	.+22     	; 0x1286 <get_ldnumber+0x70>
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f ef       	ldi	r25, 0xFF	; 255
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <get_ldnumber+0x70>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <get_ldnumber+0x70>
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	9f ef       	ldi	r25, 0xFF	; 255
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <get_ldnumber+0x70>
    1282:	9d 01       	movw	r18, r26
    1284:	e1 cf       	rjmp	.-62     	; 0x1248 <get_ldnumber+0x32>
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <sync_window>:
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	fc 01       	movw	r30, r24
    12a6:	24 81       	ldd	r18, Z+4	; 0x04
    12a8:	22 23       	and	r18, r18
    12aa:	09 f4       	brne	.+2      	; 0x12ae <sync_window+0x22>
    12ac:	46 c0       	rjmp	.+140    	; 0x133a <sync_window+0xae>
    12ae:	ec 01       	movw	r28, r24
    12b0:	c6 a4       	ldd	r12, Z+46	; 0x2e
    12b2:	d7 a4       	ldd	r13, Z+47	; 0x2f
    12b4:	e0 a8       	ldd	r14, Z+48	; 0x30
    12b6:	f1 a8       	ldd	r15, Z+49	; 0x31
    12b8:	5c 01       	movw	r10, r24
    12ba:	f2 e3       	ldi	r31, 0x32	; 50
    12bc:	af 0e       	add	r10, r31
    12be:	b1 1c       	adc	r11, r1
    12c0:	01 e0       	ldi	r16, 0x01	; 1
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	a7 01       	movw	r20, r14
    12c6:	96 01       	movw	r18, r12
    12c8:	b5 01       	movw	r22, r10
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <disk_write>
    12d0:	81 11       	cpse	r24, r1
    12d2:	35 c0       	rjmp	.+106    	; 0x133e <sync_window+0xb2>
    12d4:	1c 82       	std	Y+4, r1	; 0x04
    12d6:	8a a1       	ldd	r24, Y+34	; 0x22
    12d8:	9b a1       	ldd	r25, Y+35	; 0x23
    12da:	ac a1       	ldd	r26, Y+36	; 0x24
    12dc:	bd a1       	ldd	r27, Y+37	; 0x25
    12de:	b7 01       	movw	r22, r14
    12e0:	a6 01       	movw	r20, r12
    12e2:	48 1b       	sub	r20, r24
    12e4:	59 0b       	sbc	r21, r25
    12e6:	6a 0b       	sbc	r22, r26
    12e8:	7b 0b       	sbc	r23, r27
    12ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12ee:	ac 8d       	ldd	r26, Y+28	; 0x1c
    12f0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    12f2:	48 17       	cp	r20, r24
    12f4:	59 07       	cpc	r21, r25
    12f6:	6a 07       	cpc	r22, r26
    12f8:	7b 07       	cpc	r23, r27
    12fa:	18 f5       	brcc	.+70     	; 0x1342 <sync_window+0xb6>
    12fc:	8b 80       	ldd	r8, Y+3	; 0x03
    12fe:	91 2c       	mov	r9, r1
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	88 16       	cp	r8, r24
    1304:	91 04       	cpc	r9, r1
    1306:	f8 f0       	brcs	.+62     	; 0x1346 <sync_window+0xba>
    1308:	8a 8d       	ldd	r24, Y+26	; 0x1a
    130a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    130c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    130e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1310:	c8 0e       	add	r12, r24
    1312:	d9 1e       	adc	r13, r25
    1314:	ea 1e       	adc	r14, r26
    1316:	fb 1e       	adc	r15, r27
    1318:	01 e0       	ldi	r16, 0x01	; 1
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	b5 01       	movw	r22, r10
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <disk_write>
    1328:	e1 e0       	ldi	r30, 0x01	; 1
    132a:	8e 1a       	sub	r8, r30
    132c:	91 08       	sbc	r9, r1
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	8f 16       	cp	r8, r31
    1332:	91 04       	cpc	r9, r1
    1334:	49 f7       	brne	.-46     	; 0x1308 <sync_window+0x7c>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <sync_window+0xbc>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <sync_window+0xbc>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <sync_window+0xbc>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <sync_window+0xbc>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	08 95       	ret

00001362 <move_window>:
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
    1376:	4a 01       	movw	r8, r20
    1378:	5b 01       	movw	r10, r22
    137a:	8e a5       	ldd	r24, Y+46	; 0x2e
    137c:	9f a5       	ldd	r25, Y+47	; 0x2f
    137e:	a8 a9       	ldd	r26, Y+48	; 0x30
    1380:	b9 a9       	ldd	r27, Y+49	; 0x31
    1382:	84 17       	cp	r24, r20
    1384:	95 07       	cpc	r25, r21
    1386:	a6 07       	cpc	r26, r22
    1388:	b7 07       	cpc	r27, r23
    138a:	e9 f0       	breq	.+58     	; 0x13c6 <move_window+0x64>
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    1392:	f8 2e       	mov	r15, r24
    1394:	81 11       	cpse	r24, r1
    1396:	18 c0       	rjmp	.+48     	; 0x13c8 <move_window+0x66>
    1398:	01 e0       	ldi	r16, 0x01	; 1
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	a5 01       	movw	r20, r10
    139e:	94 01       	movw	r18, r8
    13a0:	be 01       	movw	r22, r28
    13a2:	6e 5c       	subi	r22, 0xCE	; 206
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <disk_read>
    13ac:	88 23       	and	r24, r24
    13ae:	31 f0       	breq	.+12     	; 0x13bc <move_window+0x5a>
    13b0:	ff 24       	eor	r15, r15
    13b2:	f3 94       	inc	r15
    13b4:	88 24       	eor	r8, r8
    13b6:	8a 94       	dec	r8
    13b8:	98 2c       	mov	r9, r8
    13ba:	54 01       	movw	r10, r8
    13bc:	8e a6       	std	Y+46, r8	; 0x2e
    13be:	9f a6       	std	Y+47, r9	; 0x2f
    13c0:	a8 aa       	std	Y+48, r10	; 0x30
    13c2:	b9 aa       	std	Y+49, r11	; 0x31
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <move_window+0x66>
    13c6:	f1 2c       	mov	r15, r1
    13c8:	8f 2d       	mov	r24, r15
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	bf 90       	pop	r11
    13d6:	af 90       	pop	r10
    13d8:	9f 90       	pop	r9
    13da:	8f 90       	pop	r8
    13dc:	08 95       	ret

000013de <check_fs>:
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
    13e4:	1c 82       	std	Y+4, r1	; 0x04
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f ef       	ldi	r25, 0xFF	; 255
    13ea:	dc 01       	movw	r26, r24
    13ec:	8e a7       	std	Y+46, r24	; 0x2e
    13ee:	9f a7       	std	Y+47, r25	; 0x2f
    13f0:	a8 ab       	std	Y+48, r26	; 0x30
    13f2:	b9 ab       	std	Y+49, r27	; 0x31
    13f4:	ce 01       	movw	r24, r28
    13f6:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    13fa:	81 11       	cpse	r24, r1
    13fc:	23 c0       	rjmp	.+70     	; 0x1444 <check_fs+0x66>
    13fe:	fe 01       	movw	r30, r28
    1400:	e0 5d       	subi	r30, 0xD0	; 208
    1402:	fd 4f       	sbci	r31, 0xFD	; 253
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	85 35       	cpi	r24, 0x55	; 85
    140a:	9a 4a       	sbci	r25, 0xAA	; 170
    140c:	e9 f4       	brne	.+58     	; 0x1448 <check_fs+0x6a>
    140e:	e8 5c       	subi	r30, 0xC8	; 200
    1410:	f1 40       	sbci	r31, 0x01	; 1
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	a2 81       	ldd	r26, Z+2	; 0x02
    1418:	b3 81       	ldd	r27, Z+3	; 0x03
    141a:	bb 27       	eor	r27, r27
    141c:	86 34       	cpi	r24, 0x46	; 70
    141e:	91 44       	sbci	r25, 0x41	; 65
    1420:	a4 45       	sbci	r26, 0x54	; 84
    1422:	b1 05       	cpc	r27, r1
    1424:	99 f0       	breq	.+38     	; 0x144c <check_fs+0x6e>
    1426:	cc 57       	subi	r28, 0x7C	; 124
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	48 81       	ld	r20, Y
    142c:	59 81       	ldd	r21, Y+1	; 0x01
    142e:	6a 81       	ldd	r22, Y+2	; 0x02
    1430:	7b 81       	ldd	r23, Y+3	; 0x03
    1432:	77 27       	eor	r23, r23
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	46 34       	cpi	r20, 0x46	; 70
    1438:	51 44       	sbci	r21, 0x41	; 65
    143a:	64 45       	sbci	r22, 0x54	; 84
    143c:	71 05       	cpc	r23, r1
    143e:	39 f4       	brne	.+14     	; 0x144e <check_fs+0x70>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	05 c0       	rjmp	.+10     	; 0x144e <check_fs+0x70>
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	03 c0       	rjmp	.+6      	; 0x144e <check_fs+0x70>
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	01 c0       	rjmp	.+2      	; 0x144e <check_fs+0x70>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <validate>:
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	c9 f0       	breq	.+50     	; 0x148a <validate+0x36>
    1458:	dc 01       	movw	r26, r24
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	11 97       	sbiw	r26, 0x01	; 1
    1460:	30 97       	sbiw	r30, 0x00	; 0
    1462:	a9 f0       	breq	.+42     	; 0x148e <validate+0x3a>
    1464:	20 81       	ld	r18, Z
    1466:	22 23       	and	r18, r18
    1468:	a1 f0       	breq	.+40     	; 0x1492 <validate+0x3e>
    146a:	26 81       	ldd	r18, Z+6	; 0x06
    146c:	37 81       	ldd	r19, Z+7	; 0x07
    146e:	12 96       	adiw	r26, 0x02	; 2
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	13 97       	sbiw	r26, 0x03	; 3
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	69 f4       	brne	.+26     	; 0x1496 <validate+0x42>
    147c:	81 81       	ldd	r24, Z+1	; 0x01
    147e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <disk_status>
    1482:	80 ff       	sbrs	r24, 0
    1484:	0a c0       	rjmp	.+20     	; 0x149a <validate+0x46>
    1486:	89 e0       	ldi	r24, 0x09	; 9
    1488:	08 95       	ret
    148a:	89 e0       	ldi	r24, 0x09	; 9
    148c:	08 95       	ret
    148e:	89 e0       	ldi	r24, 0x09	; 9
    1490:	08 95       	ret
    1492:	89 e0       	ldi	r24, 0x09	; 9
    1494:	08 95       	ret
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	08 95       	ret
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	08 95       	ret

0000149e <find_volume>:
    149e:	2f 92       	push	r2
    14a0:	3f 92       	push	r3
    14a2:	4f 92       	push	r4
    14a4:	5f 92       	push	r5
    14a6:	6f 92       	push	r6
    14a8:	7f 92       	push	r7
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	6d 97       	sbiw	r28, 0x1d	; 29
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	6c 01       	movw	r12, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	b4 2e       	mov	r11, r20
    14d8:	d6 01       	movw	r26, r12
    14da:	1d 92       	st	X+, r1
    14dc:	1c 92       	st	X, r1
    14de:	0e 94 0b 09 	call	0x1216	; 0x1216 <get_ldnumber>
    14e2:	7c 01       	movw	r14, r24
    14e4:	99 23       	and	r25, r25
    14e6:	0c f4       	brge	.+2      	; 0x14ea <find_volume+0x4c>
    14e8:	10 c2       	rjmp	.+1056   	; 0x190a <find_volume+0x46c>
    14ea:	fc 01       	movw	r30, r24
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	eb 5e       	subi	r30, 0xEB	; 235
    14f2:	f2 4f       	sbci	r31, 0xF2	; 242
    14f4:	00 81       	ld	r16, Z
    14f6:	11 81       	ldd	r17, Z+1	; 0x01
    14f8:	01 15       	cp	r16, r1
    14fa:	11 05       	cpc	r17, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <find_volume+0x62>
    14fe:	07 c2       	rjmp	.+1038   	; 0x190e <find_volume+0x470>
    1500:	f6 01       	movw	r30, r12
    1502:	11 83       	std	Z+1, r17	; 0x01
    1504:	00 83       	st	Z, r16
    1506:	d8 01       	movw	r26, r16
    1508:	8c 91       	ld	r24, X
    150a:	88 23       	and	r24, r24
    150c:	69 f0       	breq	.+26     	; 0x1528 <find_volume+0x8a>
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	8c 91       	ld	r24, X
    1512:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <disk_status>
    1516:	80 fd       	sbrc	r24, 0
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <find_volume+0x8a>
    151a:	bb 20       	and	r11, r11
    151c:	09 f4       	brne	.+2      	; 0x1520 <find_volume+0x82>
    151e:	f9 c1       	rjmp	.+1010   	; 0x1912 <find_volume+0x474>
    1520:	82 ff       	sbrs	r24, 2
    1522:	f9 c1       	rjmp	.+1010   	; 0x1916 <find_volume+0x478>
    1524:	8a e0       	ldi	r24, 0x0A	; 10
    1526:	9a c2       	rjmp	.+1332   	; 0x1a5c <find_volume+0x5be>
    1528:	f8 01       	movw	r30, r16
    152a:	10 82       	st	Z, r1
    152c:	e1 82       	std	Z+1, r14	; 0x01
    152e:	8e 2d       	mov	r24, r14
    1530:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <disk_initialize>
    1534:	80 fd       	sbrc	r24, 0
    1536:	f1 c1       	rjmp	.+994    	; 0x191a <find_volume+0x47c>
    1538:	bb 20       	and	r11, r11
    153a:	09 f4       	brne	.+2      	; 0x153e <find_volume+0xa0>
    153c:	0e c2       	rjmp	.+1052   	; 0x195a <find_volume+0x4bc>
    153e:	82 fd       	sbrc	r24, 2
    1540:	ee c1       	rjmp	.+988    	; 0x191e <find_volume+0x480>
    1542:	0b c2       	rjmp	.+1046   	; 0x195a <find_volume+0x4bc>
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <find_volume+0xb6>
    154a:	44 80       	ldd	r4, Z+4	; 0x04
    154c:	55 80       	ldd	r5, Z+5	; 0x05
    154e:	66 80       	ldd	r6, Z+6	; 0x06
    1550:	77 80       	ldd	r7, Z+7	; 0x07
    1552:	04 c0       	rjmp	.+8      	; 0x155c <find_volume+0xbe>
    1554:	4e 2c       	mov	r4, r14
    1556:	5f 2c       	mov	r5, r15
    1558:	67 2e       	mov	r6, r23
    155a:	76 2e       	mov	r7, r22
    155c:	d9 01       	movw	r26, r18
    155e:	4d 92       	st	X+, r4
    1560:	5d 92       	st	X+, r5
    1562:	6d 92       	st	X+, r6
    1564:	7d 92       	st	X+, r7
    1566:	9d 01       	movw	r18, r26
    1568:	70 96       	adiw	r30, 0x10	; 16
    156a:	e4 17       	cp	r30, r20
    156c:	f5 07       	cpc	r31, r21
    156e:	51 f7       	brne	.-44     	; 0x1544 <find_volume+0xa6>
    1570:	4e 01       	movw	r8, r28
    1572:	b1 e1       	ldi	r27, 0x11	; 17
    1574:	8b 0e       	add	r8, r27
    1576:	91 1c       	adc	r9, r1
    1578:	68 94       	set
    157a:	77 24       	eor	r7, r7
    157c:	71 f8       	bld	r7, 1
    157e:	f5 01       	movw	r30, r10
    1580:	c1 90       	ld	r12, Z+
    1582:	d1 90       	ld	r13, Z+
    1584:	e1 90       	ld	r14, Z+
    1586:	f1 90       	ld	r15, Z+
    1588:	5f 01       	movw	r10, r30
    158a:	c1 14       	cp	r12, r1
    158c:	d1 04       	cpc	r13, r1
    158e:	e1 04       	cpc	r14, r1
    1590:	f1 04       	cpc	r15, r1
    1592:	41 f0       	breq	.+16     	; 0x15a4 <find_volume+0x106>
    1594:	b7 01       	movw	r22, r14
    1596:	a6 01       	movw	r20, r12
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 ef 09 	call	0x13de	; 0x13de <check_fs>
    159e:	81 11       	cpse	r24, r1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <find_volume+0x108>
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <find_volume+0x120>
    15a4:	87 2d       	mov	r24, r7
    15a6:	a8 14       	cp	r10, r8
    15a8:	b9 04       	cpc	r11, r9
    15aa:	49 f7       	brne	.-46     	; 0x157e <find_volume+0xe0>
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <find_volume+0x116>
    15ae:	c1 2c       	mov	r12, r1
    15b0:	d1 2c       	mov	r13, r1
    15b2:	76 01       	movw	r14, r12
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	09 f4       	brne	.+2      	; 0x15ba <find_volume+0x11c>
    15b8:	b4 c1       	rjmp	.+872    	; 0x1922 <find_volume+0x484>
    15ba:	81 11       	cpse	r24, r1
    15bc:	b4 c1       	rjmp	.+872    	; 0x1926 <find_volume+0x488>
    15be:	d8 01       	movw	r26, r16
    15c0:	dd 96       	adiw	r26, 0x3d	; 61
    15c2:	8d 91       	ld	r24, X+
    15c4:	9c 91       	ld	r25, X
    15c6:	de 97       	sbiw	r26, 0x3e	; 62
    15c8:	81 15       	cp	r24, r1
    15ca:	92 40       	sbci	r25, 0x02	; 2
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <find_volume+0x132>
    15ce:	ad c1       	rjmp	.+858    	; 0x192a <find_volume+0x48c>
    15d0:	f8 01       	movw	r30, r16
    15d2:	e8 5b       	subi	r30, 0xB8	; 184
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	40 80       	ld	r4, Z
    15d8:	51 80       	ldd	r5, Z+1	; 0x01
    15da:	61 2c       	mov	r6, r1
    15dc:	71 2c       	mov	r7, r1
    15de:	41 14       	cp	r4, r1
    15e0:	51 04       	cpc	r5, r1
    15e2:	61 04       	cpc	r6, r1
    15e4:	71 04       	cpc	r7, r1
    15e6:	29 f4       	brne	.+10     	; 0x15f2 <find_volume+0x154>
    15e8:	3e 96       	adiw	r30, 0x0e	; 14
    15ea:	40 80       	ld	r4, Z
    15ec:	51 80       	ldd	r5, Z+1	; 0x01
    15ee:	62 80       	ldd	r6, Z+2	; 0x02
    15f0:	73 80       	ldd	r7, Z+3	; 0x03
    15f2:	f8 01       	movw	r30, r16
    15f4:	42 8e       	std	Z+26, r4	; 0x1a
    15f6:	53 8e       	std	Z+27, r5	; 0x1b
    15f8:	64 8e       	std	Z+28, r6	; 0x1c
    15fa:	75 8e       	std	Z+29, r7	; 0x1d
    15fc:	ee 5b       	subi	r30, 0xBE	; 190
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	a0 81       	ld	r26, Z
    1602:	f8 01       	movw	r30, r16
    1604:	a3 83       	std	Z+3, r26	; 0x03
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	8a 0f       	add	r24, r26
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	08 f0       	brcs	.+2      	; 0x1610 <find_volume+0x172>
    160e:	8f c1       	rjmp	.+798    	; 0x192e <find_volume+0x490>
    1610:	f7 ad       	ldd	r31, Z+63	; 0x3f
    1612:	f9 8b       	std	Y+17, r31	; 0x11
    1614:	2f 2f       	mov	r18, r31
    1616:	f8 01       	movw	r30, r16
    1618:	22 83       	std	Z+2, r18	; 0x02
    161a:	22 23       	and	r18, r18
    161c:	09 f4       	brne	.+2      	; 0x1620 <find_volume+0x182>
    161e:	89 c1       	rjmp	.+786    	; 0x1932 <find_volume+0x494>
    1620:	82 2f       	mov	r24, r18
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 01       	movw	r18, r24
    1626:	21 50       	subi	r18, 0x01	; 1
    1628:	31 09       	sbc	r19, r1
    162a:	82 23       	and	r24, r18
    162c:	93 23       	and	r25, r19
    162e:	89 2b       	or	r24, r25
    1630:	09 f0       	breq	.+2      	; 0x1634 <find_volume+0x196>
    1632:	81 c1       	rjmp	.+770    	; 0x1936 <find_volume+0x498>
    1634:	ed 5b       	subi	r30, 0xBD	; 189
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	20 80       	ld	r2, Z
    163a:	31 80       	ldd	r3, Z+1	; 0x01
    163c:	f8 01       	movw	r30, r16
    163e:	31 86       	std	Z+9, r3	; 0x09
    1640:	20 86       	std	Z+8, r2	; 0x08
    1642:	c1 01       	movw	r24, r2
    1644:	8f 70       	andi	r24, 0x0F	; 15
    1646:	99 27       	eor	r25, r25
    1648:	89 2b       	or	r24, r25
    164a:	09 f0       	breq	.+2      	; 0x164e <find_volume+0x1b0>
    164c:	76 c1       	rjmp	.+748    	; 0x193a <find_volume+0x49c>
    164e:	eb 5b       	subi	r30, 0xBB	; 187
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 80       	ld	r8, Z
    1654:	91 80       	ldd	r9, Z+1	; 0x01
    1656:	a1 2c       	mov	r10, r1
    1658:	b1 2c       	mov	r11, r1
    165a:	81 14       	cp	r8, r1
    165c:	91 04       	cpc	r9, r1
    165e:	a1 04       	cpc	r10, r1
    1660:	b1 04       	cpc	r11, r1
    1662:	29 f4       	brne	.+10     	; 0x166e <find_volume+0x1d0>
    1664:	3d 96       	adiw	r30, 0x0d	; 13
    1666:	80 80       	ld	r8, Z
    1668:	91 80       	ldd	r9, Z+1	; 0x01
    166a:	a2 80       	ldd	r10, Z+2	; 0x02
    166c:	b3 80       	ldd	r11, Z+3	; 0x03
    166e:	f8 01       	movw	r30, r16
    1670:	e0 5c       	subi	r30, 0xC0	; 192
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	01 90       	ld	r0, Z+
    1676:	f0 81       	ld	r31, Z
    1678:	e0 2d       	mov	r30, r0
    167a:	30 97       	sbiw	r30, 0x00	; 0
    167c:	09 f4       	brne	.+2      	; 0x1680 <find_volume+0x1e2>
    167e:	5f c1       	rjmp	.+702    	; 0x193e <find_volume+0x4a0>
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	a3 01       	movw	r20, r6
    1684:	92 01       	movw	r18, r4
    1686:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__muluhisi3>
    168a:	6a 8f       	std	Y+26, r22	; 0x1a
    168c:	7b 8f       	std	Y+27, r23	; 0x1b
    168e:	8c 8f       	std	Y+28, r24	; 0x1c
    1690:	9d 8f       	std	Y+29, r25	; 0x1d
    1692:	9f 01       	movw	r18, r30
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	2e 8b       	std	Y+22, r18	; 0x16
    169a:	3f 8b       	std	Y+23, r19	; 0x17
    169c:	48 8f       	std	Y+24, r20	; 0x18
    169e:	59 8f       	std	Y+25, r21	; 0x19
    16a0:	c1 01       	movw	r24, r2
    16a2:	92 95       	swap	r25
    16a4:	82 95       	swap	r24
    16a6:	8f 70       	andi	r24, 0x0F	; 15
    16a8:	89 27       	eor	r24, r25
    16aa:	9f 70       	andi	r25, 0x0F	; 15
    16ac:	89 27       	eor	r24, r25
    16ae:	28 0f       	add	r18, r24
    16b0:	39 1f       	adc	r19, r25
    16b2:	41 1d       	adc	r20, r1
    16b4:	51 1d       	adc	r21, r1
    16b6:	da 01       	movw	r26, r20
    16b8:	c9 01       	movw	r24, r18
    16ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16be:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16c0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    16c2:	28 0f       	add	r18, r24
    16c4:	39 1f       	adc	r19, r25
    16c6:	4a 1f       	adc	r20, r26
    16c8:	5b 1f       	adc	r21, r27
    16ca:	2a 8b       	std	Y+18, r18	; 0x12
    16cc:	3b 8b       	std	Y+19, r19	; 0x13
    16ce:	4c 8b       	std	Y+20, r20	; 0x14
    16d0:	5d 8b       	std	Y+21, r21	; 0x15
    16d2:	82 16       	cp	r8, r18
    16d4:	93 06       	cpc	r9, r19
    16d6:	a4 06       	cpc	r10, r20
    16d8:	b5 06       	cpc	r11, r21
    16da:	08 f4       	brcc	.+2      	; 0x16de <find_volume+0x240>
    16dc:	32 c1       	rjmp	.+612    	; 0x1942 <find_volume+0x4a4>
    16de:	c5 01       	movw	r24, r10
    16e0:	b4 01       	movw	r22, r8
    16e2:	62 1b       	sub	r22, r18
    16e4:	73 0b       	sbc	r23, r19
    16e6:	84 0b       	sbc	r24, r20
    16e8:	95 0b       	sbc	r25, r21
    16ea:	e9 89       	ldd	r30, Y+17	; 0x11
    16ec:	2e 2f       	mov	r18, r30
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <__udivmodsi4>
    16f8:	da 01       	movw	r26, r20
    16fa:	c9 01       	movw	r24, r18
    16fc:	21 15       	cp	r18, r1
    16fe:	31 05       	cpc	r19, r1
    1700:	41 05       	cpc	r20, r1
    1702:	51 05       	cpc	r21, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <find_volume+0x26a>
    1706:	1f c1       	rjmp	.+574    	; 0x1946 <find_volume+0x4a8>
    1708:	26 3f       	cpi	r18, 0xF6	; 246
    170a:	ff e0       	ldi	r31, 0x0F	; 15
    170c:	3f 07       	cpc	r19, r31
    170e:	41 05       	cpc	r20, r1
    1710:	51 05       	cpc	r21, r1
    1712:	18 f0       	brcs	.+6      	; 0x171a <find_volume+0x27c>
    1714:	e2 e0       	ldi	r30, 0x02	; 2
    1716:	e9 8b       	std	Y+17, r30	; 0x11
    1718:	02 c0       	rjmp	.+4      	; 0x171e <find_volume+0x280>
    171a:	f1 e0       	ldi	r31, 0x01	; 1
    171c:	f9 8b       	std	Y+17, r31	; 0x11
    171e:	86 3f       	cpi	r24, 0xF6	; 246
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	a1 05       	cpc	r26, r1
    1724:	b1 05       	cpc	r27, r1
    1726:	08 f0       	brcs	.+2      	; 0x172a <find_volume+0x28c>
    1728:	30 c1       	rjmp	.+608    	; 0x198a <find_volume+0x4ec>
    172a:	49 01       	movw	r8, r18
    172c:	5a 01       	movw	r10, r20
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	88 0e       	add	r8, r24
    1732:	91 1c       	adc	r9, r1
    1734:	a1 1c       	adc	r10, r1
    1736:	b1 1c       	adc	r11, r1
    1738:	d8 01       	movw	r26, r16
    173a:	56 96       	adiw	r26, 0x16	; 22
    173c:	8d 92       	st	X+, r8
    173e:	9d 92       	st	X+, r9
    1740:	ad 92       	st	X+, r10
    1742:	bc 92       	st	X, r11
    1744:	59 97       	sbiw	r26, 0x19	; 25
    1746:	f8 01       	movw	r30, r16
    1748:	c6 8e       	std	Z+30, r12	; 0x1e
    174a:	d7 8e       	std	Z+31, r13	; 0x1f
    174c:	e0 a2       	std	Z+32, r14	; 0x20
    174e:	f1 a2       	std	Z+33, r15	; 0x21
    1750:	8e 89       	ldd	r24, Y+22	; 0x16
    1752:	9f 89       	ldd	r25, Y+23	; 0x17
    1754:	a8 8d       	ldd	r26, Y+24	; 0x18
    1756:	b9 8d       	ldd	r27, Y+25	; 0x19
    1758:	8c 0d       	add	r24, r12
    175a:	9d 1d       	adc	r25, r13
    175c:	ae 1d       	adc	r26, r14
    175e:	bf 1d       	adc	r27, r15
    1760:	82 a3       	std	Z+34, r24	; 0x22
    1762:	93 a3       	std	Z+35, r25	; 0x23
    1764:	a4 a3       	std	Z+36, r26	; 0x24
    1766:	b5 a3       	std	Z+37, r27	; 0x25
    1768:	4a 89       	ldd	r20, Y+18	; 0x12
    176a:	5b 89       	ldd	r21, Y+19	; 0x13
    176c:	6c 89       	ldd	r22, Y+20	; 0x14
    176e:	7d 89       	ldd	r23, Y+21	; 0x15
    1770:	4c 0d       	add	r20, r12
    1772:	5d 1d       	adc	r21, r13
    1774:	6e 1d       	adc	r22, r14
    1776:	7f 1d       	adc	r23, r15
    1778:	42 a7       	std	Z+42, r20	; 0x2a
    177a:	53 a7       	std	Z+43, r21	; 0x2b
    177c:	64 a7       	std	Z+44, r22	; 0x2c
    177e:	75 a7       	std	Z+45, r23	; 0x2d
    1780:	f9 89       	ldd	r31, Y+17	; 0x11
    1782:	f3 30       	cpi	r31, 0x03	; 3
    1784:	69 f5       	brne	.+90     	; 0x17e0 <find_volume+0x342>
    1786:	23 28       	or	r2, r3
    1788:	09 f0       	breq	.+2      	; 0x178c <find_volume+0x2ee>
    178a:	df c0       	rjmp	.+446    	; 0x194a <find_volume+0x4ac>
    178c:	f8 01       	movw	r30, r16
    178e:	e2 5a       	subi	r30, 0xA2	; 162
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	a2 81       	ldd	r26, Z+2	; 0x02
    1798:	b3 81       	ldd	r27, Z+3	; 0x03
    179a:	f8 01       	movw	r30, r16
    179c:	86 a3       	std	Z+38, r24	; 0x26
    179e:	97 a3       	std	Z+39, r25	; 0x27
    17a0:	a0 a7       	std	Z+40, r26	; 0x28
    17a2:	b1 a7       	std	Z+41, r27	; 0x29
    17a4:	88 0c       	add	r8, r8
    17a6:	99 1c       	adc	r9, r9
    17a8:	aa 1c       	adc	r10, r10
    17aa:	bb 1c       	adc	r11, r11
    17ac:	88 0c       	add	r8, r8
    17ae:	99 1c       	adc	r9, r9
    17b0:	aa 1c       	adc	r10, r10
    17b2:	bb 1c       	adc	r11, r11
    17b4:	ff ef       	ldi	r31, 0xFF	; 255
    17b6:	8f 0e       	add	r8, r31
    17b8:	f1 e0       	ldi	r31, 0x01	; 1
    17ba:	9f 1e       	adc	r9, r31
    17bc:	a1 1c       	adc	r10, r1
    17be:	b1 1c       	adc	r11, r1
    17c0:	07 2e       	mov	r0, r23
    17c2:	79 e0       	ldi	r23, 0x09	; 9
    17c4:	b6 94       	lsr	r11
    17c6:	a7 94       	ror	r10
    17c8:	97 94       	ror	r9
    17ca:	87 94       	ror	r8
    17cc:	7a 95       	dec	r23
    17ce:	d1 f7       	brne	.-12     	; 0x17c4 <find_volume+0x326>
    17d0:	70 2d       	mov	r23, r0
    17d2:	48 14       	cp	r4, r8
    17d4:	59 04       	cpc	r5, r9
    17d6:	6a 04       	cpc	r6, r10
    17d8:	7b 04       	cpc	r7, r11
    17da:	08 f4       	brcc	.+2      	; 0x17de <find_volume+0x340>
    17dc:	b8 c0       	rjmp	.+368    	; 0x194e <find_volume+0x4b0>
    17de:	01 c1       	rjmp	.+514    	; 0x19e2 <find_volume+0x544>
    17e0:	23 28       	or	r2, r3
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <find_volume+0x348>
    17e4:	b6 c0       	rjmp	.+364    	; 0x1952 <find_volume+0x4b4>
    17e6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    17e8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    17ea:	4c 8d       	ldd	r20, Y+28	; 0x1c
    17ec:	5d 8d       	ldd	r21, Y+29	; 0x1d
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	a4 1f       	adc	r26, r20
    17f4:	b5 1f       	adc	r27, r21
    17f6:	f8 01       	movw	r30, r16
    17f8:	86 a3       	std	Z+38, r24	; 0x26
    17fa:	97 a3       	std	Z+39, r25	; 0x27
    17fc:	a0 a7       	std	Z+40, r26	; 0x28
    17fe:	b1 a7       	std	Z+41, r27	; 0x29
    1800:	f9 89       	ldd	r31, Y+17	; 0x11
    1802:	f2 30       	cpi	r31, 0x02	; 2
    1804:	29 f4       	brne	.+10     	; 0x1810 <find_volume+0x372>
    1806:	88 0c       	add	r8, r8
    1808:	99 1c       	adc	r9, r9
    180a:	aa 1c       	adc	r10, r10
    180c:	bb 1c       	adc	r11, r11
    180e:	10 c1       	rjmp	.+544    	; 0x1a30 <find_volume+0x592>
    1810:	a3 e0       	ldi	r26, 0x03	; 3
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	a5 01       	movw	r20, r10
    1816:	94 01       	movw	r18, r8
    1818:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__muluhisi3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	b6 95       	lsr	r27
    1822:	a7 95       	ror	r26
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	82 22       	and	r8, r18
    182c:	99 24       	eor	r9, r9
    182e:	aa 24       	eor	r10, r10
    1830:	bb 24       	eor	r11, r11
    1832:	88 0e       	add	r8, r24
    1834:	99 1e       	adc	r9, r25
    1836:	aa 1e       	adc	r10, r26
    1838:	bb 1e       	adc	r11, r27
    183a:	fa c0       	rjmp	.+500    	; 0x1a30 <find_volume+0x592>
    183c:	b7 01       	movw	r22, r14
    183e:	a6 01       	movw	r20, r12
    1840:	4f 5f       	subi	r20, 0xFF	; 255
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	6f 4f       	sbci	r22, 0xFF	; 255
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	c8 01       	movw	r24, r16
    184a:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    184e:	81 11       	cpse	r24, r1
    1850:	39 c0       	rjmp	.+114    	; 0x18c4 <find_volume+0x426>
    1852:	d8 01       	movw	r26, r16
    1854:	15 96       	adiw	r26, 0x05	; 5
    1856:	1c 92       	st	X, r1
    1858:	f8 01       	movw	r30, r16
    185a:	e0 5d       	subi	r30, 0xD0	; 208
    185c:	fd 4f       	sbci	r31, 0xFD	; 253
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	85 35       	cpi	r24, 0x55	; 85
    1864:	9a 4a       	sbci	r25, 0xAA	; 170
    1866:	89 f5       	brne	.+98     	; 0x18ca <find_volume+0x42c>
    1868:	f8 01       	movw	r30, r16
    186a:	82 a9       	ldd	r24, Z+50	; 0x32
    186c:	93 a9       	ldd	r25, Z+51	; 0x33
    186e:	a4 a9       	ldd	r26, Z+52	; 0x34
    1870:	b5 a9       	ldd	r27, Z+53	; 0x35
    1872:	82 35       	cpi	r24, 0x52	; 82
    1874:	92 45       	sbci	r25, 0x52	; 82
    1876:	a1 46       	sbci	r26, 0x61	; 97
    1878:	b1 44       	sbci	r27, 0x41	; 65
    187a:	51 f5       	brne	.+84     	; 0x18d0 <find_volume+0x432>
    187c:	f8 01       	movw	r30, r16
    187e:	ea 5e       	subi	r30, 0xEA	; 234
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	a2 81       	ldd	r26, Z+2	; 0x02
    1888:	b3 81       	ldd	r27, Z+3	; 0x03
    188a:	82 37       	cpi	r24, 0x72	; 114
    188c:	92 47       	sbci	r25, 0x72	; 114
    188e:	a1 44       	sbci	r26, 0x41	; 65
    1890:	b1 46       	sbci	r27, 0x61	; 97
    1892:	09 f5       	brne	.+66     	; 0x18d6 <find_volume+0x438>
    1894:	34 96       	adiw	r30, 0x04	; 4
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	a2 81       	ldd	r26, Z+2	; 0x02
    189c:	b3 81       	ldd	r27, Z+3	; 0x03
    189e:	f8 01       	movw	r30, r16
    18a0:	86 87       	std	Z+14, r24	; 0x0e
    18a2:	97 87       	std	Z+15, r25	; 0x0f
    18a4:	a0 8b       	std	Z+16, r26	; 0x10
    18a6:	b1 8b       	std	Z+17, r27	; 0x11
    18a8:	e2 5e       	subi	r30, 0xE2	; 226
    18aa:	fd 4f       	sbci	r31, 0xFD	; 253
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	a2 81       	ldd	r26, Z+2	; 0x02
    18b2:	b3 81       	ldd	r27, Z+3	; 0x03
    18b4:	f8 01       	movw	r30, r16
    18b6:	82 87       	std	Z+10, r24	; 0x0a
    18b8:	93 87       	std	Z+11, r25	; 0x0b
    18ba:	a4 87       	std	Z+12, r26	; 0x0c
    18bc:	b5 87       	std	Z+13, r27	; 0x0d
    18be:	f3 e0       	ldi	r31, 0x03	; 3
    18c0:	f9 8b       	std	Y+17, r31	; 0x11
    18c2:	0b c0       	rjmp	.+22     	; 0x18da <find_volume+0x43c>
    18c4:	e3 e0       	ldi	r30, 0x03	; 3
    18c6:	e9 8b       	std	Y+17, r30	; 0x11
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <find_volume+0x43c>
    18ca:	f3 e0       	ldi	r31, 0x03	; 3
    18cc:	f9 8b       	std	Y+17, r31	; 0x11
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <find_volume+0x43c>
    18d0:	e3 e0       	ldi	r30, 0x03	; 3
    18d2:	e9 8b       	std	Y+17, r30	; 0x11
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <find_volume+0x43c>
    18d6:	f3 e0       	ldi	r31, 0x03	; 3
    18d8:	f9 8b       	std	Y+17, r31	; 0x11
    18da:	e9 89       	ldd	r30, Y+17	; 0x11
    18dc:	d8 01       	movw	r26, r16
    18de:	ec 93       	st	X, r30
    18e0:	80 91 13 0d 	lds	r24, 0x0D13
    18e4:	90 91 14 0d 	lds	r25, 0x0D14
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	90 93 14 0d 	sts	0x0D14, r25
    18ee:	80 93 13 0d 	sts	0x0D13, r24
    18f2:	17 96       	adiw	r26, 0x07	; 7
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
    18f8:	16 97       	sbiw	r26, 0x06	; 6
    18fa:	52 96       	adiw	r26, 0x12	; 18
    18fc:	1d 92       	st	X+, r1
    18fe:	1d 92       	st	X+, r1
    1900:	1d 92       	st	X+, r1
    1902:	1c 92       	st	X, r1
    1904:	55 97       	sbiw	r26, 0x15	; 21
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	a9 c0       	rjmp	.+338    	; 0x1a5c <find_volume+0x5be>
    190a:	8b e0       	ldi	r24, 0x0B	; 11
    190c:	a7 c0       	rjmp	.+334    	; 0x1a5c <find_volume+0x5be>
    190e:	8c e0       	ldi	r24, 0x0C	; 12
    1910:	a5 c0       	rjmp	.+330    	; 0x1a5c <find_volume+0x5be>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	a3 c0       	rjmp	.+326    	; 0x1a5c <find_volume+0x5be>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	a1 c0       	rjmp	.+322    	; 0x1a5c <find_volume+0x5be>
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	9f c0       	rjmp	.+318    	; 0x1a5c <find_volume+0x5be>
    191e:	8a e0       	ldi	r24, 0x0A	; 10
    1920:	9d c0       	rjmp	.+314    	; 0x1a5c <find_volume+0x5be>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	9b c0       	rjmp	.+310    	; 0x1a5c <find_volume+0x5be>
    1926:	8d e0       	ldi	r24, 0x0D	; 13
    1928:	99 c0       	rjmp	.+306    	; 0x1a5c <find_volume+0x5be>
    192a:	8d e0       	ldi	r24, 0x0D	; 13
    192c:	97 c0       	rjmp	.+302    	; 0x1a5c <find_volume+0x5be>
    192e:	8d e0       	ldi	r24, 0x0D	; 13
    1930:	95 c0       	rjmp	.+298    	; 0x1a5c <find_volume+0x5be>
    1932:	8d e0       	ldi	r24, 0x0D	; 13
    1934:	93 c0       	rjmp	.+294    	; 0x1a5c <find_volume+0x5be>
    1936:	8d e0       	ldi	r24, 0x0D	; 13
    1938:	91 c0       	rjmp	.+290    	; 0x1a5c <find_volume+0x5be>
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	8f c0       	rjmp	.+286    	; 0x1a5c <find_volume+0x5be>
    193e:	8d e0       	ldi	r24, 0x0D	; 13
    1940:	8d c0       	rjmp	.+282    	; 0x1a5c <find_volume+0x5be>
    1942:	8d e0       	ldi	r24, 0x0D	; 13
    1944:	8b c0       	rjmp	.+278    	; 0x1a5c <find_volume+0x5be>
    1946:	8d e0       	ldi	r24, 0x0D	; 13
    1948:	89 c0       	rjmp	.+274    	; 0x1a5c <find_volume+0x5be>
    194a:	8d e0       	ldi	r24, 0x0D	; 13
    194c:	87 c0       	rjmp	.+270    	; 0x1a5c <find_volume+0x5be>
    194e:	8d e0       	ldi	r24, 0x0D	; 13
    1950:	85 c0       	rjmp	.+266    	; 0x1a5c <find_volume+0x5be>
    1952:	8d e0       	ldi	r24, 0x0D	; 13
    1954:	83 c0       	rjmp	.+262    	; 0x1a5c <find_volume+0x5be>
    1956:	8d e0       	ldi	r24, 0x0D	; 13
    1958:	81 c0       	rjmp	.+258    	; 0x1a5c <find_volume+0x5be>
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	ba 01       	movw	r22, r20
    1960:	c8 01       	movw	r24, r16
    1962:	0e 94 ef 09 	call	0x13de	; 0x13de <check_fs>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	09 f0       	breq	.+2      	; 0x196c <find_volume+0x4ce>
    196a:	21 ce       	rjmp	.-958    	; 0x15ae <find_volume+0x110>
    196c:	f8 01       	movw	r30, r16
    196e:	ec 50       	subi	r30, 0x0C	; 12
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	9e 01       	movw	r18, r28
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	59 01       	movw	r10, r18
    197a:	a8 01       	movw	r20, r16
    197c:	4c 5c       	subi	r20, 0xCC	; 204
    197e:	5d 4f       	sbci	r21, 0xFD	; 253
    1980:	e1 2c       	mov	r14, r1
    1982:	f1 2c       	mov	r15, r1
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	dd cd       	rjmp	.-1094   	; 0x1544 <find_volume+0xa6>
    198a:	49 01       	movw	r8, r18
    198c:	5a 01       	movw	r10, r20
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	86 0e       	add	r8, r22
    1992:	91 1c       	adc	r9, r1
    1994:	a1 1c       	adc	r10, r1
    1996:	b1 1c       	adc	r11, r1
    1998:	d8 01       	movw	r26, r16
    199a:	56 96       	adiw	r26, 0x16	; 22
    199c:	8d 92       	st	X+, r8
    199e:	9d 92       	st	X+, r9
    19a0:	ad 92       	st	X+, r10
    19a2:	bc 92       	st	X, r11
    19a4:	59 97       	sbiw	r26, 0x19	; 25
    19a6:	f8 01       	movw	r30, r16
    19a8:	c6 8e       	std	Z+30, r12	; 0x1e
    19aa:	d7 8e       	std	Z+31, r13	; 0x1f
    19ac:	e0 a2       	std	Z+32, r14	; 0x20
    19ae:	f1 a2       	std	Z+33, r15	; 0x21
    19b0:	8e 89       	ldd	r24, Y+22	; 0x16
    19b2:	9f 89       	ldd	r25, Y+23	; 0x17
    19b4:	a8 8d       	ldd	r26, Y+24	; 0x18
    19b6:	b9 8d       	ldd	r27, Y+25	; 0x19
    19b8:	8c 0d       	add	r24, r12
    19ba:	9d 1d       	adc	r25, r13
    19bc:	ae 1d       	adc	r26, r14
    19be:	bf 1d       	adc	r27, r15
    19c0:	82 a3       	std	Z+34, r24	; 0x22
    19c2:	93 a3       	std	Z+35, r25	; 0x23
    19c4:	a4 a3       	std	Z+36, r26	; 0x24
    19c6:	b5 a3       	std	Z+37, r27	; 0x25
    19c8:	8a 89       	ldd	r24, Y+18	; 0x12
    19ca:	9b 89       	ldd	r25, Y+19	; 0x13
    19cc:	ac 89       	ldd	r26, Y+20	; 0x14
    19ce:	bd 89       	ldd	r27, Y+21	; 0x15
    19d0:	8c 0d       	add	r24, r12
    19d2:	9d 1d       	adc	r25, r13
    19d4:	ae 1d       	adc	r26, r14
    19d6:	bf 1d       	adc	r27, r15
    19d8:	82 a7       	std	Z+42, r24	; 0x2a
    19da:	93 a7       	std	Z+43, r25	; 0x2b
    19dc:	a4 a7       	std	Z+44, r26	; 0x2c
    19de:	b5 a7       	std	Z+45, r27	; 0x2d
    19e0:	d2 ce       	rjmp	.-604    	; 0x1786 <find_volume+0x2e8>
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	9f ef       	ldi	r25, 0xFF	; 255
    19e6:	dc 01       	movw	r26, r24
    19e8:	f8 01       	movw	r30, r16
    19ea:	86 87       	std	Z+14, r24	; 0x0e
    19ec:	97 87       	std	Z+15, r25	; 0x0f
    19ee:	a0 8b       	std	Z+16, r26	; 0x10
    19f0:	b1 8b       	std	Z+17, r27	; 0x11
    19f2:	82 87       	std	Z+10, r24	; 0x0a
    19f4:	93 87       	std	Z+11, r25	; 0x0b
    19f6:	a4 87       	std	Z+12, r26	; 0x0c
    19f8:	b5 87       	std	Z+13, r27	; 0x0d
    19fa:	80 e8       	ldi	r24, 0x80	; 128
    19fc:	85 83       	std	Z+5, r24	; 0x05
    19fe:	ee 59       	subi	r30, 0x9E	; 158
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <find_volume+0x56e>
    1a0a:	18 cf       	rjmp	.-464    	; 0x183c <find_volume+0x39e>
    1a0c:	f3 e0       	ldi	r31, 0x03	; 3
    1a0e:	f9 8b       	std	Y+17, r31	; 0x11
    1a10:	64 cf       	rjmp	.-312    	; 0x18da <find_volume+0x43c>
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	dc 01       	movw	r26, r24
    1a18:	f8 01       	movw	r30, r16
    1a1a:	86 87       	std	Z+14, r24	; 0x0e
    1a1c:	97 87       	std	Z+15, r25	; 0x0f
    1a1e:	a0 8b       	std	Z+16, r26	; 0x10
    1a20:	b1 8b       	std	Z+17, r27	; 0x11
    1a22:	82 87       	std	Z+10, r24	; 0x0a
    1a24:	93 87       	std	Z+11, r25	; 0x0b
    1a26:	a4 87       	std	Z+12, r26	; 0x0c
    1a28:	b5 87       	std	Z+13, r27	; 0x0d
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	85 83       	std	Z+5, r24	; 0x05
    1a2e:	55 cf       	rjmp	.-342    	; 0x18da <find_volume+0x43c>
    1a30:	ff ef       	ldi	r31, 0xFF	; 255
    1a32:	8f 0e       	add	r8, r31
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	9f 1e       	adc	r9, r31
    1a38:	a1 1c       	adc	r10, r1
    1a3a:	b1 1c       	adc	r11, r1
    1a3c:	07 2e       	mov	r0, r23
    1a3e:	79 e0       	ldi	r23, 0x09	; 9
    1a40:	b6 94       	lsr	r11
    1a42:	a7 94       	ror	r10
    1a44:	97 94       	ror	r9
    1a46:	87 94       	ror	r8
    1a48:	7a 95       	dec	r23
    1a4a:	d1 f7       	brne	.-12     	; 0x1a40 <find_volume+0x5a2>
    1a4c:	70 2d       	mov	r23, r0
    1a4e:	48 14       	cp	r4, r8
    1a50:	59 04       	cpc	r5, r9
    1a52:	6a 04       	cpc	r6, r10
    1a54:	7b 04       	cpc	r7, r11
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <find_volume+0x5bc>
    1a58:	7e cf       	rjmp	.-260    	; 0x1956 <find_volume+0x4b8>
    1a5a:	db cf       	rjmp	.-74     	; 0x1a12 <find_volume+0x574>
    1a5c:	6d 96       	adiw	r28, 0x1d	; 29
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	9f 90       	pop	r9
    1a7e:	8f 90       	pop	r8
    1a80:	7f 90       	pop	r7
    1a82:	6f 90       	pop	r6
    1a84:	5f 90       	pop	r5
    1a86:	4f 90       	pop	r4
    1a88:	3f 90       	pop	r3
    1a8a:	2f 90       	pop	r2
    1a8c:	08 95       	ret

00001a8e <sync_fs>:
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	ec 01       	movw	r28, r24
    1a9c:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	5c c0       	rjmp	.+184    	; 0x1b5e <sync_fs+0xd0>
    1aa6:	88 81       	ld	r24, Y
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <sync_fs+0x20>
    1aac:	4e c0       	rjmp	.+156    	; 0x1b4a <sync_fs+0xbc>
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <sync_fs+0x28>
    1ab4:	4a c0       	rjmp	.+148    	; 0x1b4a <sync_fs+0xbc>
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	52 e0       	ldi	r21, 0x02	; 2
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	7e 01       	movw	r14, r28
    1ac0:	82 e3       	ldi	r24, 0x32	; 50
    1ac2:	e8 0e       	add	r14, r24
    1ac4:	f1 1c       	adc	r15, r1
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <mem_set>
    1acc:	85 e5       	ldi	r24, 0x55	; 85
    1ace:	9a ea       	ldi	r25, 0xAA	; 170
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e0 5d       	subi	r30, 0xD0	; 208
    1ad4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	82 e5       	ldi	r24, 0x52	; 82
    1adc:	92 e5       	ldi	r25, 0x52	; 82
    1ade:	a1 e6       	ldi	r26, 0x61	; 97
    1ae0:	b1 e4       	ldi	r27, 0x41	; 65
    1ae2:	8a ab       	std	Y+50, r24	; 0x32
    1ae4:	9b ab       	std	Y+51, r25	; 0x33
    1ae6:	ac ab       	std	Y+52, r26	; 0x34
    1ae8:	bd ab       	std	Y+53, r27	; 0x35
    1aea:	82 e7       	ldi	r24, 0x72	; 114
    1aec:	92 e7       	ldi	r25, 0x72	; 114
    1aee:	a1 e4       	ldi	r26, 0x41	; 65
    1af0:	b1 e6       	ldi	r27, 0x61	; 97
    1af2:	7a 97       	sbiw	r30, 0x1a	; 26
    1af4:	80 83       	st	Z, r24
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	a2 83       	std	Z+2, r26	; 0x02
    1afa:	b3 83       	std	Z+3, r27	; 0x03
    1afc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1afe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b00:	a8 89       	ldd	r26, Y+16	; 0x10
    1b02:	b9 89       	ldd	r27, Y+17	; 0x11
    1b04:	34 96       	adiw	r30, 0x04	; 4
    1b06:	80 83       	st	Z, r24
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	a2 83       	std	Z+2, r26	; 0x02
    1b0c:	b3 83       	std	Z+3, r27	; 0x03
    1b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b12:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b14:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b16:	34 96       	adiw	r30, 0x04	; 4
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
    1b20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b24:	a8 a1       	ldd	r26, Y+32	; 0x20
    1b26:	b9 a1       	ldd	r27, Y+33	; 0x21
    1b28:	9c 01       	movw	r18, r24
    1b2a:	ad 01       	movw	r20, r26
    1b2c:	2f 5f       	subi	r18, 0xFF	; 255
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	4f 4f       	sbci	r20, 0xFF	; 255
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	2e a7       	std	Y+46, r18	; 0x2e
    1b36:	3f a7       	std	Y+47, r19	; 0x2f
    1b38:	48 ab       	std	Y+48, r20	; 0x30
    1b3a:	59 ab       	std	Y+49, r21	; 0x31
    1b3c:	01 e0       	ldi	r16, 0x01	; 1
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	b7 01       	movw	r22, r14
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <disk_write>
    1b48:	1d 82       	std	Y+5, r1	; 0x05
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <disk_ioctl>
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	81 11       	cpse	r24, r1
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <sync_fs+0xd0>
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	89 2f       	mov	r24, r25
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <clust2sect>:
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	fc 01       	movw	r30, r24
    1b78:	9a 01       	movw	r18, r20
    1b7a:	ab 01       	movw	r20, r22
    1b7c:	22 50       	subi	r18, 0x02	; 2
    1b7e:	31 09       	sbc	r19, r1
    1b80:	41 09       	sbc	r20, r1
    1b82:	51 09       	sbc	r21, r1
    1b84:	c6 88       	ldd	r12, Z+22	; 0x16
    1b86:	d7 88       	ldd	r13, Z+23	; 0x17
    1b88:	e0 8c       	ldd	r14, Z+24	; 0x18
    1b8a:	f1 8c       	ldd	r15, Z+25	; 0x19
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	c8 1a       	sub	r12, r24
    1b90:	d1 08       	sbc	r13, r1
    1b92:	e1 08       	sbc	r14, r1
    1b94:	f1 08       	sbc	r15, r1
    1b96:	2c 15       	cp	r18, r12
    1b98:	3d 05       	cpc	r19, r13
    1b9a:	4e 05       	cpc	r20, r14
    1b9c:	5f 05       	cpc	r21, r15
    1b9e:	68 f4       	brcc	.+26     	; 0x1bba <clust2sect+0x4c>
    1ba0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__muluhisi3>
    1ba8:	c2 a4       	ldd	r12, Z+42	; 0x2a
    1baa:	d3 a4       	ldd	r13, Z+43	; 0x2b
    1bac:	e4 a4       	ldd	r14, Z+44	; 0x2c
    1bae:	f5 a4       	ldd	r15, Z+45	; 0x2d
    1bb0:	6c 0d       	add	r22, r12
    1bb2:	7d 1d       	adc	r23, r13
    1bb4:	8e 1d       	adc	r24, r14
    1bb6:	9f 1d       	adc	r25, r15
    1bb8:	03 c0       	rjmp	.+6      	; 0x1bc0 <clust2sect+0x52>
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	08 95       	ret

00001bca <get_fat>:
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
    1be0:	6a 01       	movw	r12, r20
    1be2:	7b 01       	movw	r14, r22
    1be4:	42 30       	cpi	r20, 0x02	; 2
    1be6:	51 05       	cpc	r21, r1
    1be8:	61 05       	cpc	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <get_fat+0x26>
    1bee:	ab c0       	rjmp	.+342    	; 0x1d46 <get_fat+0x17c>
    1bf0:	8e 89       	ldd	r24, Y+22	; 0x16
    1bf2:	9f 89       	ldd	r25, Y+23	; 0x17
    1bf4:	a8 8d       	ldd	r26, Y+24	; 0x18
    1bf6:	b9 8d       	ldd	r27, Y+25	; 0x19
    1bf8:	48 17       	cp	r20, r24
    1bfa:	59 07       	cpc	r21, r25
    1bfc:	6a 07       	cpc	r22, r26
    1bfe:	7b 07       	cpc	r23, r27
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <get_fat+0x3a>
    1c02:	a6 c0       	rjmp	.+332    	; 0x1d50 <get_fat+0x186>
    1c04:	88 81       	ld	r24, Y
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <get_fat+0x42>
    1c0a:	4d c0       	rjmp	.+154    	; 0x1ca6 <get_fat+0xdc>
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <get_fat+0x48>
    1c10:	6c c0       	rjmp	.+216    	; 0x1cea <get_fat+0x120>
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <get_fat+0x4e>
    1c16:	a1 c0       	rjmp	.+322    	; 0x1d5a <get_fat+0x190>
    1c18:	8a 01       	movw	r16, r20
    1c1a:	16 95       	lsr	r17
    1c1c:	07 95       	ror	r16
    1c1e:	04 0f       	add	r16, r20
    1c20:	15 1f       	adc	r17, r21
    1c22:	c8 01       	movw	r24, r16
    1c24:	89 2f       	mov	r24, r25
    1c26:	99 27       	eor	r25, r25
    1c28:	86 95       	lsr	r24
    1c2a:	4a a1       	ldd	r20, Y+34	; 0x22
    1c2c:	5b a1       	ldd	r21, Y+35	; 0x23
    1c2e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c30:	7d a1       	ldd	r23, Y+37	; 0x25
    1c32:	48 0f       	add	r20, r24
    1c34:	59 1f       	adc	r21, r25
    1c36:	61 1d       	adc	r22, r1
    1c38:	71 1d       	adc	r23, r1
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1c40:	81 11       	cpse	r24, r1
    1c42:	90 c0       	rjmp	.+288    	; 0x1d64 <get_fat+0x19a>
    1c44:	58 01       	movw	r10, r16
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	a8 1a       	sub	r10, r24
    1c4a:	b8 0a       	sbc	r11, r24
    1c4c:	11 70       	andi	r17, 0x01	; 1
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e0 0f       	add	r30, r16
    1c52:	f1 1f       	adc	r31, r17
    1c54:	12 a9       	ldd	r17, Z+50	; 0x32
    1c56:	c5 01       	movw	r24, r10
    1c58:	89 2f       	mov	r24, r25
    1c5a:	99 27       	eor	r25, r25
    1c5c:	86 95       	lsr	r24
    1c5e:	4a a1       	ldd	r20, Y+34	; 0x22
    1c60:	5b a1       	ldd	r21, Y+35	; 0x23
    1c62:	6c a1       	ldd	r22, Y+36	; 0x24
    1c64:	7d a1       	ldd	r23, Y+37	; 0x25
    1c66:	48 0f       	add	r20, r24
    1c68:	59 1f       	adc	r21, r25
    1c6a:	61 1d       	adc	r22, r1
    1c6c:	71 1d       	adc	r23, r1
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1c74:	81 11       	cpse	r24, r1
    1c76:	7a c0       	rjmp	.+244    	; 0x1d6c <get_fat+0x1a2>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	b8 22       	and	r11, r24
    1c7c:	ca 0d       	add	r28, r10
    1c7e:	db 1d       	adc	r29, r11
    1c80:	8a a9       	ldd	r24, Y+50	; 0x32
    1c82:	61 2f       	mov	r22, r17
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	78 2b       	or	r23, r24
    1c88:	c0 fe       	sbrs	r12, 0
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <get_fat+0xd4>
    1c8c:	72 95       	swap	r23
    1c8e:	62 95       	swap	r22
    1c90:	6f 70       	andi	r22, 0x0F	; 15
    1c92:	67 27       	eor	r22, r23
    1c94:	7f 70       	andi	r23, 0x0F	; 15
    1c96:	67 27       	eor	r22, r23
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	72 c0       	rjmp	.+228    	; 0x1d82 <get_fat+0x1b8>
    1c9e:	7f 70       	andi	r23, 0x0F	; 15
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	6e c0       	rjmp	.+220    	; 0x1d82 <get_fat+0x1b8>
    1ca6:	45 2f       	mov	r20, r21
    1ca8:	56 2f       	mov	r21, r22
    1caa:	67 2f       	mov	r22, r23
    1cac:	77 27       	eor	r23, r23
    1cae:	8a a1       	ldd	r24, Y+34	; 0x22
    1cb0:	9b a1       	ldd	r25, Y+35	; 0x23
    1cb2:	ac a1       	ldd	r26, Y+36	; 0x24
    1cb4:	bd a1       	ldd	r27, Y+37	; 0x25
    1cb6:	48 0f       	add	r20, r24
    1cb8:	59 1f       	adc	r21, r25
    1cba:	6a 1f       	adc	r22, r26
    1cbc:	7b 1f       	adc	r23, r27
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	56 c0       	rjmp	.+172    	; 0x1d74 <get_fat+0x1aa>
    1cc8:	cc 0c       	add	r12, r12
    1cca:	dd 1c       	adc	r13, r13
    1ccc:	ee 1c       	adc	r14, r14
    1cce:	ff 1c       	adc	r15, r15
    1cd0:	e8 94       	clt
    1cd2:	c0 f8       	bld	r12, 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	d8 22       	and	r13, r24
    1cd8:	ee 24       	eor	r14, r14
    1cda:	ff 24       	eor	r15, r15
    1cdc:	cc 0d       	add	r28, r12
    1cde:	dd 1d       	adc	r29, r13
    1ce0:	6a a9       	ldd	r22, Y+50	; 0x32
    1ce2:	7b a9       	ldd	r23, Y+51	; 0x33
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	4c c0       	rjmp	.+152    	; 0x1d82 <get_fat+0x1b8>
    1cea:	8a a1       	ldd	r24, Y+34	; 0x22
    1cec:	9b a1       	ldd	r25, Y+35	; 0x23
    1cee:	ac a1       	ldd	r26, Y+36	; 0x24
    1cf0:	bd a1       	ldd	r27, Y+37	; 0x25
    1cf2:	68 94       	set
    1cf4:	16 f8       	bld	r1, 6
    1cf6:	76 95       	lsr	r23
    1cf8:	67 95       	ror	r22
    1cfa:	57 95       	ror	r21
    1cfc:	47 95       	ror	r20
    1cfe:	16 94       	lsr	r1
    1d00:	d1 f7       	brne	.-12     	; 0x1cf6 <get_fat+0x12c>
    1d02:	48 0f       	add	r20, r24
    1d04:	59 1f       	adc	r21, r25
    1d06:	6a 1f       	adc	r22, r26
    1d08:	7b 1f       	adc	r23, r27
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1d10:	81 11       	cpse	r24, r1
    1d12:	34 c0       	rjmp	.+104    	; 0x1d7c <get_fat+0x1b2>
    1d14:	cc 0c       	add	r12, r12
    1d16:	dd 1c       	adc	r13, r13
    1d18:	ee 1c       	adc	r14, r14
    1d1a:	ff 1c       	adc	r15, r15
    1d1c:	cc 0c       	add	r12, r12
    1d1e:	dd 1c       	adc	r13, r13
    1d20:	ee 1c       	adc	r14, r14
    1d22:	ff 1c       	adc	r15, r15
    1d24:	8c ef       	ldi	r24, 0xFC	; 252
    1d26:	c8 22       	and	r12, r24
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	d8 22       	and	r13, r24
    1d2c:	ee 24       	eor	r14, r14
    1d2e:	ff 24       	eor	r15, r15
    1d30:	fe 01       	movw	r30, r28
    1d32:	ec 0d       	add	r30, r12
    1d34:	fd 1d       	adc	r31, r13
    1d36:	82 a9       	ldd	r24, Z+50	; 0x32
    1d38:	93 a9       	ldd	r25, Z+51	; 0x33
    1d3a:	a4 a9       	ldd	r26, Z+52	; 0x34
    1d3c:	b5 a9       	ldd	r27, Z+53	; 0x35
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	9f 70       	andi	r25, 0x0F	; 15
    1d44:	1e c0       	rjmp	.+60     	; 0x1d82 <get_fat+0x1b8>
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	19 c0       	rjmp	.+50     	; 0x1d82 <get_fat+0x1b8>
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <get_fat+0x1b8>
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <get_fat+0x1b8>
    1d64:	6f ef       	ldi	r22, 0xFF	; 255
    1d66:	7f ef       	ldi	r23, 0xFF	; 255
    1d68:	cb 01       	movw	r24, r22
    1d6a:	0b c0       	rjmp	.+22     	; 0x1d82 <get_fat+0x1b8>
    1d6c:	6f ef       	ldi	r22, 0xFF	; 255
    1d6e:	7f ef       	ldi	r23, 0xFF	; 255
    1d70:	cb 01       	movw	r24, r22
    1d72:	07 c0       	rjmp	.+14     	; 0x1d82 <get_fat+0x1b8>
    1d74:	6f ef       	ldi	r22, 0xFF	; 255
    1d76:	7f ef       	ldi	r23, 0xFF	; 255
    1d78:	cb 01       	movw	r24, r22
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <get_fat+0x1b8>
    1d7c:	6f ef       	ldi	r22, 0xFF	; 255
    1d7e:	7f ef       	ldi	r23, 0xFF	; 255
    1d80:	cb 01       	movw	r24, r22
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	bf 90       	pop	r11
    1d94:	af 90       	pop	r10
    1d96:	08 95       	ret

00001d98 <dir_sdi>:
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	8b 01       	movw	r16, r22
    1db0:	7d 83       	std	Y+5, r23	; 0x05
    1db2:	6c 83       	std	Y+4, r22	; 0x04
    1db4:	ce 80       	ldd	r12, Y+6	; 0x06
    1db6:	df 80       	ldd	r13, Y+7	; 0x07
    1db8:	e8 84       	ldd	r14, Y+8	; 0x08
    1dba:	f9 84       	ldd	r15, Y+9	; 0x09
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	c8 16       	cp	r12, r24
    1dc0:	d1 04       	cpc	r13, r1
    1dc2:	e1 04       	cpc	r14, r1
    1dc4:	f1 04       	cpc	r15, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <dir_sdi+0x32>
    1dc8:	8c c0       	rjmp	.+280    	; 0x1ee2 <dir_sdi+0x14a>
    1dca:	e8 81       	ld	r30, Y
    1dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    1dce:	86 89       	ldd	r24, Z+22	; 0x16
    1dd0:	97 89       	ldd	r25, Z+23	; 0x17
    1dd2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dd4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dd6:	c8 16       	cp	r12, r24
    1dd8:	d9 06       	cpc	r13, r25
    1dda:	ea 06       	cpc	r14, r26
    1ddc:	fb 06       	cpc	r15, r27
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <dir_sdi+0x4a>
    1de0:	82 c0       	rjmp	.+260    	; 0x1ee6 <dir_sdi+0x14e>
    1de2:	c1 14       	cp	r12, r1
    1de4:	d1 04       	cpc	r13, r1
    1de6:	e1 04       	cpc	r14, r1
    1de8:	f1 04       	cpc	r15, r1
    1dea:	c1 f4       	brne	.+48     	; 0x1e1c <dir_sdi+0x84>
    1dec:	80 81       	ld	r24, Z
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	41 f4       	brne	.+16     	; 0x1e02 <dir_sdi+0x6a>
    1df2:	86 a1       	ldd	r24, Z+38	; 0x26
    1df4:	97 a1       	ldd	r25, Z+39	; 0x27
    1df6:	a0 a5       	ldd	r26, Z+40	; 0x28
    1df8:	b1 a5       	ldd	r27, Z+41	; 0x29
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	59 f4       	brne	.+22     	; 0x1e18 <dir_sdi+0x80>
    1e02:	80 85       	ldd	r24, Z+8	; 0x08
    1e04:	91 85       	ldd	r25, Z+9	; 0x09
    1e06:	08 17       	cp	r16, r24
    1e08:	19 07       	cpc	r17, r25
    1e0a:	08 f0       	brcs	.+2      	; 0x1e0e <dir_sdi+0x76>
    1e0c:	6e c0       	rjmp	.+220    	; 0x1eea <dir_sdi+0x152>
    1e0e:	66 a1       	ldd	r22, Z+38	; 0x26
    1e10:	77 a1       	ldd	r23, Z+39	; 0x27
    1e12:	80 a5       	ldd	r24, Z+40	; 0x28
    1e14:	91 a5       	ldd	r25, Z+41	; 0x29
    1e16:	37 c0       	rjmp	.+110    	; 0x1e86 <dir_sdi+0xee>
    1e18:	6c 01       	movw	r12, r24
    1e1a:	7d 01       	movw	r14, r26
    1e1c:	a2 80       	ldd	r10, Z+2	; 0x02
    1e1e:	80 e1       	ldi	r24, 0x10	; 16
    1e20:	a8 9e       	mul	r10, r24
    1e22:	50 01       	movw	r10, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	0a 15       	cp	r16, r10
    1e28:	1b 05       	cpc	r17, r11
    1e2a:	38 f1       	brcs	.+78     	; 0x1e7a <dir_sdi+0xe2>
    1e2c:	b7 01       	movw	r22, r14
    1e2e:	a6 01       	movw	r20, r12
    1e30:	88 81       	ld	r24, Y
    1e32:	99 81       	ldd	r25, Y+1	; 0x01
    1e34:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    1e38:	6b 01       	movw	r12, r22
    1e3a:	7c 01       	movw	r14, r24
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	c8 16       	cp	r12, r24
    1e40:	d8 06       	cpc	r13, r24
    1e42:	e8 06       	cpc	r14, r24
    1e44:	f8 06       	cpc	r15, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <dir_sdi+0xb2>
    1e48:	52 c0       	rjmp	.+164    	; 0x1eee <dir_sdi+0x156>
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	c8 16       	cp	r12, r24
    1e4e:	d1 04       	cpc	r13, r1
    1e50:	e1 04       	cpc	r14, r1
    1e52:	f1 04       	cpc	r15, r1
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <dir_sdi+0xc0>
    1e56:	4d c0       	rjmp	.+154    	; 0x1ef2 <dir_sdi+0x15a>
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5c:	86 89       	ldd	r24, Z+22	; 0x16
    1e5e:	97 89       	ldd	r25, Z+23	; 0x17
    1e60:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e62:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e64:	c8 16       	cp	r12, r24
    1e66:	d9 06       	cpc	r13, r25
    1e68:	ea 06       	cpc	r14, r26
    1e6a:	fb 06       	cpc	r15, r27
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <dir_sdi+0xd8>
    1e6e:	43 c0       	rjmp	.+134    	; 0x1ef6 <dir_sdi+0x15e>
    1e70:	0a 19       	sub	r16, r10
    1e72:	1b 09       	sbc	r17, r11
    1e74:	0a 15       	cp	r16, r10
    1e76:	1b 05       	cpc	r17, r11
    1e78:	c8 f6       	brcc	.-78     	; 0x1e2c <dir_sdi+0x94>
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	a6 01       	movw	r20, r12
    1e7e:	88 81       	ld	r24, Y
    1e80:	99 81       	ldd	r25, Y+1	; 0x01
    1e82:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    1e86:	ca 86       	std	Y+10, r12	; 0x0a
    1e88:	db 86       	std	Y+11, r13	; 0x0b
    1e8a:	ec 86       	std	Y+12, r14	; 0x0c
    1e8c:	fd 86       	std	Y+13, r15	; 0x0d
    1e8e:	61 15       	cp	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	81 05       	cpc	r24, r1
    1e94:	91 05       	cpc	r25, r1
    1e96:	89 f1       	breq	.+98     	; 0x1efa <dir_sdi+0x162>
    1e98:	98 01       	movw	r18, r16
    1e9a:	32 95       	swap	r19
    1e9c:	22 95       	swap	r18
    1e9e:	2f 70       	andi	r18, 0x0F	; 15
    1ea0:	23 27       	eor	r18, r19
    1ea2:	3f 70       	andi	r19, 0x0F	; 15
    1ea4:	23 27       	eor	r18, r19
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	82 0f       	add	r24, r18
    1eac:	93 1f       	adc	r25, r19
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	b1 1d       	adc	r27, r1
    1eb2:	8e 87       	std	Y+14, r24	; 0x0e
    1eb4:	9f 87       	std	Y+15, r25	; 0x0f
    1eb6:	a8 8b       	std	Y+16, r26	; 0x10
    1eb8:	b9 8b       	std	Y+17, r27	; 0x11
    1eba:	0f 70       	andi	r16, 0x0F	; 15
    1ebc:	11 27       	eor	r17, r17
    1ebe:	00 0f       	add	r16, r16
    1ec0:	11 1f       	adc	r17, r17
    1ec2:	02 95       	swap	r16
    1ec4:	12 95       	swap	r17
    1ec6:	10 7f       	andi	r17, 0xF0	; 240
    1ec8:	10 27       	eor	r17, r16
    1eca:	00 7f       	andi	r16, 0xF0	; 240
    1ecc:	10 27       	eor	r17, r16
    1ece:	0e 5c       	subi	r16, 0xCE	; 206
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	88 81       	ld	r24, Y
    1ed4:	99 81       	ldd	r25, Y+1	; 0x01
    1ed6:	80 0f       	add	r24, r16
    1ed8:	91 1f       	adc	r25, r17
    1eda:	9b 8b       	std	Y+19, r25	; 0x13
    1edc:	8a 8b       	std	Y+18, r24	; 0x12
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <dir_sdi+0x164>
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <dir_sdi+0x164>
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	09 c0       	rjmp	.+18     	; 0x1efc <dir_sdi+0x164>
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <dir_sdi+0x164>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <dir_sdi+0x164>
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <dir_sdi+0x164>
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <dir_sdi+0x164>
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	bf 90       	pop	r11
    1f0e:	af 90       	pop	r10
    1f10:	08 95       	ret

00001f12 <put_fat>:
    1f12:	4f 92       	push	r4
    1f14:	5f 92       	push	r5
    1f16:	6f 92       	push	r6
    1f18:	7f 92       	push	r7
    1f1a:	8f 92       	push	r8
    1f1c:	9f 92       	push	r9
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	6a 01       	movw	r12, r20
    1f36:	7b 01       	movw	r14, r22
    1f38:	28 01       	movw	r4, r16
    1f3a:	39 01       	movw	r6, r18
    1f3c:	42 30       	cpi	r20, 0x02	; 2
    1f3e:	51 05       	cpc	r21, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <put_fat+0x36>
    1f46:	d7 c0       	rjmp	.+430    	; 0x20f6 <put_fat+0x1e4>
    1f48:	8e 89       	ldd	r24, Y+22	; 0x16
    1f4a:	9f 89       	ldd	r25, Y+23	; 0x17
    1f4c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f4e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f50:	48 17       	cp	r20, r24
    1f52:	59 07       	cpc	r21, r25
    1f54:	6a 07       	cpc	r22, r26
    1f56:	7b 07       	cpc	r23, r27
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <put_fat+0x4a>
    1f5a:	cf c0       	rjmp	.+414    	; 0x20fa <put_fat+0x1e8>
    1f5c:	88 81       	ld	r24, Y
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <put_fat+0x52>
    1f62:	65 c0       	rjmp	.+202    	; 0x202e <put_fat+0x11c>
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <put_fat+0x58>
    1f68:	89 c0       	rjmp	.+274    	; 0x207c <put_fat+0x16a>
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <put_fat+0x5e>
    1f6e:	c7 c0       	rjmp	.+398    	; 0x20fe <put_fat+0x1ec>
    1f70:	5a 01       	movw	r10, r20
    1f72:	b6 94       	lsr	r11
    1f74:	a7 94       	ror	r10
    1f76:	a4 0e       	add	r10, r20
    1f78:	b5 1e       	adc	r11, r21
    1f7a:	c5 01       	movw	r24, r10
    1f7c:	89 2f       	mov	r24, r25
    1f7e:	99 27       	eor	r25, r25
    1f80:	86 95       	lsr	r24
    1f82:	4a a1       	ldd	r20, Y+34	; 0x22
    1f84:	5b a1       	ldd	r21, Y+35	; 0x23
    1f86:	6c a1       	ldd	r22, Y+36	; 0x24
    1f88:	7d a1       	ldd	r23, Y+37	; 0x25
    1f8a:	48 0f       	add	r20, r24
    1f8c:	59 1f       	adc	r21, r25
    1f8e:	61 1d       	adc	r22, r1
    1f90:	71 1d       	adc	r23, r1
    1f92:	ce 01       	movw	r24, r28
    1f94:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1f98:	18 2f       	mov	r17, r24
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	ce c0       	rjmp	.+412    	; 0x213a <put_fat+0x228>
    1f9e:	45 01       	movw	r8, r10
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	88 1a       	sub	r8, r24
    1fa4:	98 0a       	sbc	r9, r24
    1fa6:	31 e0       	ldi	r19, 0x01	; 1
    1fa8:	b3 22       	and	r11, r19
    1faa:	c0 fe       	sbrs	r12, 0
    1fac:	21 c0       	rjmp	.+66     	; 0x1ff0 <put_fat+0xde>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ea 0d       	add	r30, r10
    1fb2:	fb 1d       	adc	r31, r11
    1fb4:	82 a9       	ldd	r24, Z+50	; 0x32
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	2f 70       	andi	r18, 0x0F	; 15
    1fba:	30 e1       	ldi	r19, 0x10	; 16
    1fbc:	43 9e       	mul	r4, r19
    1fbe:	c0 01       	movw	r24, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	82 2b       	or	r24, r18
    1fc4:	82 ab       	std	Z+50, r24	; 0x32
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	8c 83       	std	Y+4, r24	; 0x04
    1fca:	4a a1       	ldd	r20, Y+34	; 0x22
    1fcc:	5b a1       	ldd	r21, Y+35	; 0x23
    1fce:	6c a1       	ldd	r22, Y+36	; 0x24
    1fd0:	7d a1       	ldd	r23, Y+37	; 0x25
    1fd2:	c4 01       	movw	r24, r8
    1fd4:	89 2f       	mov	r24, r25
    1fd6:	99 27       	eor	r25, r25
    1fd8:	86 95       	lsr	r24
    1fda:	48 0f       	add	r20, r24
    1fdc:	59 1f       	adc	r21, r25
    1fde:	61 1d       	adc	r22, r1
    1fe0:	71 1d       	adc	r23, r1
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <put_fat+0xdc>
    1fec:	8e c0       	rjmp	.+284    	; 0x210a <put_fat+0x1f8>
    1fee:	89 c0       	rjmp	.+274    	; 0x2102 <put_fat+0x1f0>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ea 0d       	add	r30, r10
    1ff4:	fb 1d       	adc	r31, r11
    1ff6:	42 aa       	std	Z+50, r4	; 0x32
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	8c 83       	std	Y+4, r24	; 0x04
    1ffc:	4a a1       	ldd	r20, Y+34	; 0x22
    1ffe:	5b a1       	ldd	r21, Y+35	; 0x23
    2000:	6c a1       	ldd	r22, Y+36	; 0x24
    2002:	7d a1       	ldd	r23, Y+37	; 0x25
    2004:	c4 01       	movw	r24, r8
    2006:	89 2f       	mov	r24, r25
    2008:	99 27       	eor	r25, r25
    200a:	86 95       	lsr	r24
    200c:	48 0f       	add	r20, r24
    200e:	59 1f       	adc	r21, r25
    2010:	61 1d       	adc	r22, r1
    2012:	71 1d       	adc	r23, r1
    2014:	ce 01       	movw	r24, r28
    2016:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    201a:	88 23       	and	r24, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <put_fat+0x10e>
    201e:	80 c0       	rjmp	.+256    	; 0x2120 <put_fat+0x20e>
    2020:	72 c0       	rjmp	.+228    	; 0x2106 <put_fat+0x1f4>
    2022:	ec 0f       	add	r30, r28
    2024:	fd 1f       	adc	r31, r29
    2026:	42 aa       	std	Z+50, r4	; 0x32
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	8c 83       	std	Y+4, r24	; 0x04
    202c:	86 c0       	rjmp	.+268    	; 0x213a <put_fat+0x228>
    202e:	45 2f       	mov	r20, r21
    2030:	56 2f       	mov	r21, r22
    2032:	67 2f       	mov	r22, r23
    2034:	77 27       	eor	r23, r23
    2036:	8a a1       	ldd	r24, Y+34	; 0x22
    2038:	9b a1       	ldd	r25, Y+35	; 0x23
    203a:	ac a1       	ldd	r26, Y+36	; 0x24
    203c:	bd a1       	ldd	r27, Y+37	; 0x25
    203e:	48 0f       	add	r20, r24
    2040:	59 1f       	adc	r21, r25
    2042:	6a 1f       	adc	r22, r26
    2044:	7b 1f       	adc	r23, r27
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    204c:	18 2f       	mov	r17, r24
    204e:	81 11       	cpse	r24, r1
    2050:	74 c0       	rjmp	.+232    	; 0x213a <put_fat+0x228>
    2052:	cc 0c       	add	r12, r12
    2054:	dd 1c       	adc	r13, r13
    2056:	ee 1c       	adc	r14, r14
    2058:	ff 1c       	adc	r15, r15
    205a:	e8 94       	clt
    205c:	c0 f8       	bld	r12, 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	d8 22       	and	r13, r24
    2062:	ee 24       	eor	r14, r14
    2064:	ff 24       	eor	r15, r15
    2066:	32 e3       	ldi	r19, 0x32	; 50
    2068:	c3 0e       	add	r12, r19
    206a:	d1 1c       	adc	r13, r1
    206c:	fe 01       	movw	r30, r28
    206e:	ec 0d       	add	r30, r12
    2070:	fd 1d       	adc	r31, r13
    2072:	51 82       	std	Z+1, r5	; 0x01
    2074:	40 82       	st	Z, r4
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	8c 83       	std	Y+4, r24	; 0x04
    207a:	5f c0       	rjmp	.+190    	; 0x213a <put_fat+0x228>
    207c:	8a a1       	ldd	r24, Y+34	; 0x22
    207e:	9b a1       	ldd	r25, Y+35	; 0x23
    2080:	ac a1       	ldd	r26, Y+36	; 0x24
    2082:	bd a1       	ldd	r27, Y+37	; 0x25
    2084:	68 94       	set
    2086:	16 f8       	bld	r1, 6
    2088:	76 95       	lsr	r23
    208a:	67 95       	ror	r22
    208c:	57 95       	ror	r21
    208e:	47 95       	ror	r20
    2090:	16 94       	lsr	r1
    2092:	d1 f7       	brne	.-12     	; 0x2088 <put_fat+0x176>
    2094:	48 0f       	add	r20, r24
    2096:	59 1f       	adc	r21, r25
    2098:	6a 1f       	adc	r22, r26
    209a:	7b 1f       	adc	r23, r27
    209c:	ce 01       	movw	r24, r28
    209e:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    20a2:	18 2f       	mov	r17, r24
    20a4:	81 11       	cpse	r24, r1
    20a6:	49 c0       	rjmp	.+146    	; 0x213a <put_fat+0x228>
    20a8:	cc 0c       	add	r12, r12
    20aa:	dd 1c       	adc	r13, r13
    20ac:	ee 1c       	adc	r14, r14
    20ae:	ff 1c       	adc	r15, r15
    20b0:	cc 0c       	add	r12, r12
    20b2:	dd 1c       	adc	r13, r13
    20b4:	ee 1c       	adc	r14, r14
    20b6:	ff 1c       	adc	r15, r15
    20b8:	8c ef       	ldi	r24, 0xFC	; 252
    20ba:	c8 22       	and	r12, r24
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	d8 22       	and	r13, r24
    20c0:	ee 24       	eor	r14, r14
    20c2:	ff 24       	eor	r15, r15
    20c4:	32 e3       	ldi	r19, 0x32	; 50
    20c6:	c3 0e       	add	r12, r19
    20c8:	d1 1c       	adc	r13, r1
    20ca:	fe 01       	movw	r30, r28
    20cc:	ec 0d       	add	r30, r12
    20ce:	fd 1d       	adc	r31, r13
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	a2 81       	ldd	r26, Z+2	; 0x02
    20d6:	b3 81       	ldd	r27, Z+3	; 0x03
    20d8:	88 27       	eor	r24, r24
    20da:	99 27       	eor	r25, r25
    20dc:	aa 27       	eor	r26, r26
    20de:	b0 7f       	andi	r27, 0xF0	; 240
    20e0:	48 2a       	or	r4, r24
    20e2:	59 2a       	or	r5, r25
    20e4:	6a 2a       	or	r6, r26
    20e6:	7b 2a       	or	r7, r27
    20e8:	40 82       	st	Z, r4
    20ea:	51 82       	std	Z+1, r5	; 0x01
    20ec:	62 82       	std	Z+2, r6	; 0x02
    20ee:	73 82       	std	Z+3, r7	; 0x03
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	22 c0       	rjmp	.+68     	; 0x213a <put_fat+0x228>
    20f6:	12 e0       	ldi	r17, 0x02	; 2
    20f8:	20 c0       	rjmp	.+64     	; 0x213a <put_fat+0x228>
    20fa:	12 e0       	ldi	r17, 0x02	; 2
    20fc:	1e c0       	rjmp	.+60     	; 0x213a <put_fat+0x228>
    20fe:	12 e0       	ldi	r17, 0x02	; 2
    2100:	1c c0       	rjmp	.+56     	; 0x213a <put_fat+0x228>
    2102:	18 2f       	mov	r17, r24
    2104:	1a c0       	rjmp	.+52     	; 0x213a <put_fat+0x228>
    2106:	18 2f       	mov	r17, r24
    2108:	18 c0       	rjmp	.+48     	; 0x213a <put_fat+0x228>
    210a:	f4 01       	movw	r30, r8
    210c:	f1 70       	andi	r31, 0x01	; 1
    210e:	68 94       	set
    2110:	13 f8       	bld	r1, 3
    2112:	76 94       	lsr	r7
    2114:	67 94       	ror	r6
    2116:	57 94       	ror	r5
    2118:	47 94       	ror	r4
    211a:	16 94       	lsr	r1
    211c:	d1 f7       	brne	.-12     	; 0x2112 <put_fat+0x200>
    211e:	81 cf       	rjmp	.-254    	; 0x2022 <put_fat+0x110>
    2120:	f4 01       	movw	r30, r8
    2122:	f1 70       	andi	r31, 0x01	; 1
    2124:	de 01       	movw	r26, r28
    2126:	ae 0f       	add	r26, r30
    2128:	bf 1f       	adc	r27, r31
    212a:	d2 96       	adiw	r26, 0x32	; 50
    212c:	9c 91       	ld	r25, X
    212e:	90 7f       	andi	r25, 0xF0	; 240
    2130:	85 2d       	mov	r24, r5
    2132:	8f 70       	andi	r24, 0x0F	; 15
    2134:	49 2e       	mov	r4, r25
    2136:	48 2a       	or	r4, r24
    2138:	74 cf       	rjmp	.-280    	; 0x2022 <put_fat+0x110>
    213a:	81 2f       	mov	r24, r17
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	ff 90       	pop	r15
    2146:	ef 90       	pop	r14
    2148:	df 90       	pop	r13
    214a:	cf 90       	pop	r12
    214c:	bf 90       	pop	r11
    214e:	af 90       	pop	r10
    2150:	9f 90       	pop	r9
    2152:	8f 90       	pop	r8
    2154:	7f 90       	pop	r7
    2156:	6f 90       	pop	r6
    2158:	5f 90       	pop	r5
    215a:	4f 90       	pop	r4
    215c:	08 95       	ret

0000215e <create_chain>:
    215e:	2f 92       	push	r2
    2160:	3f 92       	push	r3
    2162:	4f 92       	push	r4
    2164:	5f 92       	push	r5
    2166:	6f 92       	push	r6
    2168:	7f 92       	push	r7
    216a:	8f 92       	push	r8
    216c:	9f 92       	push	r9
    216e:	af 92       	push	r10
    2170:	bf 92       	push	r11
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	ec 01       	movw	r28, r24
    2184:	2a 01       	movw	r4, r20
    2186:	3b 01       	movw	r6, r22
    2188:	41 15       	cp	r20, r1
    218a:	51 05       	cpc	r21, r1
    218c:	61 05       	cpc	r22, r1
    218e:	71 05       	cpc	r23, r1
    2190:	b9 f4       	brne	.+46     	; 0x21c0 <create_chain+0x62>
    2192:	8a 84       	ldd	r8, Y+10	; 0x0a
    2194:	9b 84       	ldd	r9, Y+11	; 0x0b
    2196:	ac 84       	ldd	r10, Y+12	; 0x0c
    2198:	bd 84       	ldd	r11, Y+13	; 0x0d
    219a:	81 14       	cp	r8, r1
    219c:	91 04       	cpc	r9, r1
    219e:	a1 04       	cpc	r10, r1
    21a0:	b1 04       	cpc	r11, r1
    21a2:	61 f1       	breq	.+88     	; 0x21fc <create_chain+0x9e>
    21a4:	8e 89       	ldd	r24, Y+22	; 0x16
    21a6:	9f 89       	ldd	r25, Y+23	; 0x17
    21a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    21aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    21ac:	88 16       	cp	r8, r24
    21ae:	99 06       	cpc	r9, r25
    21b0:	aa 06       	cpc	r10, r26
    21b2:	bb 06       	cpc	r11, r27
    21b4:	38 f1       	brcs	.+78     	; 0x2204 <create_chain+0xa6>
    21b6:	81 2c       	mov	r8, r1
    21b8:	91 2c       	mov	r9, r1
    21ba:	54 01       	movw	r10, r8
    21bc:	83 94       	inc	r8
    21be:	22 c0       	rjmp	.+68     	; 0x2204 <create_chain+0xa6>
    21c0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    21c4:	6b 01       	movw	r12, r22
    21c6:	7c 01       	movw	r14, r24
    21c8:	62 30       	cpi	r22, 0x02	; 2
    21ca:	71 05       	cpc	r23, r1
    21cc:	81 05       	cpc	r24, r1
    21ce:	91 05       	cpc	r25, r1
    21d0:	08 f4       	brcc	.+2      	; 0x21d4 <create_chain+0x76>
    21d2:	99 c0       	rjmp	.+306    	; 0x2306 <create_chain+0x1a8>
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	c8 16       	cp	r12, r24
    21d8:	d8 06       	cpc	r13, r24
    21da:	e8 06       	cpc	r14, r24
    21dc:	f8 06       	cpc	r15, r24
    21de:	09 f4       	brne	.+2      	; 0x21e2 <create_chain+0x84>
    21e0:	97 c0       	rjmp	.+302    	; 0x2310 <create_chain+0x1b2>
    21e2:	8e 89       	ldd	r24, Y+22	; 0x16
    21e4:	9f 89       	ldd	r25, Y+23	; 0x17
    21e6:	a8 8d       	ldd	r26, Y+24	; 0x18
    21e8:	b9 8d       	ldd	r27, Y+25	; 0x19
    21ea:	c8 16       	cp	r12, r24
    21ec:	d9 06       	cpc	r13, r25
    21ee:	ea 06       	cpc	r14, r26
    21f0:	fb 06       	cpc	r15, r27
    21f2:	08 f4       	brcc	.+2      	; 0x21f6 <create_chain+0x98>
    21f4:	92 c0       	rjmp	.+292    	; 0x231a <create_chain+0x1bc>
    21f6:	53 01       	movw	r10, r6
    21f8:	42 01       	movw	r8, r4
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <create_chain+0xa6>
    21fc:	81 2c       	mov	r8, r1
    21fe:	91 2c       	mov	r9, r1
    2200:	54 01       	movw	r10, r8
    2202:	83 94       	inc	r8
    2204:	75 01       	movw	r14, r10
    2206:	64 01       	movw	r12, r8
    2208:	68 94       	set
    220a:	22 24       	eor	r2, r2
    220c:	21 f8       	bld	r2, 1
    220e:	31 2c       	mov	r3, r1
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	2f ef       	ldi	r18, 0xFF	; 255
    2216:	c2 1a       	sub	r12, r18
    2218:	d2 0a       	sbc	r13, r18
    221a:	e2 0a       	sbc	r14, r18
    221c:	f2 0a       	sbc	r15, r18
    221e:	8e 89       	ldd	r24, Y+22	; 0x16
    2220:	9f 89       	ldd	r25, Y+23	; 0x17
    2222:	a8 8d       	ldd	r26, Y+24	; 0x18
    2224:	b9 8d       	ldd	r27, Y+25	; 0x19
    2226:	c8 16       	cp	r12, r24
    2228:	d9 06       	cpc	r13, r25
    222a:	ea 06       	cpc	r14, r26
    222c:	fb 06       	cpc	r15, r27
    222e:	58 f0       	brcs	.+22     	; 0x2246 <create_chain+0xe8>
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	88 16       	cp	r8, r24
    2234:	91 04       	cpc	r9, r1
    2236:	a1 04       	cpc	r10, r1
    2238:	b1 04       	cpc	r11, r1
    223a:	08 f4       	brcc	.+2      	; 0x223e <create_chain+0xe0>
    223c:	73 c0       	rjmp	.+230    	; 0x2324 <create_chain+0x1c6>
    223e:	c2 2c       	mov	r12, r2
    2240:	d3 2c       	mov	r13, r3
    2242:	e0 2e       	mov	r14, r16
    2244:	f1 2e       	mov	r15, r17
    2246:	b7 01       	movw	r22, r14
    2248:	a6 01       	movw	r20, r12
    224a:	ce 01       	movw	r24, r28
    224c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    2250:	61 15       	cp	r22, r1
    2252:	71 05       	cpc	r23, r1
    2254:	81 05       	cpc	r24, r1
    2256:	91 05       	cpc	r25, r1
    2258:	99 f0       	breq	.+38     	; 0x2280 <create_chain+0x122>
    225a:	6f 3f       	cpi	r22, 0xFF	; 255
    225c:	2f ef       	ldi	r18, 0xFF	; 255
    225e:	72 07       	cpc	r23, r18
    2260:	82 07       	cpc	r24, r18
    2262:	92 07       	cpc	r25, r18
    2264:	09 f4       	brne	.+2      	; 0x2268 <create_chain+0x10a>
    2266:	63 c0       	rjmp	.+198    	; 0x232e <create_chain+0x1d0>
    2268:	61 30       	cpi	r22, 0x01	; 1
    226a:	71 05       	cpc	r23, r1
    226c:	81 05       	cpc	r24, r1
    226e:	91 05       	cpc	r25, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <create_chain+0x116>
    2272:	62 c0       	rjmp	.+196    	; 0x2338 <create_chain+0x1da>
    2274:	c8 14       	cp	r12, r8
    2276:	d9 04       	cpc	r13, r9
    2278:	ea 04       	cpc	r14, r10
    227a:	fb 04       	cpc	r15, r11
    227c:	59 f6       	brne	.-106    	; 0x2214 <create_chain+0xb6>
    227e:	61 c0       	rjmp	.+194    	; 0x2342 <create_chain+0x1e4>
    2280:	8c 2c       	mov	r8, r12
    2282:	9d 2c       	mov	r9, r13
    2284:	ae 2c       	mov	r10, r14
    2286:	bf 2c       	mov	r11, r15
    2288:	0f ef       	ldi	r16, 0xFF	; 255
    228a:	1f ef       	ldi	r17, 0xFF	; 255
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	3f e0       	ldi	r19, 0x0F	; 15
    2290:	b7 01       	movw	r22, r14
    2292:	a6 01       	movw	r20, r12
    2294:	ce 01       	movw	r24, r28
    2296:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <put_fat>
    229a:	81 11       	cpse	r24, r1
    229c:	2d c0       	rjmp	.+90     	; 0x22f8 <create_chain+0x19a>
    229e:	41 14       	cp	r4, r1
    22a0:	51 04       	cpc	r5, r1
    22a2:	61 04       	cpc	r6, r1
    22a4:	71 04       	cpc	r7, r1
    22a6:	59 f0       	breq	.+22     	; 0x22be <create_chain+0x160>
    22a8:	0c 2d       	mov	r16, r12
    22aa:	1d 2d       	mov	r17, r13
    22ac:	2e 2d       	mov	r18, r14
    22ae:	3f 2d       	mov	r19, r15
    22b0:	b3 01       	movw	r22, r6
    22b2:	a2 01       	movw	r20, r4
    22b4:	ce 01       	movw	r24, r28
    22b6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <put_fat>
    22ba:	81 11       	cpse	r24, r1
    22bc:	1d c0       	rjmp	.+58     	; 0x22f8 <create_chain+0x19a>
    22be:	8a 86       	std	Y+10, r8	; 0x0a
    22c0:	9b 86       	std	Y+11, r9	; 0x0b
    22c2:	ac 86       	std	Y+12, r10	; 0x0c
    22c4:	bd 86       	std	Y+13, r11	; 0x0d
    22c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ca:	a8 89       	ldd	r26, Y+16	; 0x10
    22cc:	b9 89       	ldd	r27, Y+17	; 0x11
    22ce:	8f 3f       	cpi	r24, 0xFF	; 255
    22d0:	2f ef       	ldi	r18, 0xFF	; 255
    22d2:	92 07       	cpc	r25, r18
    22d4:	a2 07       	cpc	r26, r18
    22d6:	b2 07       	cpc	r27, r18
    22d8:	c9 f1       	breq	.+114    	; 0x234c <create_chain+0x1ee>
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	a1 09       	sbc	r26, r1
    22de:	b1 09       	sbc	r27, r1
    22e0:	8e 87       	std	Y+14, r24	; 0x0e
    22e2:	9f 87       	std	Y+15, r25	; 0x0f
    22e4:	a8 8b       	std	Y+16, r26	; 0x10
    22e6:	b9 8b       	std	Y+17, r27	; 0x11
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	81 60       	ori	r24, 0x01	; 1
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	6c 2d       	mov	r22, r12
    22f0:	7d 2d       	mov	r23, r13
    22f2:	8e 2d       	mov	r24, r14
    22f4:	9f 2d       	mov	r25, r15
    22f6:	33 c0       	rjmp	.+102    	; 0x235e <create_chain+0x200>
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	69 f1       	breq	.+90     	; 0x2356 <create_chain+0x1f8>
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	2c c0       	rjmp	.+88     	; 0x235e <create_chain+0x200>
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	27 c0       	rjmp	.+78     	; 0x235e <create_chain+0x200>
    2310:	6f ef       	ldi	r22, 0xFF	; 255
    2312:	7f ef       	ldi	r23, 0xFF	; 255
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	22 c0       	rjmp	.+68     	; 0x235e <create_chain+0x200>
    231a:	6c 2d       	mov	r22, r12
    231c:	7d 2d       	mov	r23, r13
    231e:	8e 2d       	mov	r24, r14
    2320:	9f 2d       	mov	r25, r15
    2322:	1d c0       	rjmp	.+58     	; 0x235e <create_chain+0x200>
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	18 c0       	rjmp	.+48     	; 0x235e <create_chain+0x200>
    232e:	6f ef       	ldi	r22, 0xFF	; 255
    2330:	7f ef       	ldi	r23, 0xFF	; 255
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	9f ef       	ldi	r25, 0xFF	; 255
    2336:	13 c0       	rjmp	.+38     	; 0x235e <create_chain+0x200>
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e c0       	rjmp	.+28     	; 0x235e <create_chain+0x200>
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	09 c0       	rjmp	.+18     	; 0x235e <create_chain+0x200>
    234c:	6c 2d       	mov	r22, r12
    234e:	7d 2d       	mov	r23, r13
    2350:	8e 2d       	mov	r24, r14
    2352:	9f 2d       	mov	r25, r15
    2354:	04 c0       	rjmp	.+8      	; 0x235e <create_chain+0x200>
    2356:	6f ef       	ldi	r22, 0xFF	; 255
    2358:	7f ef       	ldi	r23, 0xFF	; 255
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	9f ef       	ldi	r25, 0xFF	; 255
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
    236e:	bf 90       	pop	r11
    2370:	af 90       	pop	r10
    2372:	9f 90       	pop	r9
    2374:	8f 90       	pop	r8
    2376:	7f 90       	pop	r7
    2378:	6f 90       	pop	r6
    237a:	5f 90       	pop	r5
    237c:	4f 90       	pop	r4
    237e:	3f 90       	pop	r3
    2380:	2f 90       	pop	r2
    2382:	08 95       	ret

00002384 <dir_next>:
    2384:	7f 92       	push	r7
    2386:	8f 92       	push	r8
    2388:	9f 92       	push	r9
    238a:	af 92       	push	r10
    238c:	bf 92       	push	r11
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	dc 01       	movw	r26, r24
    23a0:	14 96       	adiw	r26, 0x04	; 4
    23a2:	cd 91       	ld	r28, X+
    23a4:	dc 91       	ld	r29, X
    23a6:	15 97       	sbiw	r26, 0x05	; 5
    23a8:	21 96       	adiw	r28, 0x01	; 1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <dir_next+0x2a>
    23ac:	06 c1       	rjmp	.+524    	; 0x25ba <dir_next+0x236>
    23ae:	1e 96       	adiw	r26, 0x0e	; 14
    23b0:	8d 90       	ld	r8, X+
    23b2:	9d 90       	ld	r9, X+
    23b4:	ad 90       	ld	r10, X+
    23b6:	bc 90       	ld	r11, X
    23b8:	51 97       	sbiw	r26, 0x11	; 17
    23ba:	81 14       	cp	r8, r1
    23bc:	91 04       	cpc	r9, r1
    23be:	a1 04       	cpc	r10, r1
    23c0:	b1 04       	cpc	r11, r1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <dir_next+0x42>
    23c4:	fc c0       	rjmp	.+504    	; 0x25be <dir_next+0x23a>
    23c6:	7b 01       	movw	r14, r22
    23c8:	8c 01       	movw	r16, r24
    23ca:	6e 01       	movw	r12, r28
    23cc:	bf e0       	ldi	r27, 0x0F	; 15
    23ce:	cb 22       	and	r12, r27
    23d0:	dd 24       	eor	r13, r13
    23d2:	c1 14       	cp	r12, r1
    23d4:	d1 04       	cpc	r13, r1
    23d6:	09 f0       	breq	.+2      	; 0x23da <dir_next+0x56>
    23d8:	d4 c0       	rjmp	.+424    	; 0x2582 <dir_next+0x1fe>
    23da:	ef ef       	ldi	r30, 0xFF	; 255
    23dc:	8e 1a       	sub	r8, r30
    23de:	9e 0a       	sbc	r9, r30
    23e0:	ae 0a       	sbc	r10, r30
    23e2:	be 0a       	sbc	r11, r30
    23e4:	dc 01       	movw	r26, r24
    23e6:	1e 96       	adiw	r26, 0x0e	; 14
    23e8:	8d 92       	st	X+, r8
    23ea:	9d 92       	st	X+, r9
    23ec:	ad 92       	st	X+, r10
    23ee:	bc 92       	st	X, r11
    23f0:	51 97       	sbiw	r26, 0x11	; 17
    23f2:	1a 96       	adiw	r26, 0x0a	; 10
    23f4:	4d 91       	ld	r20, X+
    23f6:	5d 91       	ld	r21, X+
    23f8:	6d 91       	ld	r22, X+
    23fa:	7c 91       	ld	r23, X
    23fc:	1d 97       	sbiw	r26, 0x0d	; 13
    23fe:	41 15       	cp	r20, r1
    2400:	51 05       	cpc	r21, r1
    2402:	61 05       	cpc	r22, r1
    2404:	71 05       	cpc	r23, r1
    2406:	49 f4       	brne	.+18     	; 0x241a <dir_next+0x96>
    2408:	ed 91       	ld	r30, X+
    240a:	fc 91       	ld	r31, X
    240c:	80 85       	ldd	r24, Z+8	; 0x08
    240e:	91 85       	ldd	r25, Z+9	; 0x09
    2410:	c8 17       	cp	r28, r24
    2412:	d9 07       	cpc	r29, r25
    2414:	08 f0       	brcs	.+2      	; 0x2418 <dir_next+0x94>
    2416:	d5 c0       	rjmp	.+426    	; 0x25c2 <dir_next+0x23e>
    2418:	b4 c0       	rjmp	.+360    	; 0x2582 <dir_next+0x1fe>
    241a:	dc 01       	movw	r26, r24
    241c:	ed 91       	ld	r30, X+
    241e:	fc 91       	ld	r31, X
    2420:	22 81       	ldd	r18, Z+2	; 0x02
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	21 50       	subi	r18, 0x01	; 1
    2426:	31 09       	sbc	r19, r1
    2428:	ce 01       	movw	r24, r28
    242a:	92 95       	swap	r25
    242c:	82 95       	swap	r24
    242e:	8f 70       	andi	r24, 0x0F	; 15
    2430:	89 27       	eor	r24, r25
    2432:	9f 70       	andi	r25, 0x0F	; 15
    2434:	89 27       	eor	r24, r25
    2436:	28 23       	and	r18, r24
    2438:	39 23       	and	r19, r25
    243a:	23 2b       	or	r18, r19
    243c:	09 f0       	breq	.+2      	; 0x2440 <dir_next+0xbc>
    243e:	a1 c0       	rjmp	.+322    	; 0x2582 <dir_next+0x1fe>
    2440:	cf 01       	movw	r24, r30
    2442:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    2446:	4b 01       	movw	r8, r22
    2448:	5c 01       	movw	r10, r24
    244a:	62 30       	cpi	r22, 0x02	; 2
    244c:	71 05       	cpc	r23, r1
    244e:	81 05       	cpc	r24, r1
    2450:	91 05       	cpc	r25, r1
    2452:	08 f4       	brcc	.+2      	; 0x2456 <dir_next+0xd2>
    2454:	b8 c0       	rjmp	.+368    	; 0x25c6 <dir_next+0x242>
    2456:	6f 3f       	cpi	r22, 0xFF	; 255
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	8f 4f       	sbci	r24, 0xFF	; 255
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	09 f4       	brne	.+2      	; 0x2462 <dir_next+0xde>
    2460:	b4 c0       	rjmp	.+360    	; 0x25ca <dir_next+0x246>
    2462:	d8 01       	movw	r26, r16
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	86 89       	ldd	r24, Z+22	; 0x16
    246a:	97 89       	ldd	r25, Z+23	; 0x17
    246c:	a0 8d       	ldd	r26, Z+24	; 0x18
    246e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2470:	88 16       	cp	r8, r24
    2472:	99 06       	cpc	r9, r25
    2474:	aa 06       	cpc	r10, r26
    2476:	bb 06       	cpc	r11, r27
    2478:	08 f4       	brcc	.+2      	; 0x247c <dir_next+0xf8>
    247a:	71 c0       	rjmp	.+226    	; 0x255e <dir_next+0x1da>
    247c:	ef 28       	or	r14, r15
    247e:	09 f4       	brne	.+2      	; 0x2482 <dir_next+0xfe>
    2480:	a6 c0       	rjmp	.+332    	; 0x25ce <dir_next+0x24a>
    2482:	d8 01       	movw	r26, r16
    2484:	1a 96       	adiw	r26, 0x0a	; 10
    2486:	4d 91       	ld	r20, X+
    2488:	5d 91       	ld	r21, X+
    248a:	6d 91       	ld	r22, X+
    248c:	7c 91       	ld	r23, X
    248e:	1d 97       	sbiw	r26, 0x0d	; 13
    2490:	cf 01       	movw	r24, r30
    2492:	0e 94 af 10 	call	0x215e	; 0x215e <create_chain>
    2496:	4b 01       	movw	r8, r22
    2498:	5c 01       	movw	r10, r24
    249a:	61 15       	cp	r22, r1
    249c:	71 05       	cpc	r23, r1
    249e:	81 05       	cpc	r24, r1
    24a0:	91 05       	cpc	r25, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <dir_next+0x122>
    24a4:	96 c0       	rjmp	.+300    	; 0x25d2 <dir_next+0x24e>
    24a6:	61 30       	cpi	r22, 0x01	; 1
    24a8:	71 05       	cpc	r23, r1
    24aa:	81 05       	cpc	r24, r1
    24ac:	91 05       	cpc	r25, r1
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <dir_next+0x12e>
    24b0:	92 c0       	rjmp	.+292    	; 0x25d6 <dir_next+0x252>
    24b2:	6f 3f       	cpi	r22, 0xFF	; 255
    24b4:	7f 4f       	sbci	r23, 0xFF	; 255
    24b6:	8f 4f       	sbci	r24, 0xFF	; 255
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	09 f4       	brne	.+2      	; 0x24be <dir_next+0x13a>
    24bc:	8e c0       	rjmp	.+284    	; 0x25da <dir_next+0x256>
    24be:	d8 01       	movw	r26, r16
    24c0:	8d 91       	ld	r24, X+
    24c2:	9c 91       	ld	r25, X
    24c4:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    24c8:	81 11       	cpse	r24, r1
    24ca:	89 c0       	rjmp	.+274    	; 0x25de <dir_next+0x25a>
    24cc:	f8 01       	movw	r30, r16
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	52 e0       	ldi	r21, 0x02	; 2
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	c2 96       	adiw	r24, 0x32	; 50
    24dc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <mem_set>
    24e0:	d8 01       	movw	r26, r16
    24e2:	ed 90       	ld	r14, X+
    24e4:	fc 90       	ld	r15, X
    24e6:	b5 01       	movw	r22, r10
    24e8:	a4 01       	movw	r20, r8
    24ea:	c7 01       	movw	r24, r14
    24ec:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    24f0:	f7 01       	movw	r30, r14
    24f2:	66 a7       	std	Z+46, r22	; 0x2e
    24f4:	77 a7       	std	Z+47, r23	; 0x2f
    24f6:	80 ab       	std	Z+48, r24	; 0x30
    24f8:	91 ab       	std	Z+49, r25	; 0x31
    24fa:	e1 2c       	mov	r14, r1
    24fc:	f1 2c       	mov	r15, r1
    24fe:	77 24       	eor	r7, r7
    2500:	73 94       	inc	r7
    2502:	19 c0       	rjmp	.+50     	; 0x2536 <dir_next+0x1b2>
    2504:	74 82       	std	Z+4, r7	; 0x04
    2506:	d8 01       	movw	r26, r16
    2508:	8d 91       	ld	r24, X+
    250a:	9c 91       	ld	r25, X
    250c:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    2510:	81 11       	cpse	r24, r1
    2512:	67 c0       	rjmp	.+206    	; 0x25e2 <dir_next+0x25e>
    2514:	d8 01       	movw	r26, r16
    2516:	ed 91       	ld	r30, X+
    2518:	fc 91       	ld	r31, X
    251a:	86 a5       	ldd	r24, Z+46	; 0x2e
    251c:	97 a5       	ldd	r25, Z+47	; 0x2f
    251e:	a0 a9       	ldd	r26, Z+48	; 0x30
    2520:	b1 a9       	ldd	r27, Z+49	; 0x31
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	a1 1d       	adc	r26, r1
    2526:	b1 1d       	adc	r27, r1
    2528:	86 a7       	std	Z+46, r24	; 0x2e
    252a:	97 a7       	std	Z+47, r25	; 0x2f
    252c:	a0 ab       	std	Z+48, r26	; 0x30
    252e:	b1 ab       	std	Z+49, r27	; 0x31
    2530:	bf ef       	ldi	r27, 0xFF	; 255
    2532:	eb 1a       	sub	r14, r27
    2534:	fb 0a       	sbc	r15, r27
    2536:	d8 01       	movw	r26, r16
    2538:	ed 91       	ld	r30, X+
    253a:	fc 91       	ld	r31, X
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	e8 16       	cp	r14, r24
    2542:	f9 06       	cpc	r15, r25
    2544:	f8 f2       	brcs	.-66     	; 0x2504 <dir_next+0x180>
    2546:	86 a5       	ldd	r24, Z+46	; 0x2e
    2548:	97 a5       	ldd	r25, Z+47	; 0x2f
    254a:	a0 a9       	ldd	r26, Z+48	; 0x30
    254c:	b1 a9       	ldd	r27, Z+49	; 0x31
    254e:	8e 19       	sub	r24, r14
    2550:	9f 09       	sbc	r25, r15
    2552:	a1 09       	sbc	r26, r1
    2554:	b1 09       	sbc	r27, r1
    2556:	86 a7       	std	Z+46, r24	; 0x2e
    2558:	97 a7       	std	Z+47, r25	; 0x2f
    255a:	a0 ab       	std	Z+48, r26	; 0x30
    255c:	b1 ab       	std	Z+49, r27	; 0x31
    255e:	f8 01       	movw	r30, r16
    2560:	82 86       	std	Z+10, r8	; 0x0a
    2562:	93 86       	std	Z+11, r9	; 0x0b
    2564:	a4 86       	std	Z+12, r10	; 0x0c
    2566:	b5 86       	std	Z+13, r11	; 0x0d
    2568:	b5 01       	movw	r22, r10
    256a:	a4 01       	movw	r20, r8
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    2574:	d8 01       	movw	r26, r16
    2576:	1e 96       	adiw	r26, 0x0e	; 14
    2578:	6d 93       	st	X+, r22
    257a:	7d 93       	st	X+, r23
    257c:	8d 93       	st	X+, r24
    257e:	9c 93       	st	X, r25
    2580:	51 97       	sbiw	r26, 0x11	; 17
    2582:	f8 01       	movw	r30, r16
    2584:	d5 83       	std	Z+5, r29	; 0x05
    2586:	c4 83       	std	Z+4, r28	; 0x04
    2588:	cc 0c       	add	r12, r12
    258a:	dd 1c       	adc	r13, r13
    258c:	cc 0c       	add	r12, r12
    258e:	dd 1c       	adc	r13, r13
    2590:	cc 0c       	add	r12, r12
    2592:	dd 1c       	adc	r13, r13
    2594:	cc 0c       	add	r12, r12
    2596:	dd 1c       	adc	r13, r13
    2598:	cc 0c       	add	r12, r12
    259a:	dd 1c       	adc	r13, r13
    259c:	f2 e3       	ldi	r31, 0x32	; 50
    259e:	cf 0e       	add	r12, r31
    25a0:	d1 1c       	adc	r13, r1
    25a2:	d8 01       	movw	r26, r16
    25a4:	8d 91       	ld	r24, X+
    25a6:	9c 91       	ld	r25, X
    25a8:	11 97       	sbiw	r26, 0x01	; 1
    25aa:	c8 0e       	add	r12, r24
    25ac:	d9 1e       	adc	r13, r25
    25ae:	53 96       	adiw	r26, 0x13	; 19
    25b0:	dc 92       	st	X, r13
    25b2:	ce 92       	st	-X, r12
    25b4:	52 97       	sbiw	r26, 0x12	; 18
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	15 c0       	rjmp	.+42     	; 0x25e4 <dir_next+0x260>
    25ba:	84 e0       	ldi	r24, 0x04	; 4
    25bc:	13 c0       	rjmp	.+38     	; 0x25e4 <dir_next+0x260>
    25be:	84 e0       	ldi	r24, 0x04	; 4
    25c0:	11 c0       	rjmp	.+34     	; 0x25e4 <dir_next+0x260>
    25c2:	84 e0       	ldi	r24, 0x04	; 4
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <dir_next+0x260>
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	0d c0       	rjmp	.+26     	; 0x25e4 <dir_next+0x260>
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	0b c0       	rjmp	.+22     	; 0x25e4 <dir_next+0x260>
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	09 c0       	rjmp	.+18     	; 0x25e4 <dir_next+0x260>
    25d2:	87 e0       	ldi	r24, 0x07	; 7
    25d4:	07 c0       	rjmp	.+14     	; 0x25e4 <dir_next+0x260>
    25d6:	82 e0       	ldi	r24, 0x02	; 2
    25d8:	05 c0       	rjmp	.+10     	; 0x25e4 <dir_next+0x260>
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <dir_next+0x260>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <dir_next+0x260>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	cf 90       	pop	r12
    25f4:	bf 90       	pop	r11
    25f6:	af 90       	pop	r10
    25f8:	9f 90       	pop	r9
    25fa:	8f 90       	pop	r8
    25fc:	7f 90       	pop	r7
    25fe:	08 95       	ret

00002600 <follow_path>:
    2600:	2f 92       	push	r2
    2602:	3f 92       	push	r3
    2604:	4f 92       	push	r4
    2606:	5f 92       	push	r5
    2608:	6f 92       	push	r6
    260a:	7f 92       	push	r7
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	27 97       	sbiw	r28, 0x07	; 7
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	7c 01       	movw	r14, r24
    2636:	8b 01       	movw	r16, r22
    2638:	db 01       	movw	r26, r22
    263a:	8c 91       	ld	r24, X
    263c:	8f 32       	cpi	r24, 0x2F	; 47
    263e:	11 f0       	breq	.+4      	; 0x2644 <follow_path+0x44>
    2640:	8c 35       	cpi	r24, 0x5C	; 92
    2642:	41 f4       	brne	.+16     	; 0x2654 <follow_path+0x54>
    2644:	0f 5f       	subi	r16, 0xFF	; 255
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	f7 01       	movw	r30, r14
    264a:	16 82       	std	Z+6, r1	; 0x06
    264c:	17 82       	std	Z+7, r1	; 0x07
    264e:	10 86       	std	Z+8, r1	; 0x08
    2650:	11 86       	std	Z+9, r1	; 0x09
    2652:	0c c0       	rjmp	.+24     	; 0x266c <follow_path+0x6c>
    2654:	d7 01       	movw	r26, r14
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	82 89       	ldd	r24, Z+18	; 0x12
    265c:	93 89       	ldd	r25, Z+19	; 0x13
    265e:	a4 89       	ldd	r26, Z+20	; 0x14
    2660:	b5 89       	ldd	r27, Z+21	; 0x15
    2662:	f7 01       	movw	r30, r14
    2664:	86 83       	std	Z+6, r24	; 0x06
    2666:	97 83       	std	Z+7, r25	; 0x07
    2668:	a0 87       	std	Z+8, r26	; 0x08
    266a:	b1 87       	std	Z+9, r27	; 0x09
    266c:	d8 01       	movw	r26, r16
    266e:	8c 91       	ld	r24, X
    2670:	80 32       	cpi	r24, 0x20	; 32
    2672:	48 f4       	brcc	.+18     	; 0x2686 <follow_path+0x86>
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	c7 01       	movw	r24, r14
    267a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <dir_sdi>
    267e:	f7 01       	movw	r30, r14
    2680:	13 8a       	std	Z+19, r1	; 0x13
    2682:	12 8a       	std	Z+18, r1	; 0x12
    2684:	6a c1       	rjmp	.+724    	; 0x295a <follow_path+0x35a>
    2686:	0f 2e       	mov	r0, r31
    2688:	fb e0       	ldi	r31, 0x0B	; 11
    268a:	9f 2e       	mov	r9, r31
    268c:	f0 2d       	mov	r31, r0
    268e:	81 2c       	mov	r8, r1
    2690:	0f 2e       	mov	r0, r31
    2692:	fe e2       	ldi	r31, 0x2E	; 46
    2694:	7f 2e       	mov	r7, r31
    2696:	f0 2d       	mov	r31, r0
    2698:	b1 2c       	mov	r11, r1
    269a:	a1 2c       	mov	r10, r1
    269c:	68 94       	set
    269e:	55 24       	eor	r5, r5
    26a0:	53 f8       	bld	r5, 3
    26a2:	31 2c       	mov	r3, r1
    26a4:	21 2c       	mov	r2, r1
    26a6:	45 2c       	mov	r4, r5
    26a8:	3b 82       	std	Y+3, r3	; 0x03
    26aa:	9c 82       	std	Y+4, r9	; 0x04
    26ac:	8d 82       	std	Y+5, r8	; 0x05
    26ae:	ff 82       	std	Y+7, r15	; 0x07
    26b0:	ee 82       	std	Y+6, r14	; 0x06
    26b2:	7a 82       	std	Y+2, r7	; 0x02
    26b4:	f8 01       	movw	r30, r16
    26b6:	2e 81       	ldd	r18, Y+6	; 0x06
    26b8:	3f 81       	ldd	r19, Y+7	; 0x07
    26ba:	7f 01       	movw	r14, r30
    26bc:	81 91       	ld	r24, Z+
    26be:	8f 32       	cpi	r24, 0x2F	; 47
    26c0:	e1 f3       	breq	.-8      	; 0x26ba <follow_path+0xba>
    26c2:	8c 35       	cpi	r24, 0x5C	; 92
    26c4:	d1 f3       	breq	.-12     	; 0x26ba <follow_path+0xba>
    26c6:	3f 83       	std	Y+7, r19	; 0x07
    26c8:	2e 83       	std	Y+6, r18	; 0x06
    26ca:	d9 01       	movw	r26, r18
    26cc:	54 96       	adiw	r26, 0x14	; 20
    26ce:	cd 90       	ld	r12, X+
    26d0:	dc 90       	ld	r13, X
    26d2:	55 97       	sbiw	r26, 0x15	; 21
    26d4:	49 2d       	mov	r20, r9
    26d6:	58 2d       	mov	r21, r8
    26d8:	60 e2       	ldi	r22, 0x20	; 32
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	c6 01       	movw	r24, r12
    26de:	0e 94 e7 08 	call	0x11ce	; 0x11ce <mem_set>
    26e2:	f7 01       	movw	r30, r14
    26e4:	80 81       	ld	r24, Z
    26e6:	8e 32       	cpi	r24, 0x2E	; 46
    26e8:	49 f0       	breq	.+18     	; 0x26fc <follow_path+0xfc>
    26ea:	d7 01       	movw	r26, r14
    26ec:	6b 2d       	mov	r22, r11
    26ee:	7a 2d       	mov	r23, r10
    26f0:	8b 2d       	mov	r24, r11
    26f2:	9a 2d       	mov	r25, r10
    26f4:	65 2c       	mov	r6, r5
    26f6:	73 2c       	mov	r7, r3
    26f8:	29 82       	std	Y+1, r2	; 0x01
    26fa:	24 c0       	rjmp	.+72     	; 0x2744 <follow_path+0x144>
    26fc:	ea 81       	ldd	r30, Y+2	; 0x02
    26fe:	d6 01       	movw	r26, r12
    2700:	ec 93       	st	X, r30
    2702:	d7 01       	movw	r26, r14
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 91       	ld	r25, X
    2708:	11 97       	sbiw	r26, 0x01	; 1
    270a:	9e 32       	cpi	r25, 0x2E	; 46
    270c:	59 f4       	brne	.+22     	; 0x2724 <follow_path+0x124>
    270e:	2e 2f       	mov	r18, r30
    2710:	f6 01       	movw	r30, r12
    2712:	21 83       	std	Z+1, r18	; 0x01
    2714:	12 96       	adiw	r26, 0x02	; 2
    2716:	9c 91       	ld	r25, X
    2718:	9e 32       	cpi	r25, 0x2E	; 46
    271a:	09 f4       	brne	.+2      	; 0x271e <follow_path+0x11e>
    271c:	74 c0       	rjmp	.+232    	; 0x2806 <follow_path+0x206>
    271e:	03 e0       	ldi	r16, 0x03	; 3
    2720:	10 e0       	ldi	r17, 0x00	; 0
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <follow_path+0x128>
    2724:	02 e0       	ldi	r16, 0x02	; 2
    2726:	10 e0       	ldi	r17, 0x00	; 0
    2728:	9f 32       	cpi	r25, 0x2F	; 47
    272a:	09 f4       	brne	.+2      	; 0x272e <follow_path+0x12e>
    272c:	d0 c0       	rjmp	.+416    	; 0x28ce <follow_path+0x2ce>
    272e:	9c 35       	cpi	r25, 0x5C	; 92
    2730:	09 f4       	brne	.+2      	; 0x2734 <follow_path+0x134>
    2732:	cd c0       	rjmp	.+410    	; 0x28ce <follow_path+0x2ce>
    2734:	91 32       	cpi	r25, 0x21	; 33
    2736:	08 f0       	brcs	.+2      	; 0x273a <follow_path+0x13a>
    2738:	e8 c0       	rjmp	.+464    	; 0x290a <follow_path+0x30a>
    273a:	cd c0       	rjmp	.+410    	; 0x28d6 <follow_path+0x2d6>
    273c:	d6 01       	movw	r26, r12
    273e:	1b 96       	adiw	r26, 0x0b	; 11
    2740:	8c 93       	st	X, r24
    2742:	e5 c0       	rjmp	.+458    	; 0x290e <follow_path+0x30e>
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	1d 91       	ld	r17, X+
    2748:	11 32       	cpi	r17, 0x21	; 33
    274a:	08 f4       	brcc	.+2      	; 0x274e <follow_path+0x14e>
    274c:	d9 c0       	rjmp	.+434    	; 0x2900 <follow_path+0x300>
    274e:	1f 32       	cpi	r17, 0x2F	; 47
    2750:	09 f4       	brne	.+2      	; 0x2754 <follow_path+0x154>
    2752:	d1 c0       	rjmp	.+418    	; 0x28f6 <follow_path+0x2f6>
    2754:	1c 35       	cpi	r17, 0x5C	; 92
    2756:	09 f4       	brne	.+2      	; 0x275a <follow_path+0x15a>
    2758:	ce c0       	rjmp	.+412    	; 0x28f6 <follow_path+0x2f6>
    275a:	1e 32       	cpi	r17, 0x2E	; 46
    275c:	09 f4       	brne	.+2      	; 0x2760 <follow_path+0x160>
    275e:	bf c0       	rjmp	.+382    	; 0x28de <follow_path+0x2de>
    2760:	66 15       	cp	r22, r6
    2762:	77 05       	cpc	r23, r7
    2764:	08 f0       	brcs	.+2      	; 0x2768 <follow_path+0x168>
    2766:	d1 c0       	rjmp	.+418    	; 0x290a <follow_path+0x30a>
    2768:	09 c0       	rjmp	.+18     	; 0x277c <follow_path+0x17c>
    276a:	e9 81       	ldd	r30, Y+1	; 0x01
    276c:	ee 0f       	add	r30, r30
    276e:	ee 0f       	add	r30, r30
    2770:	e9 83       	std	Y+1, r30	; 0x01
    2772:	64 2d       	mov	r22, r4
    2774:	7b 81       	ldd	r23, Y+3	; 0x03
    2776:	6c 80       	ldd	r6, Y+4	; 0x04
    2778:	7d 80       	ldd	r7, Y+5	; 0x05
    277a:	e4 cf       	rjmp	.-56     	; 0x2744 <follow_path+0x144>
    277c:	11 23       	and	r17, r17
    277e:	0c f4       	brge	.+2      	; 0x2782 <follow_path+0x182>
    2780:	c4 c0       	rjmp	.+392    	; 0x290a <follow_path+0x30a>
    2782:	41 2f       	mov	r20, r17
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	42 32       	cpi	r20, 0x22	; 34
    2788:	51 05       	cpc	r21, r1
    278a:	e9 f1       	breq	.+122    	; 0x2806 <follow_path+0x206>
    278c:	e7 e1       	ldi	r30, 0x17	; 23
    278e:	f2 e0       	ldi	r31, 0x02	; 2
    2790:	21 91       	ld	r18, Z+
    2792:	22 23       	and	r18, r18
    2794:	09 f4       	brne	.+2      	; 0x2798 <follow_path+0x198>
    2796:	a9 c0       	rjmp	.+338    	; 0x28ea <follow_path+0x2ea>
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	42 17       	cp	r20, r18
    279c:	53 07       	cpc	r21, r19
    279e:	c1 f7       	brne	.-16     	; 0x2790 <follow_path+0x190>
    27a0:	32 c0       	rjmp	.+100    	; 0x2806 <follow_path+0x206>
    27a2:	39 81       	ldd	r19, Y+1	; 0x01
    27a4:	32 60       	ori	r19, 0x02	; 2
    27a6:	39 83       	std	Y+1, r19	; 0x01
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <follow_path+0x1ba>
    27aa:	2f e9       	ldi	r18, 0x9F	; 159
    27ac:	21 0f       	add	r18, r17
    27ae:	2a 31       	cpi	r18, 0x1A	; 26
    27b0:	20 f4       	brcc	.+8      	; 0x27ba <follow_path+0x1ba>
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	e1 60       	ori	r30, 0x01	; 1
    27b6:	e9 83       	std	Y+1, r30	; 0x01
    27b8:	10 52       	subi	r17, 0x20	; 32
    27ba:	f6 01       	movw	r30, r12
    27bc:	e6 0f       	add	r30, r22
    27be:	f7 1f       	adc	r31, r23
    27c0:	10 83       	st	Z, r17
    27c2:	6f 5f       	subi	r22, 0xFF	; 255
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	be cf       	rjmp	.-132    	; 0x2744 <follow_path+0x144>
    27c8:	67 2b       	or	r22, r23
    27ca:	09 f4       	brne	.+2      	; 0x27ce <follow_path+0x1ce>
    27cc:	9e c0       	rjmp	.+316    	; 0x290a <follow_path+0x30a>
    27ce:	d6 01       	movw	r26, r12
    27d0:	9c 91       	ld	r25, X
    27d2:	95 3e       	cpi	r25, 0xE5	; 229
    27d4:	11 f4       	brne	.+4      	; 0x27da <follow_path+0x1da>
    27d6:	e5 e0       	ldi	r30, 0x05	; 5
    27d8:	ec 93       	st	X, r30
    27da:	f8 e0       	ldi	r31, 0x08	; 8
    27dc:	6f 16       	cp	r6, r31
    27de:	71 04       	cpc	r7, r1
    27e0:	21 f4       	brne	.+8      	; 0x27ea <follow_path+0x1ea>
    27e2:	29 81       	ldd	r18, Y+1	; 0x01
    27e4:	22 0f       	add	r18, r18
    27e6:	22 0f       	add	r18, r18
    27e8:	29 83       	std	Y+1, r18	; 0x01
    27ea:	99 81       	ldd	r25, Y+1	; 0x01
    27ec:	93 70       	andi	r25, 0x03	; 3
    27ee:	91 30       	cpi	r25, 0x01	; 1
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <follow_path+0x1f4>
    27f2:	80 61       	ori	r24, 0x10	; 16
    27f4:	99 81       	ldd	r25, Y+1	; 0x01
    27f6:	9c 70       	andi	r25, 0x0C	; 12
    27f8:	94 30       	cpi	r25, 0x04	; 4
    27fa:	09 f4       	brne	.+2      	; 0x27fe <follow_path+0x1fe>
    27fc:	88 60       	ori	r24, 0x08	; 8
    27fe:	d6 01       	movw	r26, r12
    2800:	1b 96       	adiw	r26, 0x0b	; 11
    2802:	8c 93       	st	X, r24
    2804:	84 c0       	rjmp	.+264    	; 0x290e <follow_path+0x30e>
    2806:	86 e0       	ldi	r24, 0x06	; 6
    2808:	a8 c0       	rjmp	.+336    	; 0x295a <follow_path+0x35a>
    280a:	ee 80       	ldd	r14, Y+6	; 0x06
    280c:	ff 80       	ldd	r15, Y+7	; 0x07
    280e:	f7 01       	movw	r30, r14
    2810:	46 85       	ldd	r20, Z+14	; 0x0e
    2812:	57 85       	ldd	r21, Z+15	; 0x0f
    2814:	60 89       	ldd	r22, Z+16	; 0x10
    2816:	71 89       	ldd	r23, Z+17	; 0x11
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    2820:	81 11       	cpse	r24, r1
    2822:	7f c0       	rjmp	.+254    	; 0x2922 <follow_path+0x322>
    2824:	d7 01       	movw	r26, r14
    2826:	52 96       	adiw	r26, 0x12	; 18
    2828:	6d 91       	ld	r22, X+
    282a:	7c 91       	ld	r23, X
    282c:	53 97       	sbiw	r26, 0x13	; 19
    282e:	fb 01       	movw	r30, r22
    2830:	90 81       	ld	r25, Z
    2832:	99 23       	and	r25, r25
    2834:	09 f4       	brne	.+2      	; 0x2838 <follow_path+0x238>
    2836:	82 c0       	rjmp	.+260    	; 0x293c <follow_path+0x33c>
    2838:	93 85       	ldd	r25, Z+11	; 0x0b
    283a:	93 fd       	sbrc	r25, 3
    283c:	13 c0       	rjmp	.+38     	; 0x2864 <follow_path+0x264>
    283e:	54 96       	adiw	r26, 0x14	; 20
    2840:	4d 91       	ld	r20, X+
    2842:	5c 91       	ld	r21, X
    2844:	55 97       	sbiw	r26, 0x15	; 21
    2846:	da 01       	movw	r26, r20
    2848:	9b 01       	movw	r18, r22
    284a:	25 5f       	subi	r18, 0xF5	; 245
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	67 01       	movw	r12, r14
    2850:	04 c0       	rjmp	.+8      	; 0x285a <follow_path+0x25a>
    2852:	e2 17       	cp	r30, r18
    2854:	f3 07       	cpc	r31, r19
    2856:	09 f4       	brne	.+2      	; 0x285a <follow_path+0x25a>
    2858:	7a c0       	rjmp	.+244    	; 0x294e <follow_path+0x34e>
    285a:	f1 90       	ld	r15, Z+
    285c:	9d 91       	ld	r25, X+
    285e:	f9 16       	cp	r15, r25
    2860:	c1 f3       	breq	.-16     	; 0x2852 <follow_path+0x252>
    2862:	76 01       	movw	r14, r12
    2864:	6b 2d       	mov	r22, r11
    2866:	7a 2d       	mov	r23, r10
    2868:	c7 01       	movw	r24, r14
    286a:	0e 94 c2 11 	call	0x2384	; 0x2384 <dir_next>
    286e:	88 23       	and	r24, r24
    2870:	71 f2       	breq	.-100    	; 0x280e <follow_path+0x20e>
    2872:	ff 82       	std	Y+7, r15	; 0x07
    2874:	ee 82       	std	Y+6, r14	; 0x06
    2876:	57 c0       	rjmp	.+174    	; 0x2926 <follow_path+0x326>
    2878:	95 ff       	sbrs	r25, 5
    287a:	10 c0       	rjmp	.+32     	; 0x289c <follow_path+0x29c>
    287c:	ae 81       	ldd	r26, Y+6	; 0x06
    287e:	bf 81       	ldd	r27, Y+7	; 0x07
    2880:	16 96       	adiw	r26, 0x06	; 6
    2882:	1d 92       	st	X+, r1
    2884:	1d 92       	st	X+, r1
    2886:	1d 92       	st	X+, r1
    2888:	1c 92       	st	X, r1
    288a:	19 97       	sbiw	r26, 0x09	; 9
    288c:	53 96       	adiw	r26, 0x13	; 19
    288e:	1c 92       	st	X, r1
    2890:	1e 92       	st	-X, r1
    2892:	52 97       	sbiw	r26, 0x12	; 18
    2894:	92 ff       	sbrs	r25, 2
    2896:	0e cf       	rjmp	.-484    	; 0x26b4 <follow_path+0xb4>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	5f c0       	rjmp	.+190    	; 0x295a <follow_path+0x35a>
    289c:	92 fd       	sbrc	r25, 2
    289e:	13 c0       	rjmp	.+38     	; 0x28c6 <follow_path+0x2c6>
    28a0:	85 e0       	ldi	r24, 0x05	; 5
    28a2:	5b c0       	rjmp	.+182    	; 0x295a <follow_path+0x35a>
    28a4:	fb 01       	movw	r30, r22
    28a6:	83 85       	ldd	r24, Z+11	; 0x0b
    28a8:	84 ff       	sbrs	r24, 4
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <follow_path+0x2ca>
    28ac:	ae 81       	ldd	r26, Y+6	; 0x06
    28ae:	bf 81       	ldd	r27, Y+7	; 0x07
    28b0:	8d 91       	ld	r24, X+
    28b2:	9c 91       	ld	r25, X
    28b4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ld_clust>
    28b8:	ee 81       	ldd	r30, Y+6	; 0x06
    28ba:	ff 81       	ldd	r31, Y+7	; 0x07
    28bc:	66 83       	std	Z+6, r22	; 0x06
    28be:	77 83       	std	Z+7, r23	; 0x07
    28c0:	80 87       	std	Z+8, r24	; 0x08
    28c2:	91 87       	std	Z+9, r25	; 0x09
    28c4:	f7 ce       	rjmp	.-530    	; 0x26b4 <follow_path+0xb4>
    28c6:	84 e0       	ldi	r24, 0x04	; 4
    28c8:	48 c0       	rjmp	.+144    	; 0x295a <follow_path+0x35a>
    28ca:	85 e0       	ldi	r24, 0x05	; 5
    28cc:	46 c0       	rjmp	.+140    	; 0x295a <follow_path+0x35a>
    28ce:	0e 0d       	add	r16, r14
    28d0:	1f 1d       	adc	r17, r15
    28d2:	80 e2       	ldi	r24, 0x20	; 32
    28d4:	33 cf       	rjmp	.-410    	; 0x273c <follow_path+0x13c>
    28d6:	0e 0d       	add	r16, r14
    28d8:	1f 1d       	adc	r17, r15
    28da:	84 e2       	ldi	r24, 0x24	; 36
    28dc:	2f cf       	rjmp	.-418    	; 0x273c <follow_path+0x13c>
    28de:	f8 e0       	ldi	r31, 0x08	; 8
    28e0:	6f 16       	cp	r6, r31
    28e2:	71 04       	cpc	r7, r1
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <follow_path+0x2e8>
    28e6:	41 cf       	rjmp	.-382    	; 0x276a <follow_path+0x16a>
    28e8:	8e cf       	rjmp	.-228    	; 0x2806 <follow_path+0x206>
    28ea:	2f eb       	ldi	r18, 0xBF	; 191
    28ec:	21 0f       	add	r18, r17
    28ee:	2a 31       	cpi	r18, 0x1A	; 26
    28f0:	08 f4       	brcc	.+2      	; 0x28f4 <follow_path+0x2f4>
    28f2:	57 cf       	rjmp	.-338    	; 0x27a2 <follow_path+0x1a2>
    28f4:	5a cf       	rjmp	.-332    	; 0x27aa <follow_path+0x1aa>
    28f6:	87 01       	movw	r16, r14
    28f8:	08 0f       	add	r16, r24
    28fa:	19 1f       	adc	r17, r25
    28fc:	82 2d       	mov	r24, r2
    28fe:	64 cf       	rjmp	.-312    	; 0x27c8 <follow_path+0x1c8>
    2900:	87 01       	movw	r16, r14
    2902:	08 0f       	add	r16, r24
    2904:	19 1f       	adc	r17, r25
    2906:	84 e0       	ldi	r24, 0x04	; 4
    2908:	5f cf       	rjmp	.-322    	; 0x27c8 <follow_path+0x1c8>
    290a:	86 e0       	ldi	r24, 0x06	; 6
    290c:	26 c0       	rjmp	.+76     	; 0x295a <follow_path+0x35a>
    290e:	6b 2d       	mov	r22, r11
    2910:	7a 2d       	mov	r23, r10
    2912:	8e 81       	ldd	r24, Y+6	; 0x06
    2914:	9f 81       	ldd	r25, Y+7	; 0x07
    2916:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <dir_sdi>
    291a:	88 23       	and	r24, r24
    291c:	09 f4       	brne	.+2      	; 0x2920 <follow_path+0x320>
    291e:	75 cf       	rjmp	.-278    	; 0x280a <follow_path+0x20a>
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <follow_path+0x326>
    2922:	ff 82       	std	Y+7, r15	; 0x07
    2924:	ee 82       	std	Y+6, r14	; 0x06
    2926:	ae 81       	ldd	r26, Y+6	; 0x06
    2928:	bf 81       	ldd	r27, Y+7	; 0x07
    292a:	54 96       	adiw	r26, 0x14	; 20
    292c:	ed 91       	ld	r30, X+
    292e:	fc 91       	ld	r31, X
    2930:	55 97       	sbiw	r26, 0x15	; 21
    2932:	93 85       	ldd	r25, Z+11	; 0x0b
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	09 f4       	brne	.+2      	; 0x293a <follow_path+0x33a>
    2938:	9f cf       	rjmp	.-194    	; 0x2878 <follow_path+0x278>
    293a:	0f c0       	rjmp	.+30     	; 0x295a <follow_path+0x35a>
    293c:	ff 82       	std	Y+7, r15	; 0x07
    293e:	ee 82       	std	Y+6, r14	; 0x06
    2940:	d7 01       	movw	r26, r14
    2942:	54 96       	adiw	r26, 0x14	; 20
    2944:	ed 91       	ld	r30, X+
    2946:	fc 91       	ld	r31, X
    2948:	55 97       	sbiw	r26, 0x15	; 21
    294a:	93 85       	ldd	r25, Z+11	; 0x0b
    294c:	95 cf       	rjmp	.-214    	; 0x2878 <follow_path+0x278>
    294e:	df 82       	std	Y+7, r13	; 0x07
    2950:	ce 82       	std	Y+6, r12	; 0x06
    2952:	fa 01       	movw	r30, r20
    2954:	93 85       	ldd	r25, Z+11	; 0x0b
    2956:	92 ff       	sbrs	r25, 2
    2958:	a5 cf       	rjmp	.-182    	; 0x28a4 <follow_path+0x2a4>
    295a:	27 96       	adiw	r28, 0x07	; 7
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	df 90       	pop	r13
    2974:	cf 90       	pop	r12
    2976:	bf 90       	pop	r11
    2978:	af 90       	pop	r10
    297a:	9f 90       	pop	r9
    297c:	8f 90       	pop	r8
    297e:	7f 90       	pop	r7
    2980:	6f 90       	pop	r6
    2982:	5f 90       	pop	r5
    2984:	4f 90       	pop	r4
    2986:	3f 90       	pop	r3
    2988:	2f 90       	pop	r2
    298a:	08 95       	ret

0000298c <dir_alloc>:
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	ec 01       	movw	r28, r24
    299e:	7b 01       	movw	r14, r22
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <dir_sdi>
    29a8:	81 11       	cpse	r24, r1
    29aa:	24 c0       	rjmp	.+72     	; 0x29f4 <dir_alloc+0x68>
    29ac:	00 e0       	ldi	r16, 0x00	; 0
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	c1 2c       	mov	r12, r1
    29b2:	d1 2c       	mov	r13, r1
    29b4:	4e 85       	ldd	r20, Y+14	; 0x0e
    29b6:	5f 85       	ldd	r21, Y+15	; 0x0f
    29b8:	68 89       	ldd	r22, Y+16	; 0x10
    29ba:	79 89       	ldd	r23, Y+17	; 0x11
    29bc:	88 81       	ld	r24, Y
    29be:	99 81       	ldd	r25, Y+1	; 0x01
    29c0:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    29c4:	81 11       	cpse	r24, r1
    29c6:	16 c0       	rjmp	.+44     	; 0x29f4 <dir_alloc+0x68>
    29c8:	ea 89       	ldd	r30, Y+18	; 0x12
    29ca:	fb 89       	ldd	r31, Y+19	; 0x13
    29cc:	90 81       	ld	r25, Z
    29ce:	95 3e       	cpi	r25, 0xE5	; 229
    29d0:	11 f0       	breq	.+4      	; 0x29d6 <dir_alloc+0x4a>
    29d2:	91 11       	cpse	r25, r1
    29d4:	06 c0       	rjmp	.+12     	; 0x29e2 <dir_alloc+0x56>
    29d6:	0f 5f       	subi	r16, 0xFF	; 255
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	0e 15       	cp	r16, r14
    29dc:	1f 05       	cpc	r17, r15
    29de:	19 f4       	brne	.+6      	; 0x29e6 <dir_alloc+0x5a>
    29e0:	0c c0       	rjmp	.+24     	; 0x29fa <dir_alloc+0x6e>
    29e2:	0c 2d       	mov	r16, r12
    29e4:	1d 2d       	mov	r17, r13
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	ce 01       	movw	r24, r28
    29ec:	0e 94 c2 11 	call	0x2384	; 0x2384 <dir_next>
    29f0:	88 23       	and	r24, r24
    29f2:	01 f3       	breq	.-64     	; 0x29b4 <dir_alloc+0x28>
    29f4:	84 30       	cpi	r24, 0x04	; 4
    29f6:	09 f4       	brne	.+2      	; 0x29fa <dir_alloc+0x6e>
    29f8:	87 e0       	ldi	r24, 0x07	; 7
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	df 90       	pop	r13
    2a08:	cf 90       	pop	r12
    2a0a:	08 95       	ret

00002a0c <dir_register>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	8c 01       	movw	r16, r24
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	0e 94 c6 14 	call	0x298c	; 0x298c <dir_alloc>
    2a1c:	c8 2f       	mov	r28, r24
    2a1e:	81 11       	cpse	r24, r1
    2a20:	29 c0       	rjmp	.+82     	; 0x2a74 <dir_register+0x68>
    2a22:	d8 01       	movw	r26, r16
    2a24:	1e 96       	adiw	r26, 0x0e	; 14
    2a26:	4d 91       	ld	r20, X+
    2a28:	5d 91       	ld	r21, X+
    2a2a:	6d 91       	ld	r22, X+
    2a2c:	7c 91       	ld	r23, X
    2a2e:	51 97       	sbiw	r26, 0x11	; 17
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    2a38:	c8 2f       	mov	r28, r24
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	1b c0       	rjmp	.+54     	; 0x2a74 <dir_register+0x68>
    2a3e:	40 e2       	ldi	r20, 0x20	; 32
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	f8 01       	movw	r30, r16
    2a48:	82 89       	ldd	r24, Z+18	; 0x12
    2a4a:	93 89       	ldd	r25, Z+19	; 0x13
    2a4c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <mem_set>
    2a50:	d8 01       	movw	r26, r16
    2a52:	54 96       	adiw	r26, 0x14	; 20
    2a54:	6d 91       	ld	r22, X+
    2a56:	7c 91       	ld	r23, X
    2a58:	55 97       	sbiw	r26, 0x15	; 21
    2a5a:	4b e0       	ldi	r20, 0x0B	; 11
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	52 96       	adiw	r26, 0x12	; 18
    2a60:	8d 91       	ld	r24, X+
    2a62:	9c 91       	ld	r25, X
    2a64:	53 97       	sbiw	r26, 0x13	; 19
    2a66:	0e 94 bb 08 	call	0x1176	; 0x1176 <mem_cpy>
    2a6a:	d8 01       	movw	r26, r16
    2a6c:	ed 91       	ld	r30, X+
    2a6e:	fc 91       	ld	r31, X
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	84 83       	std	Z+4, r24	; 0x04
    2a74:	8c 2f       	mov	r24, r28
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <remove_chain>:
    2a7e:	8f 92       	push	r8
    2a80:	9f 92       	push	r9
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	ec 01       	movw	r28, r24
    2a98:	6a 01       	movw	r12, r20
    2a9a:	7b 01       	movw	r14, r22
    2a9c:	42 30       	cpi	r20, 0x02	; 2
    2a9e:	51 05       	cpc	r21, r1
    2aa0:	61 05       	cpc	r22, r1
    2aa2:	71 05       	cpc	r23, r1
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <remove_chain+0x2a>
    2aa6:	4e c0       	rjmp	.+156    	; 0x2b44 <remove_chain+0xc6>
    2aa8:	8e 89       	ldd	r24, Y+22	; 0x16
    2aaa:	9f 89       	ldd	r25, Y+23	; 0x17
    2aac:	a8 8d       	ldd	r26, Y+24	; 0x18
    2aae:	b9 8d       	ldd	r27, Y+25	; 0x19
    2ab0:	48 17       	cp	r20, r24
    2ab2:	59 07       	cpc	r21, r25
    2ab4:	6a 07       	cpc	r22, r26
    2ab6:	7b 07       	cpc	r23, r27
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <remove_chain+0x3e>
    2aba:	46 c0       	rjmp	.+140    	; 0x2b48 <remove_chain+0xca>
    2abc:	37 c0       	rjmp	.+110    	; 0x2b2c <remove_chain+0xae>
    2abe:	b7 01       	movw	r22, r14
    2ac0:	a6 01       	movw	r20, r12
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    2ac8:	4b 01       	movw	r8, r22
    2aca:	5c 01       	movw	r10, r24
    2acc:	67 2b       	or	r22, r23
    2ace:	68 2b       	or	r22, r24
    2ad0:	69 2b       	or	r22, r25
    2ad2:	e1 f1       	breq	.+120    	; 0x2b4c <remove_chain+0xce>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	88 16       	cp	r8, r24
    2ad8:	91 04       	cpc	r9, r1
    2ada:	a1 04       	cpc	r10, r1
    2adc:	b1 04       	cpc	r11, r1
    2ade:	c1 f1       	breq	.+112    	; 0x2b50 <remove_chain+0xd2>
    2ae0:	2f ef       	ldi	r18, 0xFF	; 255
    2ae2:	82 16       	cp	r8, r18
    2ae4:	92 06       	cpc	r9, r18
    2ae6:	a2 06       	cpc	r10, r18
    2ae8:	b2 06       	cpc	r11, r18
    2aea:	a1 f1       	breq	.+104    	; 0x2b54 <remove_chain+0xd6>
    2aec:	00 e0       	ldi	r16, 0x00	; 0
    2aee:	10 e0       	ldi	r17, 0x00	; 0
    2af0:	98 01       	movw	r18, r16
    2af2:	b7 01       	movw	r22, r14
    2af4:	a6 01       	movw	r20, r12
    2af6:	ce 01       	movw	r24, r28
    2af8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <put_fat>
    2afc:	81 11       	cpse	r24, r1
    2afe:	2b c0       	rjmp	.+86     	; 0x2b56 <remove_chain+0xd8>
    2b00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b04:	a8 89       	ldd	r26, Y+16	; 0x10
    2b06:	b9 89       	ldd	r27, Y+17	; 0x11
    2b08:	8f 3f       	cpi	r24, 0xFF	; 255
    2b0a:	2f ef       	ldi	r18, 0xFF	; 255
    2b0c:	92 07       	cpc	r25, r18
    2b0e:	a2 07       	cpc	r26, r18
    2b10:	b2 07       	cpc	r27, r18
    2b12:	51 f0       	breq	.+20     	; 0x2b28 <remove_chain+0xaa>
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	a1 1d       	adc	r26, r1
    2b18:	b1 1d       	adc	r27, r1
    2b1a:	8e 87       	std	Y+14, r24	; 0x0e
    2b1c:	9f 87       	std	Y+15, r25	; 0x0f
    2b1e:	a8 8b       	std	Y+16, r26	; 0x10
    2b20:	b9 8b       	std	Y+17, r27	; 0x11
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	81 60       	ori	r24, 0x01	; 1
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	75 01       	movw	r14, r10
    2b2a:	64 01       	movw	r12, r8
    2b2c:	8e 89       	ldd	r24, Y+22	; 0x16
    2b2e:	9f 89       	ldd	r25, Y+23	; 0x17
    2b30:	a8 8d       	ldd	r26, Y+24	; 0x18
    2b32:	b9 8d       	ldd	r27, Y+25	; 0x19
    2b34:	c8 16       	cp	r12, r24
    2b36:	d9 06       	cpc	r13, r25
    2b38:	ea 06       	cpc	r14, r26
    2b3a:	fb 06       	cpc	r15, r27
    2b3c:	08 f4       	brcc	.+2      	; 0x2b40 <remove_chain+0xc2>
    2b3e:	bf cf       	rjmp	.-130    	; 0x2abe <remove_chain+0x40>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	09 c0       	rjmp	.+18     	; 0x2b56 <remove_chain+0xd8>
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	07 c0       	rjmp	.+14     	; 0x2b56 <remove_chain+0xd8>
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	05 c0       	rjmp	.+10     	; 0x2b56 <remove_chain+0xd8>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <remove_chain+0xd8>
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <remove_chain+0xd8>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	bf 90       	pop	r11
    2b68:	af 90       	pop	r10
    2b6a:	9f 90       	pop	r9
    2b6c:	8f 90       	pop	r8
    2b6e:	08 95       	ret

00002b70 <f_mount>:
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <f_mount+0x8>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <f_mount+0xa>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <f_mount+0xc>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
    2b84:	7e 83       	std	Y+6, r23	; 0x06
    2b86:	6d 83       	std	Y+5, r22	; 0x05
    2b88:	14 2f       	mov	r17, r20
    2b8a:	7a 83       	std	Y+2, r23	; 0x02
    2b8c:	69 83       	std	Y+1, r22	; 0x01
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	0e 94 0b 09 	call	0x1216	; 0x1216 <get_ldnumber>
    2b96:	99 23       	and	r25, r25
    2b98:	34 f1       	brlt	.+76     	; 0x2be6 <f_mount+0x76>
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	ee 0f       	add	r30, r30
    2b9e:	ff 1f       	adc	r31, r31
    2ba0:	eb 5e       	subi	r30, 0xEB	; 235
    2ba2:	f2 4f       	sbci	r31, 0xF2	; 242
    2ba4:	01 90       	ld	r0, Z+
    2ba6:	f0 81       	ld	r31, Z
    2ba8:	e0 2d       	mov	r30, r0
    2baa:	30 97       	sbiw	r30, 0x00	; 0
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <f_mount+0x40>
    2bae:	10 82       	st	Z, r1
    2bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb4:	30 97       	sbiw	r30, 0x00	; 0
    2bb6:	e9 f0       	breq	.+58     	; 0x2bf2 <f_mount+0x82>
    2bb8:	10 82       	st	Z, r1
    2bba:	2b 81       	ldd	r18, Y+3	; 0x03
    2bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	eb 5e       	subi	r30, 0xEB	; 235
    2bc6:	f2 4f       	sbci	r31, 0xF2	; 242
    2bc8:	31 83       	std	Z+1, r19	; 0x01
    2bca:	20 83       	st	Z, r18
    2bcc:	23 2b       	or	r18, r19
    2bce:	69 f0       	breq	.+26     	; 0x2bea <f_mount+0x7a>
    2bd0:	11 30       	cpi	r17, 0x01	; 1
    2bd2:	69 f4       	brne	.+26     	; 0x2bee <f_mount+0x7e>
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	be 01       	movw	r22, r28
    2bd8:	6b 5f       	subi	r22, 0xFB	; 251
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	ce 01       	movw	r24, r28
    2bde:	03 96       	adiw	r24, 0x03	; 3
    2be0:	0e 94 4f 0a 	call	0x149e	; 0x149e <find_volume>
    2be4:	0e c0       	rjmp	.+28     	; 0x2c02 <f_mount+0x92>
    2be6:	8b e0       	ldi	r24, 0x0B	; 11
    2be8:	0c c0       	rjmp	.+24     	; 0x2c02 <f_mount+0x92>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	0a c0       	rjmp	.+20     	; 0x2c02 <f_mount+0x92>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <f_mount+0x92>
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	eb 5e       	subi	r30, 0xEB	; 235
    2bfa:	f2 4f       	sbci	r31, 0xF2	; 242
    2bfc:	11 82       	std	Z+1, r1	; 0x01
    2bfe:	10 82       	st	Z, r1
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	26 96       	adiw	r28, 0x06	; 6
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	08 95       	ret

00002c16 <f_open>:
    2c16:	3f 92       	push	r3
    2c18:	4f 92       	push	r4
    2c1a:	5f 92       	push	r5
    2c1c:	6f 92       	push	r6
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	a4 97       	sbiw	r28, 0x24	; 36
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	7c a3       	std	Y+36, r23	; 0x24
    2c4a:	6b a3       	std	Y+35, r22	; 0x23
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <f_open+0x3c>
    2c50:	c1 c0       	rjmp	.+386    	; 0x2dd4 <f_open+0x1be>
    2c52:	d4 2e       	mov	r13, r20
    2c54:	8c 01       	movw	r16, r24
    2c56:	fc 01       	movw	r30, r24
    2c58:	11 82       	std	Z+1, r1	; 0x01
    2c5a:	10 82       	st	Z, r1
    2c5c:	4e 71       	andi	r20, 0x1E	; 30
    2c5e:	be 01       	movw	r22, r28
    2c60:	6d 5d       	subi	r22, 0xDD	; 221
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255
    2c64:	ce 01       	movw	r24, r28
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	0e 94 4f 0a 	call	0x149e	; 0x149e <find_volume>
    2c6c:	81 11       	cpse	r24, r1
    2c6e:	dc c0       	rjmp	.+440    	; 0x2e28 <f_open+0x212>
    2c70:	fd 2d       	mov	r31, r13
    2c72:	ff 71       	andi	r31, 0x1F	; 31
    2c74:	3f 2e       	mov	r3, r31
    2c76:	ce 01       	movw	r24, r28
    2c78:	47 96       	adiw	r24, 0x17	; 23
    2c7a:	9e 8b       	std	Y+22, r25	; 0x16
    2c7c:	8d 8b       	std	Y+21, r24	; 0x15
    2c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c80:	7c a1       	ldd	r23, Y+36	; 0x24
    2c82:	46 97       	sbiw	r24, 0x16	; 22
    2c84:	0e 94 00 13 	call	0x2600	; 0x2600 <follow_path>
    2c88:	eb 88       	ldd	r14, Y+19	; 0x13
    2c8a:	fc 88       	ldd	r15, Y+20	; 0x14
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	a4 c0       	rjmp	.+328    	; 0x2dd8 <f_open+0x1c2>
    2c90:	e1 14       	cp	r14, r1
    2c92:	f1 04       	cpc	r15, r1
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <f_open+0x82>
    2c96:	aa c0       	rjmp	.+340    	; 0x2dec <f_open+0x1d6>
    2c98:	a4 c0       	rjmp	.+328    	; 0x2de2 <f_open+0x1cc>
    2c9a:	84 30       	cpi	r24, 0x04	; 4
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <f_open+0x8a>
    2c9e:	b6 c0       	rjmp	.+364    	; 0x2e0c <f_open+0x1f6>
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <dir_register>
    2ca8:	23 2d       	mov	r18, r3
    2caa:	28 60       	ori	r18, 0x08	; 8
    2cac:	32 2e       	mov	r3, r18
    2cae:	eb 88       	ldd	r14, Y+19	; 0x13
    2cb0:	fc 88       	ldd	r15, Y+20	; 0x14
    2cb2:	88 23       	and	r24, r24
    2cb4:	41 f0       	breq	.+16     	; 0x2cc6 <f_open+0xb0>
    2cb6:	a2 c0       	rjmp	.+324    	; 0x2dfc <f_open+0x1e6>
    2cb8:	f7 01       	movw	r30, r14
    2cba:	83 85       	ldd	r24, Z+11	; 0x0b
    2cbc:	81 71       	andi	r24, 0x11	; 17
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <f_open+0xac>
    2cc0:	b0 c0       	rjmp	.+352    	; 0x2e22 <f_open+0x20c>
    2cc2:	d2 fc       	sbrc	r13, 2
    2cc4:	b0 c0       	rjmp	.+352    	; 0x2e26 <f_open+0x210>
    2cc6:	33 fe       	sbrs	r3, 3
    2cc8:	9d c0       	rjmp	.+314    	; 0x2e04 <f_open+0x1ee>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a1 e2       	ldi	r26, 0x21	; 33
    2cd0:	b6 e4       	ldi	r27, 0x46	; 70
    2cd2:	f7 01       	movw	r30, r14
    2cd4:	86 87       	std	Z+14, r24	; 0x0e
    2cd6:	97 87       	std	Z+15, r25	; 0x0f
    2cd8:	a0 8b       	std	Z+16, r26	; 0x10
    2cda:	b1 8b       	std	Z+17, r27	; 0x11
    2cdc:	86 8b       	std	Z+22, r24	; 0x16
    2cde:	97 8b       	std	Z+23, r25	; 0x17
    2ce0:	a0 8f       	std	Z+24, r26	; 0x18
    2ce2:	b1 8f       	std	Z+25, r27	; 0x19
    2ce4:	13 86       	std	Z+11, r1	; 0x0b
    2ce6:	14 8e       	std	Z+28, r1	; 0x1c
    2ce8:	15 8e       	std	Z+29, r1	; 0x1d
    2cea:	16 8e       	std	Z+30, r1	; 0x1e
    2cec:	17 8e       	std	Z+31, r1	; 0x1f
    2cee:	c9 80       	ldd	r12, Y+1	; 0x01
    2cf0:	da 80       	ldd	r13, Y+2	; 0x02
    2cf2:	b7 01       	movw	r22, r14
    2cf4:	c6 01       	movw	r24, r12
    2cf6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ld_clust>
    2cfa:	2b 01       	movw	r4, r22
    2cfc:	3c 01       	movw	r6, r24
    2cfe:	f7 01       	movw	r30, r14
    2d00:	13 8e       	std	Z+27, r1	; 0x1b
    2d02:	12 8e       	std	Z+26, r1	; 0x1a
    2d04:	15 8a       	std	Z+21, r1	; 0x15
    2d06:	14 8a       	std	Z+20, r1	; 0x14
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	f6 01       	movw	r30, r12
    2d0c:	84 83       	std	Z+4, r24	; 0x04
    2d0e:	41 14       	cp	r4, r1
    2d10:	51 04       	cpc	r5, r1
    2d12:	61 04       	cpc	r6, r1
    2d14:	71 04       	cpc	r7, r1
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <f_open+0x104>
    2d18:	75 c0       	rjmp	.+234    	; 0x2e04 <f_open+0x1ee>
    2d1a:	86 a4       	ldd	r8, Z+46	; 0x2e
    2d1c:	97 a4       	ldd	r9, Z+47	; 0x2f
    2d1e:	a0 a8       	ldd	r10, Z+48	; 0x30
    2d20:	b1 a8       	ldd	r11, Z+49	; 0x31
    2d22:	b3 01       	movw	r22, r6
    2d24:	a2 01       	movw	r20, r4
    2d26:	c6 01       	movw	r24, r12
    2d28:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <remove_chain>
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	66 c0       	rjmp	.+204    	; 0x2dfc <f_open+0x1e6>
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	f1 e0       	ldi	r31, 0x01	; 1
    2d36:	4f 1a       	sub	r4, r31
    2d38:	51 08       	sbc	r5, r1
    2d3a:	61 08       	sbc	r6, r1
    2d3c:	71 08       	sbc	r7, r1
    2d3e:	fc 01       	movw	r30, r24
    2d40:	42 86       	std	Z+10, r4	; 0x0a
    2d42:	53 86       	std	Z+11, r5	; 0x0b
    2d44:	64 86       	std	Z+12, r6	; 0x0c
    2d46:	75 86       	std	Z+13, r7	; 0x0d
    2d48:	b5 01       	movw	r22, r10
    2d4a:	a4 01       	movw	r20, r8
    2d4c:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    2d50:	88 23       	and	r24, r24
    2d52:	31 f0       	breq	.+12     	; 0x2d60 <f_open+0x14a>
    2d54:	69 c0       	rjmp	.+210    	; 0x2e28 <f_open+0x212>
    2d56:	d1 fe       	sbrs	r13, 1
    2d58:	55 c0       	rjmp	.+170    	; 0x2e04 <f_open+0x1ee>
    2d5a:	80 fd       	sbrc	r24, 0
    2d5c:	4c c0       	rjmp	.+152    	; 0x2df6 <f_open+0x1e0>
    2d5e:	52 c0       	rjmp	.+164    	; 0x2e04 <f_open+0x1ee>
    2d60:	f3 2d       	mov	r31, r3
    2d62:	f0 62       	ori	r31, 0x20	; 32
    2d64:	3f 2e       	mov	r3, r31
    2d66:	e9 81       	ldd	r30, Y+1	; 0x01
    2d68:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2d6c:	97 a5       	ldd	r25, Z+47	; 0x2f
    2d6e:	a0 a9       	ldd	r26, Z+48	; 0x30
    2d70:	b1 a9       	ldd	r27, Z+49	; 0x31
    2d72:	f8 01       	movw	r30, r16
    2d74:	82 8f       	std	Z+26, r24	; 0x1a
    2d76:	93 8f       	std	Z+27, r25	; 0x1b
    2d78:	a4 8f       	std	Z+28, r26	; 0x1c
    2d7a:	b5 8f       	std	Z+29, r27	; 0x1d
    2d7c:	f7 8e       	std	Z+31, r15	; 0x1f
    2d7e:	e6 8e       	std	Z+30, r14	; 0x1e
    2d80:	f8 01       	movw	r30, r16
    2d82:	34 82       	std	Z+4, r3	; 0x04
    2d84:	15 82       	std	Z+5, r1	; 0x05
    2d86:	c9 80       	ldd	r12, Y+1	; 0x01
    2d88:	da 80       	ldd	r13, Y+2	; 0x02
    2d8a:	b7 01       	movw	r22, r14
    2d8c:	c6 01       	movw	r24, r12
    2d8e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <ld_clust>
    2d92:	f8 01       	movw	r30, r16
    2d94:	66 87       	std	Z+14, r22	; 0x0e
    2d96:	77 87       	std	Z+15, r23	; 0x0f
    2d98:	80 8b       	std	Z+16, r24	; 0x10
    2d9a:	91 8b       	std	Z+17, r25	; 0x11
    2d9c:	f7 01       	movw	r30, r14
    2d9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2da0:	95 8d       	ldd	r25, Z+29	; 0x1d
    2da2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2da4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2da6:	f8 01       	movw	r30, r16
    2da8:	82 87       	std	Z+10, r24	; 0x0a
    2daa:	93 87       	std	Z+11, r25	; 0x0b
    2dac:	a4 87       	std	Z+12, r26	; 0x0c
    2dae:	b5 87       	std	Z+13, r27	; 0x0d
    2db0:	16 82       	std	Z+6, r1	; 0x06
    2db2:	17 82       	std	Z+7, r1	; 0x07
    2db4:	10 86       	std	Z+8, r1	; 0x08
    2db6:	11 86       	std	Z+9, r1	; 0x09
    2db8:	16 8a       	std	Z+22, r1	; 0x16
    2dba:	17 8a       	std	Z+23, r1	; 0x17
    2dbc:	10 8e       	std	Z+24, r1	; 0x18
    2dbe:	11 8e       	std	Z+25, r1	; 0x19
    2dc0:	d1 82       	std	Z+1, r13	; 0x01
    2dc2:	c0 82       	st	Z, r12
    2dc4:	f6 01       	movw	r30, r12
    2dc6:	86 81       	ldd	r24, Z+6	; 0x06
    2dc8:	97 81       	ldd	r25, Z+7	; 0x07
    2dca:	f8 01       	movw	r30, r16
    2dcc:	93 83       	std	Z+3, r25	; 0x03
    2dce:	82 83       	std	Z+2, r24	; 0x02
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	2a c0       	rjmp	.+84     	; 0x2e28 <f_open+0x212>
    2dd4:	89 e0       	ldi	r24, 0x09	; 9
    2dd6:	28 c0       	rjmp	.+80     	; 0x2e28 <f_open+0x212>
    2dd8:	4d 2d       	mov	r20, r13
    2dda:	4c 71       	andi	r20, 0x1C	; 28
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <f_open+0x1ca>
    2dde:	5d cf       	rjmp	.-326    	; 0x2c9a <f_open+0x84>
    2de0:	0d c0       	rjmp	.+26     	; 0x2dfc <f_open+0x1e6>
    2de2:	4d 2d       	mov	r20, r13
    2de4:	4c 71       	andi	r20, 0x1C	; 28
    2de6:	89 f4       	brne	.+34     	; 0x2e0a <f_open+0x1f4>
    2de8:	86 e0       	ldi	r24, 0x06	; 6
    2dea:	08 c0       	rjmp	.+16     	; 0x2dfc <f_open+0x1e6>
    2dec:	8d 2d       	mov	r24, r13
    2dee:	8c 71       	andi	r24, 0x1C	; 28
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <f_open+0x1de>
    2df2:	62 cf       	rjmp	.-316    	; 0x2cb8 <f_open+0xa2>
    2df4:	11 c0       	rjmp	.+34     	; 0x2e18 <f_open+0x202>
    2df6:	87 e0       	ldi	r24, 0x07	; 7
    2df8:	01 c0       	rjmp	.+2      	; 0x2dfc <f_open+0x1e6>
    2dfa:	84 e0       	ldi	r24, 0x04	; 4
    2dfc:	88 23       	and	r24, r24
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <f_open+0x1ec>
    2e00:	bf cf       	rjmp	.-130    	; 0x2d80 <f_open+0x16a>
    2e02:	12 c0       	rjmp	.+36     	; 0x2e28 <f_open+0x212>
    2e04:	33 fc       	sbrc	r3, 3
    2e06:	ac cf       	rjmp	.-168    	; 0x2d60 <f_open+0x14a>
    2e08:	ae cf       	rjmp	.-164    	; 0x2d66 <f_open+0x150>
    2e0a:	86 e0       	ldi	r24, 0x06	; 6
    2e0c:	f3 2d       	mov	r31, r3
    2e0e:	f8 60       	ori	r31, 0x08	; 8
    2e10:	3f 2e       	mov	r3, r31
    2e12:	eb 88       	ldd	r14, Y+19	; 0x13
    2e14:	fc 88       	ldd	r15, Y+20	; 0x14
    2e16:	f2 cf       	rjmp	.-28     	; 0x2dfc <f_open+0x1e6>
    2e18:	f7 01       	movw	r30, r14
    2e1a:	83 85       	ldd	r24, Z+11	; 0x0b
    2e1c:	84 fd       	sbrc	r24, 4
    2e1e:	ed cf       	rjmp	.-38     	; 0x2dfa <f_open+0x1e4>
    2e20:	9a cf       	rjmp	.-204    	; 0x2d56 <f_open+0x140>
    2e22:	87 e0       	ldi	r24, 0x07	; 7
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <f_open+0x212>
    2e26:	88 e0       	ldi	r24, 0x08	; 8
    2e28:	a4 96       	adiw	r28, 0x24	; 36
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	bf 90       	pop	r11
    2e46:	af 90       	pop	r10
    2e48:	9f 90       	pop	r9
    2e4a:	8f 90       	pop	r8
    2e4c:	7f 90       	pop	r7
    2e4e:	6f 90       	pop	r6
    2e50:	5f 90       	pop	r5
    2e52:	4f 90       	pop	r4
    2e54:	3f 90       	pop	r3
    2e56:	08 95       	ret

00002e58 <f_read>:
    2e58:	2f 92       	push	r2
    2e5a:	3f 92       	push	r3
    2e5c:	4f 92       	push	r4
    2e5e:	5f 92       	push	r5
    2e60:	6f 92       	push	r6
    2e62:	7f 92       	push	r7
    2e64:	8f 92       	push	r8
    2e66:	9f 92       	push	r9
    2e68:	af 92       	push	r10
    2e6a:	bf 92       	push	r11
    2e6c:	cf 92       	push	r12
    2e6e:	df 92       	push	r13
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	4b 01       	movw	r8, r22
    2e80:	6a 01       	movw	r12, r20
    2e82:	59 01       	movw	r10, r18
    2e84:	f9 01       	movw	r30, r18
    2e86:	11 82       	std	Z+1, r1	; 0x01
    2e88:	10 82       	st	Z, r1
    2e8a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <validate>
    2e8e:	81 11       	cpse	r24, r1
    2e90:	0c c1       	rjmp	.+536    	; 0x30aa <f_read+0x252>
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	81 11       	cpse	r24, r1
    2e96:	09 c1       	rjmp	.+530    	; 0x30aa <f_read+0x252>
    2e98:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9a:	80 ff       	sbrs	r24, 0
    2e9c:	03 c1       	rjmp	.+518    	; 0x30a4 <f_read+0x24c>
    2e9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea2:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ea4:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ea6:	4e 81       	ldd	r20, Y+6	; 0x06
    2ea8:	5f 81       	ldd	r21, Y+7	; 0x07
    2eaa:	68 85       	ldd	r22, Y+8	; 0x08
    2eac:	79 85       	ldd	r23, Y+9	; 0x09
    2eae:	84 1b       	sub	r24, r20
    2eb0:	95 0b       	sbc	r25, r21
    2eb2:	a6 0b       	sbc	r26, r22
    2eb4:	b7 0b       	sbc	r27, r23
    2eb6:	a6 01       	movw	r20, r12
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	84 17       	cp	r24, r20
    2ebe:	95 07       	cpc	r25, r21
    2ec0:	a6 07       	cpc	r26, r22
    2ec2:	b7 07       	cpc	r27, r23
    2ec4:	08 f4       	brcc	.+2      	; 0x2ec8 <f_read+0x70>
    2ec6:	6c 01       	movw	r12, r24
    2ec8:	c1 14       	cp	r12, r1
    2eca:	d1 04       	cpc	r13, r1
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <f_read+0x78>
    2ece:	ec c0       	rjmp	.+472    	; 0x30a8 <f_read+0x250>
    2ed0:	4e 81       	ldd	r20, Y+6	; 0x06
    2ed2:	5f 81       	ldd	r21, Y+7	; 0x07
    2ed4:	68 85       	ldd	r22, Y+8	; 0x08
    2ed6:	79 85       	ldd	r23, Y+9	; 0x09
    2ed8:	db 01       	movw	r26, r22
    2eda:	ca 01       	movw	r24, r20
    2edc:	91 70       	andi	r25, 0x01	; 1
    2ede:	aa 27       	eor	r26, r26
    2ee0:	bb 27       	eor	r27, r27
    2ee2:	89 2b       	or	r24, r25
    2ee4:	8a 2b       	or	r24, r26
    2ee6:	8b 2b       	or	r24, r27
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <f_read+0x94>
    2eea:	98 c0       	rjmp	.+304    	; 0x301c <f_read+0x1c4>
    2eec:	e8 81       	ld	r30, Y
    2eee:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef0:	12 81       	ldd	r17, Z+2	; 0x02
    2ef2:	11 50       	subi	r17, 0x01	; 1
    2ef4:	db 01       	movw	r26, r22
    2ef6:	ca 01       	movw	r24, r20
    2ef8:	07 2e       	mov	r0, r23
    2efa:	79 e0       	ldi	r23, 0x09	; 9
    2efc:	b6 95       	lsr	r27
    2efe:	a7 95       	ror	r26
    2f00:	97 95       	ror	r25
    2f02:	87 95       	ror	r24
    2f04:	7a 95       	dec	r23
    2f06:	d1 f7       	brne	.-12     	; 0x2efc <f_read+0xa4>
    2f08:	70 2d       	mov	r23, r0
    2f0a:	18 23       	and	r17, r24
    2f0c:	29 f5       	brne	.+74     	; 0x2f58 <f_read+0x100>
    2f0e:	45 2b       	or	r20, r21
    2f10:	46 2b       	or	r20, r22
    2f12:	47 2b       	or	r20, r23
    2f14:	29 f4       	brne	.+10     	; 0x2f20 <f_read+0xc8>
    2f16:	6e 85       	ldd	r22, Y+14	; 0x0e
    2f18:	7f 85       	ldd	r23, Y+15	; 0x0f
    2f1a:	88 89       	ldd	r24, Y+16	; 0x10
    2f1c:	99 89       	ldd	r25, Y+17	; 0x11
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <f_read+0xd6>
    2f20:	4a 89       	ldd	r20, Y+18	; 0x12
    2f22:	5b 89       	ldd	r21, Y+19	; 0x13
    2f24:	6c 89       	ldd	r22, Y+20	; 0x14
    2f26:	7d 89       	ldd	r23, Y+21	; 0x15
    2f28:	cf 01       	movw	r24, r30
    2f2a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    2f2e:	62 30       	cpi	r22, 0x02	; 2
    2f30:	71 05       	cpc	r23, r1
    2f32:	81 05       	cpc	r24, r1
    2f34:	91 05       	cpc	r25, r1
    2f36:	18 f4       	brcc	.+6      	; 0x2f3e <f_read+0xe6>
    2f38:	82 e0       	ldi	r24, 0x02	; 2
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	b6 c0       	rjmp	.+364    	; 0x30aa <f_read+0x252>
    2f3e:	6f 3f       	cpi	r22, 0xFF	; 255
    2f40:	ff ef       	ldi	r31, 0xFF	; 255
    2f42:	7f 07       	cpc	r23, r31
    2f44:	8f 07       	cpc	r24, r31
    2f46:	9f 07       	cpc	r25, r31
    2f48:	19 f4       	brne	.+6      	; 0x2f50 <f_read+0xf8>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	ad c0       	rjmp	.+346    	; 0x30aa <f_read+0x252>
    2f50:	6a 8b       	std	Y+18, r22	; 0x12
    2f52:	7b 8b       	std	Y+19, r23	; 0x13
    2f54:	8c 8b       	std	Y+20, r24	; 0x14
    2f56:	9d 8b       	std	Y+21, r25	; 0x15
    2f58:	28 80       	ld	r2, Y
    2f5a:	39 80       	ldd	r3, Y+1	; 0x01
    2f5c:	4a 89       	ldd	r20, Y+18	; 0x12
    2f5e:	5b 89       	ldd	r21, Y+19	; 0x13
    2f60:	6c 89       	ldd	r22, Y+20	; 0x14
    2f62:	7d 89       	ldd	r23, Y+21	; 0x15
    2f64:	c1 01       	movw	r24, r2
    2f66:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    2f6a:	61 15       	cp	r22, r1
    2f6c:	71 05       	cpc	r23, r1
    2f6e:	81 05       	cpc	r24, r1
    2f70:	91 05       	cpc	r25, r1
    2f72:	19 f4       	brne	.+6      	; 0x2f7a <f_read+0x122>
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	8d 83       	std	Y+5, r24	; 0x05
    2f78:	98 c0       	rjmp	.+304    	; 0x30aa <f_read+0x252>
    2f7a:	2b 01       	movw	r4, r22
    2f7c:	3c 01       	movw	r6, r24
    2f7e:	41 0e       	add	r4, r17
    2f80:	51 1c       	adc	r5, r1
    2f82:	61 1c       	adc	r6, r1
    2f84:	71 1c       	adc	r7, r1
    2f86:	76 01       	movw	r14, r12
    2f88:	ef 2c       	mov	r14, r15
    2f8a:	ff 24       	eor	r15, r15
    2f8c:	e6 94       	lsr	r14
    2f8e:	e1 14       	cp	r14, r1
    2f90:	f1 04       	cpc	r15, r1
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <f_read+0x13e>
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <f_read+0x1bc>
    2f96:	f1 01       	movw	r30, r2
    2f98:	42 81       	ldd	r20, Z+2	; 0x02
    2f9a:	24 2f       	mov	r18, r20
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	c7 01       	movw	r24, r14
    2fa0:	81 0f       	add	r24, r17
    2fa2:	91 1d       	adc	r25, r1
    2fa4:	28 17       	cp	r18, r24
    2fa6:	39 07       	cpc	r19, r25
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <f_read+0x158>
    2faa:	79 01       	movw	r14, r18
    2fac:	e1 1a       	sub	r14, r17
    2fae:	f1 08       	sbc	r15, r1
    2fb0:	87 01       	movw	r16, r14
    2fb2:	a3 01       	movw	r20, r6
    2fb4:	92 01       	movw	r18, r4
    2fb6:	b4 01       	movw	r22, r8
    2fb8:	f1 01       	movw	r30, r2
    2fba:	81 81       	ldd	r24, Z+1	; 0x01
    2fbc:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <disk_read>
    2fc0:	88 23       	and	r24, r24
    2fc2:	19 f0       	breq	.+6      	; 0x2fca <f_read+0x172>
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
    2fc8:	70 c0       	rjmp	.+224    	; 0x30aa <f_read+0x252>
    2fca:	e8 81       	ld	r30, Y
    2fcc:	f9 81       	ldd	r31, Y+1	; 0x01
    2fce:	84 81       	ldd	r24, Z+4	; 0x04
    2fd0:	88 23       	and	r24, r24
    2fd2:	e1 f0       	breq	.+56     	; 0x300c <f_read+0x1b4>
    2fd4:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fd6:	97 a5       	ldd	r25, Z+47	; 0x2f
    2fd8:	a0 a9       	ldd	r26, Z+48	; 0x30
    2fda:	b1 a9       	ldd	r27, Z+49	; 0x31
    2fdc:	84 19       	sub	r24, r4
    2fde:	95 09       	sbc	r25, r5
    2fe0:	a6 09       	sbc	r26, r6
    2fe2:	b7 09       	sbc	r27, r7
    2fe4:	a7 01       	movw	r20, r14
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	84 17       	cp	r24, r20
    2fec:	95 07       	cpc	r25, r21
    2fee:	a6 07       	cpc	r26, r22
    2ff0:	b7 07       	cpc	r27, r23
    2ff2:	60 f4       	brcc	.+24     	; 0x300c <f_read+0x1b4>
    2ff4:	bf 01       	movw	r22, r30
    2ff6:	6e 5c       	subi	r22, 0xCE	; 206
    2ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	88 27       	eor	r24, r24
    2ffe:	99 0f       	add	r25, r25
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	52 e0       	ldi	r21, 0x02	; 2
    3004:	88 0d       	add	r24, r8
    3006:	99 1d       	adc	r25, r9
    3008:	0e 94 bb 08 	call	0x1176	; 0x1176 <mem_cpy>
    300c:	fe 2c       	mov	r15, r14
    300e:	ee 24       	eor	r14, r14
    3010:	ff 0c       	add	r15, r15
    3012:	2d c0       	rjmp	.+90     	; 0x306e <f_read+0x216>
    3014:	4e 8a       	std	Y+22, r4	; 0x16
    3016:	5f 8a       	std	Y+23, r5	; 0x17
    3018:	68 8e       	std	Y+24, r6	; 0x18
    301a:	79 8e       	std	Y+25, r7	; 0x19
    301c:	2e 81       	ldd	r18, Y+6	; 0x06
    301e:	3f 81       	ldd	r19, Y+7	; 0x07
    3020:	31 70       	andi	r19, 0x01	; 1
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	92 e0       	ldi	r25, 0x02	; 2
    3026:	82 1b       	sub	r24, r18
    3028:	93 0b       	sbc	r25, r19
    302a:	76 01       	movw	r14, r12
    302c:	8c 15       	cp	r24, r12
    302e:	9d 05       	cpc	r25, r13
    3030:	08 f4       	brcc	.+2      	; 0x3034 <f_read+0x1dc>
    3032:	7c 01       	movw	r14, r24
    3034:	4e 89       	ldd	r20, Y+22	; 0x16
    3036:	5f 89       	ldd	r21, Y+23	; 0x17
    3038:	68 8d       	ldd	r22, Y+24	; 0x18
    303a:	79 8d       	ldd	r23, Y+25	; 0x19
    303c:	88 81       	ld	r24, Y
    303e:	99 81       	ldd	r25, Y+1	; 0x01
    3040:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    3044:	88 23       	and	r24, r24
    3046:	19 f0       	breq	.+6      	; 0x304e <f_read+0x1f6>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	2e c0       	rjmp	.+92     	; 0x30aa <f_read+0x252>
    304e:	8e 81       	ldd	r24, Y+6	; 0x06
    3050:	9f 81       	ldd	r25, Y+7	; 0x07
    3052:	a8 85       	ldd	r26, Y+8	; 0x08
    3054:	b9 85       	ldd	r27, Y+9	; 0x09
    3056:	91 70       	andi	r25, 0x01	; 1
    3058:	aa 27       	eor	r26, r26
    305a:	bb 27       	eor	r27, r27
    305c:	c2 96       	adiw	r24, 0x32	; 50
    305e:	68 81       	ld	r22, Y
    3060:	79 81       	ldd	r23, Y+1	; 0x01
    3062:	68 0f       	add	r22, r24
    3064:	79 1f       	adc	r23, r25
    3066:	a7 01       	movw	r20, r14
    3068:	c4 01       	movw	r24, r8
    306a:	0e 94 bb 08 	call	0x1176	; 0x1176 <mem_cpy>
    306e:	8e 0c       	add	r8, r14
    3070:	9f 1c       	adc	r9, r15
    3072:	8e 81       	ldd	r24, Y+6	; 0x06
    3074:	9f 81       	ldd	r25, Y+7	; 0x07
    3076:	a8 85       	ldd	r26, Y+8	; 0x08
    3078:	b9 85       	ldd	r27, Y+9	; 0x09
    307a:	8e 0d       	add	r24, r14
    307c:	9f 1d       	adc	r25, r15
    307e:	a1 1d       	adc	r26, r1
    3080:	b1 1d       	adc	r27, r1
    3082:	8e 83       	std	Y+6, r24	; 0x06
    3084:	9f 83       	std	Y+7, r25	; 0x07
    3086:	a8 87       	std	Y+8, r26	; 0x08
    3088:	b9 87       	std	Y+9, r27	; 0x09
    308a:	f5 01       	movw	r30, r10
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	8e 0d       	add	r24, r14
    3092:	9f 1d       	adc	r25, r15
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	ce 18       	sub	r12, r14
    309a:	df 08       	sbc	r13, r15
    309c:	09 f0       	breq	.+2      	; 0x30a0 <f_read+0x248>
    309e:	18 cf       	rjmp	.-464    	; 0x2ed0 <f_read+0x78>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	03 c0       	rjmp	.+6      	; 0x30aa <f_read+0x252>
    30a4:	87 e0       	ldi	r24, 0x07	; 7
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <f_read+0x252>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	9f 90       	pop	r9
    30c0:	8f 90       	pop	r8
    30c2:	7f 90       	pop	r7
    30c4:	6f 90       	pop	r6
    30c6:	5f 90       	pop	r5
    30c8:	4f 90       	pop	r4
    30ca:	3f 90       	pop	r3
    30cc:	2f 90       	pop	r2
    30ce:	08 95       	ret

000030d0 <f_write>:
    30d0:	2f 92       	push	r2
    30d2:	3f 92       	push	r3
    30d4:	4f 92       	push	r4
    30d6:	5f 92       	push	r5
    30d8:	6f 92       	push	r6
    30da:	7f 92       	push	r7
    30dc:	8f 92       	push	r8
    30de:	9f 92       	push	r9
    30e0:	af 92       	push	r10
    30e2:	bf 92       	push	r11
    30e4:	cf 92       	push	r12
    30e6:	df 92       	push	r13
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	ec 01       	movw	r28, r24
    30f6:	4b 01       	movw	r8, r22
    30f8:	6a 01       	movw	r12, r20
    30fa:	59 01       	movw	r10, r18
    30fc:	f9 01       	movw	r30, r18
    30fe:	11 82       	std	Z+1, r1	; 0x01
    3100:	10 82       	st	Z, r1
    3102:	0e 94 2a 0a 	call	0x1454	; 0x1454 <validate>
    3106:	81 11       	cpse	r24, r1
    3108:	6d c1       	rjmp	.+730    	; 0x33e4 <f_write+0x314>
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	81 11       	cpse	r24, r1
    310e:	6a c1       	rjmp	.+724    	; 0x33e4 <f_write+0x314>
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	81 ff       	sbrs	r24, 1
    3114:	66 c1       	rjmp	.+716    	; 0x33e2 <f_write+0x312>
    3116:	8e 81       	ldd	r24, Y+6	; 0x06
    3118:	9f 81       	ldd	r25, Y+7	; 0x07
    311a:	a8 85       	ldd	r26, Y+8	; 0x08
    311c:	b9 85       	ldd	r27, Y+9	; 0x09
    311e:	ac 01       	movw	r20, r24
    3120:	bd 01       	movw	r22, r26
    3122:	4c 0d       	add	r20, r12
    3124:	5d 1d       	adc	r21, r13
    3126:	61 1d       	adc	r22, r1
    3128:	71 1d       	adc	r23, r1
    312a:	48 17       	cp	r20, r24
    312c:	59 07       	cpc	r21, r25
    312e:	6a 07       	cpc	r22, r26
    3130:	7b 07       	cpc	r23, r27
    3132:	08 f4       	brcc	.+2      	; 0x3136 <f_write+0x66>
    3134:	40 c1       	rjmp	.+640    	; 0x33b6 <f_write+0x2e6>
    3136:	c1 14       	cp	r12, r1
    3138:	d1 04       	cpc	r13, r1
    313a:	09 f4       	brne	.+2      	; 0x313e <f_write+0x6e>
    313c:	3c c1       	rjmp	.+632    	; 0x33b6 <f_write+0x2e6>
    313e:	4e 81       	ldd	r20, Y+6	; 0x06
    3140:	5f 81       	ldd	r21, Y+7	; 0x07
    3142:	68 85       	ldd	r22, Y+8	; 0x08
    3144:	79 85       	ldd	r23, Y+9	; 0x09
    3146:	db 01       	movw	r26, r22
    3148:	ca 01       	movw	r24, r20
    314a:	91 70       	andi	r25, 0x01	; 1
    314c:	aa 27       	eor	r26, r26
    314e:	bb 27       	eor	r27, r27
    3150:	89 2b       	or	r24, r25
    3152:	8a 2b       	or	r24, r26
    3154:	8b 2b       	or	r24, r27
    3156:	09 f0       	breq	.+2      	; 0x315a <f_write+0x8a>
    3158:	e8 c0       	rjmp	.+464    	; 0x332a <f_write+0x25a>
    315a:	e8 81       	ld	r30, Y
    315c:	f9 81       	ldd	r31, Y+1	; 0x01
    315e:	12 81       	ldd	r17, Z+2	; 0x02
    3160:	11 50       	subi	r17, 0x01	; 1
    3162:	db 01       	movw	r26, r22
    3164:	ca 01       	movw	r24, r20
    3166:	07 2e       	mov	r0, r23
    3168:	79 e0       	ldi	r23, 0x09	; 9
    316a:	b6 95       	lsr	r27
    316c:	a7 95       	ror	r26
    316e:	97 95       	ror	r25
    3170:	87 95       	ror	r24
    3172:	7a 95       	dec	r23
    3174:	d1 f7       	brne	.-12     	; 0x316a <f_write+0x9a>
    3176:	70 2d       	mov	r23, r0
    3178:	18 23       	and	r17, r24
    317a:	09 f0       	breq	.+2      	; 0x317e <f_write+0xae>
    317c:	42 c0       	rjmp	.+132    	; 0x3202 <f_write+0x132>
    317e:	45 2b       	or	r20, r21
    3180:	46 2b       	or	r20, r22
    3182:	47 2b       	or	r20, r23
    3184:	81 f4       	brne	.+32     	; 0x31a6 <f_write+0xd6>
    3186:	6e 85       	ldd	r22, Y+14	; 0x0e
    3188:	7f 85       	ldd	r23, Y+15	; 0x0f
    318a:	88 89       	ldd	r24, Y+16	; 0x10
    318c:	99 89       	ldd	r25, Y+17	; 0x11
    318e:	61 15       	cp	r22, r1
    3190:	71 05       	cpc	r23, r1
    3192:	81 05       	cpc	r24, r1
    3194:	91 05       	cpc	r25, r1
    3196:	a1 f4       	brne	.+40     	; 0x31c0 <f_write+0xf0>
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	50 e0       	ldi	r21, 0x00	; 0
    319c:	ba 01       	movw	r22, r20
    319e:	cf 01       	movw	r24, r30
    31a0:	0e 94 af 10 	call	0x215e	; 0x215e <create_chain>
    31a4:	07 c0       	rjmp	.+14     	; 0x31b4 <f_write+0xe4>
    31a6:	4a 89       	ldd	r20, Y+18	; 0x12
    31a8:	5b 89       	ldd	r21, Y+19	; 0x13
    31aa:	6c 89       	ldd	r22, Y+20	; 0x14
    31ac:	7d 89       	ldd	r23, Y+21	; 0x15
    31ae:	cf 01       	movw	r24, r30
    31b0:	0e 94 af 10 	call	0x215e	; 0x215e <create_chain>
    31b4:	61 15       	cp	r22, r1
    31b6:	71 05       	cpc	r23, r1
    31b8:	81 05       	cpc	r24, r1
    31ba:	91 05       	cpc	r25, r1
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <f_write+0xf0>
    31be:	fb c0       	rjmp	.+502    	; 0x33b6 <f_write+0x2e6>
    31c0:	61 30       	cpi	r22, 0x01	; 1
    31c2:	71 05       	cpc	r23, r1
    31c4:	81 05       	cpc	r24, r1
    31c6:	91 05       	cpc	r25, r1
    31c8:	19 f4       	brne	.+6      	; 0x31d0 <f_write+0x100>
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	0a c1       	rjmp	.+532    	; 0x33e4 <f_write+0x314>
    31d0:	6f 3f       	cpi	r22, 0xFF	; 255
    31d2:	ff ef       	ldi	r31, 0xFF	; 255
    31d4:	7f 07       	cpc	r23, r31
    31d6:	8f 07       	cpc	r24, r31
    31d8:	9f 07       	cpc	r25, r31
    31da:	19 f4       	brne	.+6      	; 0x31e2 <f_write+0x112>
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	01 c1       	rjmp	.+514    	; 0x33e4 <f_write+0x314>
    31e2:	6a 8b       	std	Y+18, r22	; 0x12
    31e4:	7b 8b       	std	Y+19, r23	; 0x13
    31e6:	8c 8b       	std	Y+20, r24	; 0x14
    31e8:	9d 8b       	std	Y+21, r25	; 0x15
    31ea:	4e 84       	ldd	r4, Y+14	; 0x0e
    31ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    31ee:	68 88       	ldd	r6, Y+16	; 0x10
    31f0:	79 88       	ldd	r7, Y+17	; 0x11
    31f2:	45 28       	or	r4, r5
    31f4:	46 28       	or	r4, r6
    31f6:	47 28       	or	r4, r7
    31f8:	21 f4       	brne	.+8      	; 0x3202 <f_write+0x132>
    31fa:	6e 87       	std	Y+14, r22	; 0x0e
    31fc:	7f 87       	std	Y+15, r23	; 0x0f
    31fe:	88 8b       	std	Y+16, r24	; 0x10
    3200:	99 8b       	std	Y+17, r25	; 0x11
    3202:	e8 81       	ld	r30, Y
    3204:	f9 81       	ldd	r31, Y+1	; 0x01
    3206:	46 a5       	ldd	r20, Z+46	; 0x2e
    3208:	57 a5       	ldd	r21, Z+47	; 0x2f
    320a:	60 a9       	ldd	r22, Z+48	; 0x30
    320c:	71 a9       	ldd	r23, Z+49	; 0x31
    320e:	8e 89       	ldd	r24, Y+22	; 0x16
    3210:	9f 89       	ldd	r25, Y+23	; 0x17
    3212:	a8 8d       	ldd	r26, Y+24	; 0x18
    3214:	b9 8d       	ldd	r27, Y+25	; 0x19
    3216:	48 17       	cp	r20, r24
    3218:	59 07       	cpc	r21, r25
    321a:	6a 07       	cpc	r22, r26
    321c:	7b 07       	cpc	r23, r27
    321e:	41 f4       	brne	.+16     	; 0x3230 <f_write+0x160>
    3220:	cf 01       	movw	r24, r30
    3222:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    3226:	88 23       	and	r24, r24
    3228:	19 f0       	breq	.+6      	; 0x3230 <f_write+0x160>
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	da c0       	rjmp	.+436    	; 0x33e4 <f_write+0x314>
    3230:	28 80       	ld	r2, Y
    3232:	39 80       	ldd	r3, Y+1	; 0x01
    3234:	4a 89       	ldd	r20, Y+18	; 0x12
    3236:	5b 89       	ldd	r21, Y+19	; 0x13
    3238:	6c 89       	ldd	r22, Y+20	; 0x14
    323a:	7d 89       	ldd	r23, Y+21	; 0x15
    323c:	c1 01       	movw	r24, r2
    323e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    3242:	61 15       	cp	r22, r1
    3244:	71 05       	cpc	r23, r1
    3246:	81 05       	cpc	r24, r1
    3248:	91 05       	cpc	r25, r1
    324a:	19 f4       	brne	.+6      	; 0x3252 <f_write+0x182>
    324c:	82 e0       	ldi	r24, 0x02	; 2
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	c9 c0       	rjmp	.+402    	; 0x33e4 <f_write+0x314>
    3252:	2b 01       	movw	r4, r22
    3254:	3c 01       	movw	r6, r24
    3256:	41 0e       	add	r4, r17
    3258:	51 1c       	adc	r5, r1
    325a:	61 1c       	adc	r6, r1
    325c:	71 1c       	adc	r7, r1
    325e:	76 01       	movw	r14, r12
    3260:	ef 2c       	mov	r14, r15
    3262:	ff 24       	eor	r15, r15
    3264:	e6 94       	lsr	r14
    3266:	e1 14       	cp	r14, r1
    3268:	f1 04       	cpc	r15, r1
    326a:	09 f4       	brne	.+2      	; 0x326e <f_write+0x19e>
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <f_write+0x21c>
    326e:	f1 01       	movw	r30, r2
    3270:	42 81       	ldd	r20, Z+2	; 0x02
    3272:	24 2f       	mov	r18, r20
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	c7 01       	movw	r24, r14
    3278:	81 0f       	add	r24, r17
    327a:	91 1d       	adc	r25, r1
    327c:	28 17       	cp	r18, r24
    327e:	39 07       	cpc	r19, r25
    3280:	18 f4       	brcc	.+6      	; 0x3288 <f_write+0x1b8>
    3282:	79 01       	movw	r14, r18
    3284:	e1 1a       	sub	r14, r17
    3286:	f1 08       	sbc	r15, r1
    3288:	87 01       	movw	r16, r14
    328a:	a3 01       	movw	r20, r6
    328c:	92 01       	movw	r18, r4
    328e:	b4 01       	movw	r22, r8
    3290:	f1 01       	movw	r30, r2
    3292:	81 81       	ldd	r24, Z+1	; 0x01
    3294:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <disk_write>
    3298:	88 23       	and	r24, r24
    329a:	19 f0       	breq	.+6      	; 0x32a2 <f_write+0x1d2>
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	a1 c0       	rjmp	.+322    	; 0x33e4 <f_write+0x314>
    32a2:	e8 81       	ld	r30, Y
    32a4:	f9 81       	ldd	r31, Y+1	; 0x01
    32a6:	86 a5       	ldd	r24, Z+46	; 0x2e
    32a8:	97 a5       	ldd	r25, Z+47	; 0x2f
    32aa:	a0 a9       	ldd	r26, Z+48	; 0x30
    32ac:	b1 a9       	ldd	r27, Z+49	; 0x31
    32ae:	84 19       	sub	r24, r4
    32b0:	95 09       	sbc	r25, r5
    32b2:	a6 09       	sbc	r26, r6
    32b4:	b7 09       	sbc	r27, r7
    32b6:	a7 01       	movw	r20, r14
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	84 17       	cp	r24, r20
    32be:	95 07       	cpc	r25, r21
    32c0:	a6 07       	cpc	r26, r22
    32c2:	b7 07       	cpc	r27, r23
    32c4:	78 f4       	brcc	.+30     	; 0x32e4 <f_write+0x214>
    32c6:	98 2f       	mov	r25, r24
    32c8:	88 27       	eor	r24, r24
    32ca:	99 0f       	add	r25, r25
    32cc:	b4 01       	movw	r22, r8
    32ce:	68 0f       	add	r22, r24
    32d0:	79 1f       	adc	r23, r25
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	52 e0       	ldi	r21, 0x02	; 2
    32d6:	cf 01       	movw	r24, r30
    32d8:	c2 96       	adiw	r24, 0x32	; 50
    32da:	0e 94 bb 08 	call	0x1176	; 0x1176 <mem_cpy>
    32de:	e8 81       	ld	r30, Y
    32e0:	f9 81       	ldd	r31, Y+1	; 0x01
    32e2:	14 82       	std	Z+4, r1	; 0x04
    32e4:	fe 2c       	mov	r15, r14
    32e6:	ee 24       	eor	r14, r14
    32e8:	ff 0c       	add	r15, r15
    32ea:	4c c0       	rjmp	.+152    	; 0x3384 <f_write+0x2b4>
    32ec:	4e 81       	ldd	r20, Y+6	; 0x06
    32ee:	5f 81       	ldd	r21, Y+7	; 0x07
    32f0:	68 85       	ldd	r22, Y+8	; 0x08
    32f2:	79 85       	ldd	r23, Y+9	; 0x09
    32f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f8:	ac 85       	ldd	r26, Y+12	; 0x0c
    32fa:	bd 85       	ldd	r27, Y+13	; 0x0d
    32fc:	48 17       	cp	r20, r24
    32fe:	59 07       	cpc	r21, r25
    3300:	6a 07       	cpc	r22, r26
    3302:	7b 07       	cpc	r23, r27
    3304:	70 f0       	brcs	.+28     	; 0x3322 <f_write+0x252>
    3306:	c1 01       	movw	r24, r2
    3308:	0e 94 46 09 	call	0x128c	; 0x128c <sync_window>
    330c:	88 23       	and	r24, r24
    330e:	19 f0       	breq	.+6      	; 0x3316 <f_write+0x246>
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	67 c0       	rjmp	.+206    	; 0x33e4 <f_write+0x314>
    3316:	e8 81       	ld	r30, Y
    3318:	f9 81       	ldd	r31, Y+1	; 0x01
    331a:	46 a6       	std	Z+46, r4	; 0x2e
    331c:	57 a6       	std	Z+47, r5	; 0x2f
    331e:	60 aa       	std	Z+48, r6	; 0x30
    3320:	71 aa       	std	Z+49, r7	; 0x31
    3322:	4e 8a       	std	Y+22, r4	; 0x16
    3324:	5f 8a       	std	Y+23, r5	; 0x17
    3326:	68 8e       	std	Y+24, r6	; 0x18
    3328:	79 8e       	std	Y+25, r7	; 0x19
    332a:	2e 81       	ldd	r18, Y+6	; 0x06
    332c:	3f 81       	ldd	r19, Y+7	; 0x07
    332e:	31 70       	andi	r19, 0x01	; 1
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	92 e0       	ldi	r25, 0x02	; 2
    3334:	82 1b       	sub	r24, r18
    3336:	93 0b       	sbc	r25, r19
    3338:	76 01       	movw	r14, r12
    333a:	8c 15       	cp	r24, r12
    333c:	9d 05       	cpc	r25, r13
    333e:	08 f4       	brcc	.+2      	; 0x3342 <f_write+0x272>
    3340:	7c 01       	movw	r14, r24
    3342:	4e 89       	ldd	r20, Y+22	; 0x16
    3344:	5f 89       	ldd	r21, Y+23	; 0x17
    3346:	68 8d       	ldd	r22, Y+24	; 0x18
    3348:	79 8d       	ldd	r23, Y+25	; 0x19
    334a:	88 81       	ld	r24, Y
    334c:	99 81       	ldd	r25, Y+1	; 0x01
    334e:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    3352:	88 23       	and	r24, r24
    3354:	19 f0       	breq	.+6      	; 0x335c <f_write+0x28c>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	44 c0       	rjmp	.+136    	; 0x33e4 <f_write+0x314>
    335c:	8e 81       	ldd	r24, Y+6	; 0x06
    335e:	9f 81       	ldd	r25, Y+7	; 0x07
    3360:	a8 85       	ldd	r26, Y+8	; 0x08
    3362:	b9 85       	ldd	r27, Y+9	; 0x09
    3364:	91 70       	andi	r25, 0x01	; 1
    3366:	aa 27       	eor	r26, r26
    3368:	bb 27       	eor	r27, r27
    336a:	c2 96       	adiw	r24, 0x32	; 50
    336c:	28 81       	ld	r18, Y
    336e:	39 81       	ldd	r19, Y+1	; 0x01
    3370:	a7 01       	movw	r20, r14
    3372:	b4 01       	movw	r22, r8
    3374:	82 0f       	add	r24, r18
    3376:	93 1f       	adc	r25, r19
    3378:	0e 94 bb 08 	call	0x1176	; 0x1176 <mem_cpy>
    337c:	e8 81       	ld	r30, Y
    337e:	f9 81       	ldd	r31, Y+1	; 0x01
    3380:	21 e0       	ldi	r18, 0x01	; 1
    3382:	24 83       	std	Z+4, r18	; 0x04
    3384:	8e 0c       	add	r8, r14
    3386:	9f 1c       	adc	r9, r15
    3388:	8e 81       	ldd	r24, Y+6	; 0x06
    338a:	9f 81       	ldd	r25, Y+7	; 0x07
    338c:	a8 85       	ldd	r26, Y+8	; 0x08
    338e:	b9 85       	ldd	r27, Y+9	; 0x09
    3390:	8e 0d       	add	r24, r14
    3392:	9f 1d       	adc	r25, r15
    3394:	a1 1d       	adc	r26, r1
    3396:	b1 1d       	adc	r27, r1
    3398:	8e 83       	std	Y+6, r24	; 0x06
    339a:	9f 83       	std	Y+7, r25	; 0x07
    339c:	a8 87       	std	Y+8, r26	; 0x08
    339e:	b9 87       	std	Y+9, r27	; 0x09
    33a0:	f5 01       	movw	r30, r10
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	8e 0d       	add	r24, r14
    33a8:	9f 1d       	adc	r25, r15
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
    33ae:	ce 18       	sub	r12, r14
    33b0:	df 08       	sbc	r13, r15
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <f_write+0x2e6>
    33b4:	c4 ce       	rjmp	.-632    	; 0x313e <f_write+0x6e>
    33b6:	8e 81       	ldd	r24, Y+6	; 0x06
    33b8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ba:	a8 85       	ldd	r26, Y+8	; 0x08
    33bc:	b9 85       	ldd	r27, Y+9	; 0x09
    33be:	4a 85       	ldd	r20, Y+10	; 0x0a
    33c0:	5b 85       	ldd	r21, Y+11	; 0x0b
    33c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    33c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    33c6:	48 17       	cp	r20, r24
    33c8:	59 07       	cpc	r21, r25
    33ca:	6a 07       	cpc	r22, r26
    33cc:	7b 07       	cpc	r23, r27
    33ce:	20 f4       	brcc	.+8      	; 0x33d8 <f_write+0x308>
    33d0:	8a 87       	std	Y+10, r24	; 0x0a
    33d2:	9b 87       	std	Y+11, r25	; 0x0b
    33d4:	ac 87       	std	Y+12, r26	; 0x0c
    33d6:	bd 87       	std	Y+13, r27	; 0x0d
    33d8:	8c 81       	ldd	r24, Y+4	; 0x04
    33da:	80 62       	ori	r24, 0x20	; 32
    33dc:	8c 83       	std	Y+4, r24	; 0x04
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	01 c0       	rjmp	.+2      	; 0x33e4 <f_write+0x314>
    33e2:	87 e0       	ldi	r24, 0x07	; 7
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	bf 90       	pop	r11
    33f6:	af 90       	pop	r10
    33f8:	9f 90       	pop	r9
    33fa:	8f 90       	pop	r8
    33fc:	7f 90       	pop	r7
    33fe:	6f 90       	pop	r6
    3400:	5f 90       	pop	r5
    3402:	4f 90       	pop	r4
    3404:	3f 90       	pop	r3
    3406:	2f 90       	pop	r2
    3408:	08 95       	ret

0000340a <f_sync>:
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	ec 01       	movw	r28, r24
    3410:	0e 94 2a 0a 	call	0x1454	; 0x1454 <validate>
    3414:	81 11       	cpse	r24, r1
    3416:	37 c0       	rjmp	.+110    	; 0x3486 <f_sync+0x7c>
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	95 ff       	sbrs	r25, 5
    341c:	34 c0       	rjmp	.+104    	; 0x3486 <f_sync+0x7c>
    341e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3420:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3422:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3424:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3426:	88 81       	ld	r24, Y
    3428:	99 81       	ldd	r25, Y+1	; 0x01
    342a:	0e 94 b1 09 	call	0x1362	; 0x1362 <move_window>
    342e:	81 11       	cpse	r24, r1
    3430:	2a c0       	rjmp	.+84     	; 0x3486 <f_sync+0x7c>
    3432:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3434:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3436:	83 85       	ldd	r24, Z+11	; 0x0b
    3438:	80 62       	ori	r24, 0x20	; 32
    343a:	83 87       	std	Z+11, r24	; 0x0b
    343c:	8a 85       	ldd	r24, Y+10	; 0x0a
    343e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3440:	ac 85       	ldd	r26, Y+12	; 0x0c
    3442:	bd 85       	ldd	r27, Y+13	; 0x0d
    3444:	84 8f       	std	Z+28, r24	; 0x1c
    3446:	95 8f       	std	Z+29, r25	; 0x1d
    3448:	a6 8f       	std	Z+30, r26	; 0x1e
    344a:	b7 8f       	std	Z+31, r27	; 0x1f
    344c:	8e 85       	ldd	r24, Y+14	; 0x0e
    344e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3450:	a8 89       	ldd	r26, Y+16	; 0x10
    3452:	b9 89       	ldd	r27, Y+17	; 0x11
    3454:	93 8f       	std	Z+27, r25	; 0x1b
    3456:	82 8f       	std	Z+26, r24	; 0x1a
    3458:	b5 8b       	std	Z+21, r27	; 0x15
    345a:	a4 8b       	std	Z+20, r26	; 0x14
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a1 e2       	ldi	r26, 0x21	; 33
    3462:	b6 e4       	ldi	r27, 0x46	; 70
    3464:	86 8b       	std	Z+22, r24	; 0x16
    3466:	97 8b       	std	Z+23, r25	; 0x17
    3468:	a0 8f       	std	Z+24, r26	; 0x18
    346a:	b1 8f       	std	Z+25, r27	; 0x19
    346c:	13 8a       	std	Z+19, r1	; 0x13
    346e:	12 8a       	std	Z+18, r1	; 0x12
    3470:	8c 81       	ldd	r24, Y+4	; 0x04
    3472:	8f 7d       	andi	r24, 0xDF	; 223
    3474:	8c 83       	std	Y+4, r24	; 0x04
    3476:	e8 81       	ld	r30, Y
    3478:	f9 81       	ldd	r31, Y+1	; 0x01
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	84 83       	std	Z+4, r24	; 0x04
    347e:	88 81       	ld	r24, Y
    3480:	99 81       	ldd	r25, Y+1	; 0x01
    3482:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <sync_fs>
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	08 95       	ret

0000348c <f_close>:
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	ec 01       	movw	r28, r24
    3492:	0e 94 05 1a 	call	0x340a	; 0x340a <f_sync>
    3496:	81 11       	cpse	r24, r1
    3498:	07 c0       	rjmp	.+14     	; 0x34a8 <f_close+0x1c>
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <validate>
    34a0:	81 11       	cpse	r24, r1
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <f_close+0x1c>
    34a4:	19 82       	std	Y+1, r1	; 0x01
    34a6:	18 82       	st	Y, r1
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	08 95       	ret

000034ae <f_lseek>:
    34ae:	2f 92       	push	r2
    34b0:	3f 92       	push	r3
    34b2:	4f 92       	push	r4
    34b4:	5f 92       	push	r5
    34b6:	6f 92       	push	r6
    34b8:	7f 92       	push	r7
    34ba:	8f 92       	push	r8
    34bc:	9f 92       	push	r9
    34be:	af 92       	push	r10
    34c0:	bf 92       	push	r11
    34c2:	cf 92       	push	r12
    34c4:	df 92       	push	r13
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <f_lseek+0x26>
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <f_lseek+0x28>
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	1c 01       	movw	r2, r24
    34dc:	6a 01       	movw	r12, r20
    34de:	7b 01       	movw	r14, r22
    34e0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <validate>
    34e4:	81 11       	cpse	r24, r1
    34e6:	83 c1       	rjmp	.+774    	; 0x37ee <f_lseek+0x340>
    34e8:	d1 01       	movw	r26, r2
    34ea:	15 96       	adiw	r26, 0x05	; 5
    34ec:	8c 91       	ld	r24, X
    34ee:	15 97       	sbiw	r26, 0x05	; 5
    34f0:	81 11       	cpse	r24, r1
    34f2:	7d c1       	rjmp	.+762    	; 0x37ee <f_lseek+0x340>
    34f4:	1a 96       	adiw	r26, 0x0a	; 10
    34f6:	8d 91       	ld	r24, X+
    34f8:	9d 91       	ld	r25, X+
    34fa:	0d 90       	ld	r0, X+
    34fc:	bc 91       	ld	r27, X
    34fe:	a0 2d       	mov	r26, r0
    3500:	8c 15       	cp	r24, r12
    3502:	9d 05       	cpc	r25, r13
    3504:	ae 05       	cpc	r26, r14
    3506:	bf 05       	cpc	r27, r15
    3508:	30 f4       	brcc	.+12     	; 0x3516 <f_lseek+0x68>
    350a:	f1 01       	movw	r30, r2
    350c:	24 81       	ldd	r18, Z+4	; 0x04
    350e:	21 fd       	sbrc	r18, 1
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <f_lseek+0x68>
    3512:	6c 01       	movw	r12, r24
    3514:	7d 01       	movw	r14, r26
    3516:	d1 01       	movw	r26, r2
    3518:	16 96       	adiw	r26, 0x06	; 6
    351a:	4d 90       	ld	r4, X+
    351c:	5d 90       	ld	r5, X+
    351e:	6d 90       	ld	r6, X+
    3520:	7c 90       	ld	r7, X
    3522:	19 97       	sbiw	r26, 0x09	; 9
    3524:	f1 01       	movw	r30, r2
    3526:	16 82       	std	Z+6, r1	; 0x06
    3528:	17 82       	std	Z+7, r1	; 0x07
    352a:	10 86       	std	Z+8, r1	; 0x08
    352c:	11 86       	std	Z+9, r1	; 0x09
    352e:	c1 14       	cp	r12, r1
    3530:	d1 04       	cpc	r13, r1
    3532:	e1 04       	cpc	r14, r1
    3534:	f1 04       	cpc	r15, r1
    3536:	09 f4       	brne	.+2      	; 0x353a <f_lseek+0x8c>
    3538:	57 c1       	rjmp	.+686    	; 0x37e8 <f_lseek+0x33a>
    353a:	00 81       	ld	r16, Z
    353c:	11 81       	ldd	r17, Z+1	; 0x01
    353e:	d8 01       	movw	r26, r16
    3540:	12 96       	adiw	r26, 0x02	; 2
    3542:	8c 90       	ld	r8, X
    3544:	91 2c       	mov	r9, r1
    3546:	a1 2c       	mov	r10, r1
    3548:	b1 2c       	mov	r11, r1
    354a:	07 2e       	mov	r0, r23
    354c:	79 e0       	ldi	r23, 0x09	; 9
    354e:	88 0c       	add	r8, r8
    3550:	99 1c       	adc	r9, r9
    3552:	aa 1c       	adc	r10, r10
    3554:	bb 1c       	adc	r11, r11
    3556:	7a 95       	dec	r23
    3558:	d1 f7       	brne	.-12     	; 0x354e <f_lseek+0xa0>
    355a:	70 2d       	mov	r23, r0
    355c:	41 14       	cp	r4, r1
    355e:	51 04       	cpc	r5, r1
    3560:	61 04       	cpc	r6, r1
    3562:	71 04       	cpc	r7, r1
    3564:	09 f4       	brne	.+2      	; 0x3568 <f_lseek+0xba>
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <f_lseek+0x138>
    3568:	b1 e0       	ldi	r27, 0x01	; 1
    356a:	4b 1a       	sub	r4, r27
    356c:	51 08       	sbc	r5, r1
    356e:	61 08       	sbc	r6, r1
    3570:	71 08       	sbc	r7, r1
    3572:	c7 01       	movw	r24, r14
    3574:	b6 01       	movw	r22, r12
    3576:	61 50       	subi	r22, 0x01	; 1
    3578:	71 09       	sbc	r23, r1
    357a:	81 09       	sbc	r24, r1
    357c:	91 09       	sbc	r25, r1
    357e:	a5 01       	movw	r20, r10
    3580:	94 01       	movw	r18, r8
    3582:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <__udivmodsi4>
    3586:	29 83       	std	Y+1, r18	; 0x01
    3588:	3a 83       	std	Y+2, r19	; 0x02
    358a:	4b 83       	std	Y+3, r20	; 0x03
    358c:	5c 83       	std	Y+4, r21	; 0x04
    358e:	c3 01       	movw	r24, r6
    3590:	b2 01       	movw	r22, r4
    3592:	a5 01       	movw	r20, r10
    3594:	94 01       	movw	r18, r8
    3596:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <__udivmodsi4>
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	ab 81       	ldd	r26, Y+3	; 0x03
    35a0:	bc 81       	ldd	r27, Y+4	; 0x04
    35a2:	82 17       	cp	r24, r18
    35a4:	93 07       	cpc	r25, r19
    35a6:	a4 07       	cpc	r26, r20
    35a8:	b5 07       	cpc	r27, r21
    35aa:	e8 f0       	brcs	.+58     	; 0x35e6 <f_lseek+0x138>
    35ac:	88 27       	eor	r24, r24
    35ae:	99 27       	eor	r25, r25
    35b0:	dc 01       	movw	r26, r24
    35b2:	88 19       	sub	r24, r8
    35b4:	99 09       	sbc	r25, r9
    35b6:	aa 09       	sbc	r26, r10
    35b8:	bb 09       	sbc	r27, r11
    35ba:	48 22       	and	r4, r24
    35bc:	59 22       	and	r5, r25
    35be:	6a 22       	and	r6, r26
    35c0:	7b 22       	and	r7, r27
    35c2:	d1 01       	movw	r26, r2
    35c4:	16 96       	adiw	r26, 0x06	; 6
    35c6:	4d 92       	st	X+, r4
    35c8:	5d 92       	st	X+, r5
    35ca:	6d 92       	st	X+, r6
    35cc:	7c 92       	st	X, r7
    35ce:	19 97       	sbiw	r26, 0x09	; 9
    35d0:	c4 18       	sub	r12, r4
    35d2:	d5 08       	sbc	r13, r5
    35d4:	e6 08       	sbc	r14, r6
    35d6:	f7 08       	sbc	r15, r7
    35d8:	52 96       	adiw	r26, 0x12	; 18
    35da:	4d 91       	ld	r20, X+
    35dc:	5d 91       	ld	r21, X+
    35de:	6d 91       	ld	r22, X+
    35e0:	7c 91       	ld	r23, X
    35e2:	55 97       	sbiw	r26, 0x15	; 21
    35e4:	32 c0       	rjmp	.+100    	; 0x364a <f_lseek+0x19c>
    35e6:	f1 01       	movw	r30, r2
    35e8:	46 85       	ldd	r20, Z+14	; 0x0e
    35ea:	57 85       	ldd	r21, Z+15	; 0x0f
    35ec:	60 89       	ldd	r22, Z+16	; 0x10
    35ee:	71 89       	ldd	r23, Z+17	; 0x11
    35f0:	41 15       	cp	r20, r1
    35f2:	51 05       	cpc	r21, r1
    35f4:	61 05       	cpc	r22, r1
    35f6:	71 05       	cpc	r23, r1
    35f8:	19 f5       	brne	.+70     	; 0x3640 <f_lseek+0x192>
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	ba 01       	movw	r22, r20
    3600:	c8 01       	movw	r24, r16
    3602:	0e 94 af 10 	call	0x215e	; 0x215e <create_chain>
    3606:	ab 01       	movw	r20, r22
    3608:	bc 01       	movw	r22, r24
    360a:	41 30       	cpi	r20, 0x01	; 1
    360c:	51 05       	cpc	r21, r1
    360e:	61 05       	cpc	r22, r1
    3610:	71 05       	cpc	r23, r1
    3612:	29 f4       	brne	.+10     	; 0x361e <f_lseek+0x170>
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	d1 01       	movw	r26, r2
    3618:	15 96       	adiw	r26, 0x05	; 5
    361a:	8c 93       	st	X, r24
    361c:	e8 c0       	rjmp	.+464    	; 0x37ee <f_lseek+0x340>
    361e:	4f 3f       	cpi	r20, 0xFF	; 255
    3620:	bf ef       	ldi	r27, 0xFF	; 255
    3622:	5b 07       	cpc	r21, r27
    3624:	6b 07       	cpc	r22, r27
    3626:	7b 07       	cpc	r23, r27
    3628:	21 f4       	brne	.+8      	; 0x3632 <f_lseek+0x184>
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	f1 01       	movw	r30, r2
    362e:	85 83       	std	Z+5, r24	; 0x05
    3630:	de c0       	rjmp	.+444    	; 0x37ee <f_lseek+0x340>
    3632:	d1 01       	movw	r26, r2
    3634:	1e 96       	adiw	r26, 0x0e	; 14
    3636:	4d 93       	st	X+, r20
    3638:	5d 93       	st	X+, r21
    363a:	6d 93       	st	X+, r22
    363c:	7c 93       	st	X, r23
    363e:	51 97       	sbiw	r26, 0x11	; 17
    3640:	f1 01       	movw	r30, r2
    3642:	42 8b       	std	Z+18, r20	; 0x12
    3644:	53 8b       	std	Z+19, r21	; 0x13
    3646:	64 8b       	std	Z+20, r22	; 0x14
    3648:	75 8b       	std	Z+21, r23	; 0x15
    364a:	41 15       	cp	r20, r1
    364c:	51 05       	cpc	r21, r1
    364e:	61 05       	cpc	r22, r1
    3650:	71 05       	cpc	r23, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <f_lseek+0x1a8>
    3654:	94 c0       	rjmp	.+296    	; 0x377e <f_lseek+0x2d0>
    3656:	8c 14       	cp	r8, r12
    3658:	9d 04       	cpc	r9, r13
    365a:	ae 04       	cpc	r10, r14
    365c:	bf 04       	cpc	r11, r15
    365e:	08 f0       	brcs	.+2      	; 0x3662 <f_lseek+0x1b4>
    3660:	5c c0       	rjmp	.+184    	; 0x371a <f_lseek+0x26c>
    3662:	d1 01       	movw	r26, r2
    3664:	14 96       	adiw	r26, 0x04	; 4
    3666:	8c 91       	ld	r24, X
    3668:	14 97       	sbiw	r26, 0x04	; 4
    366a:	81 ff       	sbrs	r24, 1
    366c:	0c c0       	rjmp	.+24     	; 0x3686 <f_lseek+0x1d8>
    366e:	8d 91       	ld	r24, X+
    3670:	9c 91       	ld	r25, X
    3672:	0e 94 af 10 	call	0x215e	; 0x215e <create_chain>
    3676:	ab 01       	movw	r20, r22
    3678:	bc 01       	movw	r22, r24
    367a:	41 15       	cp	r20, r1
    367c:	51 05       	cpc	r21, r1
    367e:	61 05       	cpc	r22, r1
    3680:	71 05       	cpc	r23, r1
    3682:	41 f4       	brne	.+16     	; 0x3694 <f_lseek+0x1e6>
    3684:	48 c0       	rjmp	.+144    	; 0x3716 <f_lseek+0x268>
    3686:	f1 01       	movw	r30, r2
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <get_fat>
    3690:	ab 01       	movw	r20, r22
    3692:	bc 01       	movw	r22, r24
    3694:	4f 3f       	cpi	r20, 0xFF	; 255
    3696:	ff ef       	ldi	r31, 0xFF	; 255
    3698:	5f 07       	cpc	r21, r31
    369a:	6f 07       	cpc	r22, r31
    369c:	7f 07       	cpc	r23, r31
    369e:	29 f4       	brne	.+10     	; 0x36aa <f_lseek+0x1fc>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	d1 01       	movw	r26, r2
    36a4:	15 96       	adiw	r26, 0x05	; 5
    36a6:	8c 93       	st	X, r24
    36a8:	a2 c0       	rjmp	.+324    	; 0x37ee <f_lseek+0x340>
    36aa:	42 30       	cpi	r20, 0x02	; 2
    36ac:	51 05       	cpc	r21, r1
    36ae:	61 05       	cpc	r22, r1
    36b0:	71 05       	cpc	r23, r1
    36b2:	60 f0       	brcs	.+24     	; 0x36cc <f_lseek+0x21e>
    36b4:	d1 01       	movw	r26, r2
    36b6:	ed 91       	ld	r30, X+
    36b8:	fc 91       	ld	r31, X
    36ba:	86 89       	ldd	r24, Z+22	; 0x16
    36bc:	97 89       	ldd	r25, Z+23	; 0x17
    36be:	a0 8d       	ldd	r26, Z+24	; 0x18
    36c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    36c2:	48 17       	cp	r20, r24
    36c4:	59 07       	cpc	r21, r25
    36c6:	6a 07       	cpc	r22, r26
    36c8:	7b 07       	cpc	r23, r27
    36ca:	20 f0       	brcs	.+8      	; 0x36d4 <f_lseek+0x226>
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	f1 01       	movw	r30, r2
    36d0:	85 83       	std	Z+5, r24	; 0x05
    36d2:	8d c0       	rjmp	.+282    	; 0x37ee <f_lseek+0x340>
    36d4:	d1 01       	movw	r26, r2
    36d6:	52 96       	adiw	r26, 0x12	; 18
    36d8:	4d 93       	st	X+, r20
    36da:	5d 93       	st	X+, r21
    36dc:	6d 93       	st	X+, r22
    36de:	7c 93       	st	X, r23
    36e0:	55 97       	sbiw	r26, 0x15	; 21
    36e2:	16 96       	adiw	r26, 0x06	; 6
    36e4:	8d 91       	ld	r24, X+
    36e6:	9d 91       	ld	r25, X+
    36e8:	0d 90       	ld	r0, X+
    36ea:	bc 91       	ld	r27, X
    36ec:	a0 2d       	mov	r26, r0
    36ee:	88 0d       	add	r24, r8
    36f0:	99 1d       	adc	r25, r9
    36f2:	aa 1d       	adc	r26, r10
    36f4:	bb 1d       	adc	r27, r11
    36f6:	f1 01       	movw	r30, r2
    36f8:	86 83       	std	Z+6, r24	; 0x06
    36fa:	97 83       	std	Z+7, r25	; 0x07
    36fc:	a0 87       	std	Z+8, r26	; 0x08
    36fe:	b1 87       	std	Z+9, r27	; 0x09
    3700:	c8 18       	sub	r12, r8
    3702:	d9 08       	sbc	r13, r9
    3704:	ea 08       	sbc	r14, r10
    3706:	fb 08       	sbc	r15, r11
    3708:	8c 14       	cp	r8, r12
    370a:	9d 04       	cpc	r9, r13
    370c:	ae 04       	cpc	r10, r14
    370e:	bf 04       	cpc	r11, r15
    3710:	08 f4       	brcc	.+2      	; 0x3714 <f_lseek+0x266>
    3712:	a7 cf       	rjmp	.-178    	; 0x3662 <f_lseek+0x1b4>
    3714:	02 c0       	rjmp	.+4      	; 0x371a <f_lseek+0x26c>
    3716:	75 01       	movw	r14, r10
    3718:	64 01       	movw	r12, r8
    371a:	f1 01       	movw	r30, r2
    371c:	86 81       	ldd	r24, Z+6	; 0x06
    371e:	97 81       	ldd	r25, Z+7	; 0x07
    3720:	a0 85       	ldd	r26, Z+8	; 0x08
    3722:	b1 85       	ldd	r27, Z+9	; 0x09
    3724:	8c 0d       	add	r24, r12
    3726:	9d 1d       	adc	r25, r13
    3728:	ae 1d       	adc	r26, r14
    372a:	bf 1d       	adc	r27, r15
    372c:	86 83       	std	Z+6, r24	; 0x06
    372e:	97 83       	std	Z+7, r25	; 0x07
    3730:	a0 87       	std	Z+8, r26	; 0x08
    3732:	b1 87       	std	Z+9, r27	; 0x09
    3734:	d7 01       	movw	r26, r14
    3736:	c6 01       	movw	r24, r12
    3738:	91 70       	andi	r25, 0x01	; 1
    373a:	aa 27       	eor	r26, r26
    373c:	bb 27       	eor	r27, r27
    373e:	89 2b       	or	r24, r25
    3740:	8a 2b       	or	r24, r26
    3742:	8b 2b       	or	r24, r27
    3744:	01 f1       	breq	.+64     	; 0x3786 <f_lseek+0x2d8>
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <clust2sect>
    374e:	61 15       	cp	r22, r1
    3750:	71 05       	cpc	r23, r1
    3752:	81 05       	cpc	r24, r1
    3754:	91 05       	cpc	r25, r1
    3756:	29 f4       	brne	.+10     	; 0x3762 <f_lseek+0x2b4>
    3758:	82 e0       	ldi	r24, 0x02	; 2
    375a:	d1 01       	movw	r26, r2
    375c:	15 96       	adiw	r26, 0x05	; 5
    375e:	8c 93       	st	X, r24
    3760:	46 c0       	rjmp	.+140    	; 0x37ee <f_lseek+0x340>
    3762:	0b 2e       	mov	r0, r27
    3764:	b9 e0       	ldi	r27, 0x09	; 9
    3766:	f6 94       	lsr	r15
    3768:	e7 94       	ror	r14
    376a:	d7 94       	ror	r13
    376c:	c7 94       	ror	r12
    376e:	ba 95       	dec	r27
    3770:	d1 f7       	brne	.-12     	; 0x3766 <f_lseek+0x2b8>
    3772:	b0 2d       	mov	r27, r0
    3774:	c6 0e       	add	r12, r22
    3776:	d7 1e       	adc	r13, r23
    3778:	e8 1e       	adc	r14, r24
    377a:	f9 1e       	adc	r15, r25
    377c:	07 c0       	rjmp	.+14     	; 0x378c <f_lseek+0x2de>
    377e:	c1 2c       	mov	r12, r1
    3780:	d1 2c       	mov	r13, r1
    3782:	76 01       	movw	r14, r12
    3784:	03 c0       	rjmp	.+6      	; 0x378c <f_lseek+0x2de>
    3786:	c1 2c       	mov	r12, r1
    3788:	d1 2c       	mov	r13, r1
    378a:	76 01       	movw	r14, r12
    378c:	f1 01       	movw	r30, r2
    378e:	86 81       	ldd	r24, Z+6	; 0x06
    3790:	97 81       	ldd	r25, Z+7	; 0x07
    3792:	a0 85       	ldd	r26, Z+8	; 0x08
    3794:	b1 85       	ldd	r27, Z+9	; 0x09
    3796:	ac 01       	movw	r20, r24
    3798:	bd 01       	movw	r22, r26
    379a:	51 70       	andi	r21, 0x01	; 1
    379c:	66 27       	eor	r22, r22
    379e:	77 27       	eor	r23, r23
    37a0:	45 2b       	or	r20, r21
    37a2:	46 2b       	or	r20, r22
    37a4:	47 2b       	or	r20, r23
    37a6:	69 f0       	breq	.+26     	; 0x37c2 <f_lseek+0x314>
    37a8:	46 89       	ldd	r20, Z+22	; 0x16
    37aa:	57 89       	ldd	r21, Z+23	; 0x17
    37ac:	60 8d       	ldd	r22, Z+24	; 0x18
    37ae:	71 8d       	ldd	r23, Z+25	; 0x19
    37b0:	4c 15       	cp	r20, r12
    37b2:	5d 05       	cpc	r21, r13
    37b4:	6e 05       	cpc	r22, r14
    37b6:	7f 05       	cpc	r23, r15
    37b8:	21 f0       	breq	.+8      	; 0x37c2 <f_lseek+0x314>
    37ba:	c6 8a       	std	Z+22, r12	; 0x16
    37bc:	d7 8a       	std	Z+23, r13	; 0x17
    37be:	e0 8e       	std	Z+24, r14	; 0x18
    37c0:	f1 8e       	std	Z+25, r15	; 0x19
    37c2:	f1 01       	movw	r30, r2
    37c4:	42 85       	ldd	r20, Z+10	; 0x0a
    37c6:	53 85       	ldd	r21, Z+11	; 0x0b
    37c8:	64 85       	ldd	r22, Z+12	; 0x0c
    37ca:	75 85       	ldd	r23, Z+13	; 0x0d
    37cc:	48 17       	cp	r20, r24
    37ce:	59 07       	cpc	r21, r25
    37d0:	6a 07       	cpc	r22, r26
    37d2:	7b 07       	cpc	r23, r27
    37d4:	58 f4       	brcc	.+22     	; 0x37ec <f_lseek+0x33e>
    37d6:	82 87       	std	Z+10, r24	; 0x0a
    37d8:	93 87       	std	Z+11, r25	; 0x0b
    37da:	a4 87       	std	Z+12, r26	; 0x0c
    37dc:	b5 87       	std	Z+13, r27	; 0x0d
    37de:	84 81       	ldd	r24, Z+4	; 0x04
    37e0:	80 62       	ori	r24, 0x20	; 32
    37e2:	84 83       	std	Z+4, r24	; 0x04
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	03 c0       	rjmp	.+6      	; 0x37ee <f_lseek+0x340>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	01 c0       	rjmp	.+2      	; 0x37ee <f_lseek+0x340>
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	ff 90       	pop	r15
    3800:	ef 90       	pop	r14
    3802:	df 90       	pop	r13
    3804:	cf 90       	pop	r12
    3806:	bf 90       	pop	r11
    3808:	af 90       	pop	r10
    380a:	9f 90       	pop	r9
    380c:	8f 90       	pop	r8
    380e:	7f 90       	pop	r7
    3810:	6f 90       	pop	r6
    3812:	5f 90       	pop	r5
    3814:	4f 90       	pop	r4
    3816:	3f 90       	pop	r3
    3818:	2f 90       	pop	r2
    381a:	08 95       	ret

0000381c <f_gets>:
    381c:	8f 92       	push	r8
    381e:	9f 92       	push	r9
    3820:	af 92       	push	r10
    3822:	bf 92       	push	r11
    3824:	cf 92       	push	r12
    3826:	df 92       	push	r13
    3828:	ef 92       	push	r14
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    3834:	00 d0       	rcall	.+0      	; 0x3836 <f_gets+0x1a>
    3836:	00 d0       	rcall	.+0      	; 0x3838 <f_gets+0x1c>
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	88 2e       	mov	r8, r24
    383e:	99 2e       	mov	r9, r25
    3840:	5a 01       	movw	r10, r20
    3842:	e8 2e       	mov	r14, r24
    3844:	f9 2e       	mov	r15, r25
    3846:	00 e0       	ldi	r16, 0x00	; 0
    3848:	10 e0       	ldi	r17, 0x00	; 0
    384a:	6b 01       	movw	r12, r22
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	c8 1a       	sub	r12, r24
    3850:	d1 08       	sbc	r13, r1
    3852:	1d c0       	rjmp	.+58     	; 0x388e <f_gets+0x72>
    3854:	9e 01       	movw	r18, r28
    3856:	2d 5f       	subi	r18, 0xFD	; 253
    3858:	3f 4f       	sbci	r19, 0xFF	; 255
    385a:	41 e0       	ldi	r20, 0x01	; 1
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	be 01       	movw	r22, r28
    3860:	6f 5f       	subi	r22, 0xFF	; 255
    3862:	7f 4f       	sbci	r23, 0xFF	; 255
    3864:	c5 01       	movw	r24, r10
    3866:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <f_read>
    386a:	2b 81       	ldd	r18, Y+3	; 0x03
    386c:	3c 81       	ldd	r19, Y+4	; 0x04
    386e:	21 30       	cpi	r18, 0x01	; 1
    3870:	31 05       	cpc	r19, r1
    3872:	81 f4       	brne	.+32     	; 0x3894 <f_gets+0x78>
    3874:	29 81       	ldd	r18, Y+1	; 0x01
    3876:	2d 30       	cpi	r18, 0x0D	; 13
    3878:	51 f0       	breq	.+20     	; 0x388e <f_gets+0x72>
    387a:	ef ef       	ldi	r30, 0xFF	; 255
    387c:	ee 1a       	sub	r14, r30
    387e:	fe 0a       	sbc	r15, r30
    3880:	f7 01       	movw	r30, r14
    3882:	31 97       	sbiw	r30, 0x01	; 1
    3884:	20 83       	st	Z, r18
    3886:	0f 5f       	subi	r16, 0xFF	; 255
    3888:	1f 4f       	sbci	r17, 0xFF	; 255
    388a:	2a 30       	cpi	r18, 0x0A	; 10
    388c:	19 f0       	breq	.+6      	; 0x3894 <f_gets+0x78>
    388e:	0c 15       	cp	r16, r12
    3890:	1d 05       	cpc	r17, r13
    3892:	04 f3       	brlt	.-64     	; 0x3854 <f_gets+0x38>
    3894:	f7 01       	movw	r30, r14
    3896:	10 82       	st	Z, r1
    3898:	01 2b       	or	r16, r17
    389a:	19 f0       	breq	.+6      	; 0x38a2 <f_gets+0x86>
    389c:	88 2d       	mov	r24, r8
    389e:	99 2d       	mov	r25, r9
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <f_gets+0x8a>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	df 90       	pop	r13
    38bc:	cf 90       	pop	r12
    38be:	bf 90       	pop	r11
    38c0:	af 90       	pop	r10
    38c2:	9f 90       	pop	r9
    38c4:	8f 90       	pop	r8
    38c6:	08 95       	ret

000038c8 <dly_us>:
#define DO			(PINB &	0x08)	/* Test for MMC DO ('H':true, 'L':false) */

static void dly_us (UINT n)
{
	do {	/* 9 clocks per loop on avr-gcc -Os */
		PINB; PINB; PINB; PINB; PINB;
    38c8:	26 b3       	in	r18, 0x16	; 22
    38ca:	26 b3       	in	r18, 0x16	; 22
    38cc:	26 b3       	in	r18, 0x16	; 22
    38ce:	26 b3       	in	r18, 0x16	; 22
    38d0:	26 b3       	in	r18, 0x16	; 22
	} while (--n);
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	c9 f7       	brne	.-14     	; 0x38c8 <dly_us>
}
    38d6:	08 95       	ret

000038d8 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    38d8:	fc 01       	movw	r30, r24
    38da:	68 0f       	add	r22, r24
    38dc:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    38de:	91 91       	ld	r25, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    38e0:	99 23       	and	r25, r25
    38e2:	14 f4       	brge	.+4      	; 0x38e8 <xmit_mmc+0x10>
    38e4:	c2 9a       	sbi	0x18, 2	; 24
    38e6:	01 c0       	rjmp	.+2      	; 0x38ea <xmit_mmc+0x12>
    38e8:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    38ea:	c1 9a       	sbi	0x18, 1	; 24
    38ec:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    38ee:	96 ff       	sbrs	r25, 6
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <xmit_mmc+0x1e>
    38f2:	c2 9a       	sbi	0x18, 2	; 24
    38f4:	01 c0       	rjmp	.+2      	; 0x38f8 <xmit_mmc+0x20>
    38f6:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    38f8:	c1 9a       	sbi	0x18, 1	; 24
    38fa:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    38fc:	95 ff       	sbrs	r25, 5
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <xmit_mmc+0x2c>
    3900:	c2 9a       	sbi	0x18, 2	; 24
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <xmit_mmc+0x2e>
    3904:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    3906:	c1 9a       	sbi	0x18, 1	; 24
    3908:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    390a:	94 ff       	sbrs	r25, 4
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <xmit_mmc+0x3a>
    390e:	c2 9a       	sbi	0x18, 2	; 24
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <xmit_mmc+0x3c>
    3912:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    3914:	c1 9a       	sbi	0x18, 1	; 24
    3916:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    3918:	93 ff       	sbrs	r25, 3
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <xmit_mmc+0x48>
    391c:	c2 9a       	sbi	0x18, 2	; 24
    391e:	01 c0       	rjmp	.+2      	; 0x3922 <xmit_mmc+0x4a>
    3920:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    3922:	c1 9a       	sbi	0x18, 1	; 24
    3924:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    3926:	92 ff       	sbrs	r25, 2
    3928:	02 c0       	rjmp	.+4      	; 0x392e <xmit_mmc+0x56>
    392a:	c2 9a       	sbi	0x18, 2	; 24
    392c:	01 c0       	rjmp	.+2      	; 0x3930 <xmit_mmc+0x58>
    392e:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    3930:	c1 9a       	sbi	0x18, 1	; 24
    3932:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    3934:	91 ff       	sbrs	r25, 1
    3936:	02 c0       	rjmp	.+4      	; 0x393c <xmit_mmc+0x64>
    3938:	c2 9a       	sbi	0x18, 2	; 24
    393a:	01 c0       	rjmp	.+2      	; 0x393e <xmit_mmc+0x66>
    393c:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    393e:	c1 9a       	sbi	0x18, 1	; 24
    3940:	c1 98       	cbi	0x18, 1	; 24
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    3942:	90 ff       	sbrs	r25, 0
    3944:	02 c0       	rjmp	.+4      	; 0x394a <xmit_mmc+0x72>
    3946:	c2 9a       	sbi	0x18, 2	; 24
    3948:	01 c0       	rjmp	.+2      	; 0x394c <xmit_mmc+0x74>
    394a:	c2 98       	cbi	0x18, 2	; 24
		CK_H(); CK_L();
    394c:	c1 9a       	sbi	0x18, 1	; 24
    394e:	c1 98       	cbi	0x18, 1	; 24
	} while (--bc);
    3950:	e6 17       	cp	r30, r22
    3952:	f7 07       	cpc	r31, r23
    3954:	21 f6       	brne	.-120    	; 0x38de <xmit_mmc+0x6>
}
    3956:	08 95       	ret

00003958 <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
    3958:	c2 9a       	sbi	0x18, 2	; 24
    395a:	fc 01       	movw	r30, r24
    395c:	68 0f       	add	r22, r24
    395e:	79 1f       	adc	r23, r25

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    3960:	96 b3       	in	r25, 0x16	; 22
		CK_H(); CK_L();
    3962:	c1 9a       	sbi	0x18, 1	; 24
    3964:	c1 98       	cbi	0x18, 1	; 24


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    3966:	93 fb       	bst	r25, 3
    3968:	99 27       	eor	r25, r25
    396a:	90 f9       	bld	r25, 0
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    396c:	99 0f       	add	r25, r25
    396e:	b3 99       	sbic	0x16, 3	; 22
    3970:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3972:	c1 9a       	sbi	0x18, 1	; 24
    3974:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit5 */
    3976:	99 0f       	add	r25, r25
    3978:	b3 99       	sbic	0x16, 3	; 22
    397a:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    397c:	c1 9a       	sbi	0x18, 1	; 24
    397e:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit4 */
    3980:	99 0f       	add	r25, r25
    3982:	b3 99       	sbic	0x16, 3	; 22
    3984:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3986:	c1 9a       	sbi	0x18, 1	; 24
    3988:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit3 */
    398a:	99 0f       	add	r25, r25
    398c:	b3 99       	sbic	0x16, 3	; 22
    398e:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3990:	c1 9a       	sbi	0x18, 1	; 24
    3992:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit2 */
    3994:	99 0f       	add	r25, r25
    3996:	b3 99       	sbic	0x16, 3	; 22
    3998:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    399a:	c1 9a       	sbi	0x18, 1	; 24
    399c:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit1 */
    399e:	99 0f       	add	r25, r25
    39a0:	b3 99       	sbic	0x16, 3	; 22
    39a2:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    39a4:	c1 9a       	sbi	0x18, 1	; 24
    39a6:	c1 98       	cbi	0x18, 1	; 24
		r <<= 1; if (DO) r++;	/* bit0 */
    39a8:	99 0f       	add	r25, r25
    39aa:	b3 99       	sbic	0x16, 3	; 22
    39ac:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    39ae:	c1 9a       	sbi	0x18, 1	; 24
    39b0:	c1 98       	cbi	0x18, 1	; 24
		*buff++ = r;			/* Store a received byte */
    39b2:	91 93       	st	Z+, r25
	} while (--bc);
    39b4:	e6 17       	cp	r30, r22
    39b6:	f7 07       	cpc	r31, r23
    39b8:	99 f6       	brne	.-90     	; 0x3960 <rcvr_mmc+0x8>
}
    39ba:	08 95       	ret

000039bc <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	1f 92       	push	r1
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    39ca:	08 e8       	ldi	r16, 0x88	; 136
    39cc:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    39ce:	61 e0       	ldi	r22, 0x01	; 1
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	ce 01       	movw	r24, r28
    39d4:	01 96       	adiw	r24, 0x01	; 1
    39d6:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
		if (d == 0xFF) break;
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	8f 3f       	cpi	r24, 0xFF	; 255
    39de:	39 f0       	breq	.+14     	; 0x39ee <wait_ready+0x32>
		DLY_US(100);
    39e0:	84 e6       	ldi	r24, 0x64	; 100
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    39e8:	01 50       	subi	r16, 0x01	; 1
    39ea:	11 09       	sbc	r17, r1
    39ec:	81 f7       	brne	.-32     	; 0x39ce <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		DLY_US(100);
	}

	return tmr ? 1 : 0;
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	01 2b       	or	r16, r17
    39f4:	11 f4       	brne	.+4      	; 0x39fa <wait_ready+0x3e>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
}
    39fa:	0f 90       	pop	r0
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	08 95       	ret

00003a06 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	1f 92       	push	r1
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    3a10:	c0 9a       	sbi	0x18, 0	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3a12:	61 e0       	ldi	r22, 0x01	; 1
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	ce 01       	movw	r24, r28
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
}
    3a1e:	0f 90       	pop	r0
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	08 95       	ret

00003a26 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	1f 92       	push	r1
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/*Set CS# low */
    3a34:	c0 98       	cbi	0x18, 0	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    3a36:	61 e0       	ldi	r22, 0x01	; 1
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	01 96       	adiw	r24, 0x01	; 1
    3a3e:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    3a42:	0e 94 de 1c 	call	0x39bc	; 0x39bc <wait_ready>
    3a46:	8c 01       	movw	r16, r24
    3a48:	89 2b       	or	r24, r25
    3a4a:	19 f4       	brne	.+6      	; 0x3a52 <select+0x2c>

	deselect();
    3a4c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>
	return 0;			/* Failed */
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <select+0x30>
{
	BYTE d;

	CS_L();				/*Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    3a52:	01 e0       	ldi	r16, 0x01	; 1
    3a54:	10 e0       	ldi	r17, 0x00	; 0

	deselect();
	return 0;			/* Failed */
}
    3a56:	c8 01       	movw	r24, r16
    3a58:	0f 90       	pop	r0
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	08 95       	ret

00003a64 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    3a64:	cf 92       	push	r12
    3a66:	df 92       	push	r13
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <rcvr_datablock+0x12>
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	7c 01       	movw	r14, r24
    3a7c:	6b 01       	movw	r12, r22
    3a7e:	08 ee       	ldi	r16, 0xE8	; 232
    3a80:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	ce 01       	movw	r24, r28
    3a88:	01 96       	adiw	r24, 0x01	; 1
    3a8a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    3a8e:	99 81       	ldd	r25, Y+1	; 0x01
    3a90:	9f 3f       	cpi	r25, 0xFF	; 255
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <rcvr_datablock+0x3e>
		DLY_US(100);
    3a94:	84 e6       	ldi	r24, 0x64	; 100
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <dly_us>
    3a9c:	01 50       	subi	r16, 0x01	; 1
    3a9e:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    3aa0:	81 f7       	brne	.-32     	; 0x3a82 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		DLY_US(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    3aa2:	99 81       	ldd	r25, Y+1	; 0x01
    3aa4:	9e 3f       	cpi	r25, 0xFE	; 254
    3aa6:	69 f4       	brne	.+26     	; 0x3ac2 <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    3aa8:	b6 01       	movw	r22, r12
    3aaa:	c7 01       	movw	r24, r14
    3aac:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    3ab0:	62 e0       	ldi	r22, 0x02	; 2
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>

	return 1;						/* Return with success */
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		DLY_US(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	1f 91       	pop	r17
    3ad0:	0f 91       	pop	r16
    3ad2:	ff 90       	pop	r15
    3ad4:	ef 90       	pop	r14
    3ad6:	df 90       	pop	r13
    3ad8:	cf 90       	pop	r12
    3ada:	08 95       	ret

00003adc <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3adc:	ef 92       	push	r14
    3ade:	ff 92       	push	r15
    3ae0:	1f 93       	push	r17
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <xmit_datablock+0xc>
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	7c 01       	movw	r14, r24
    3aee:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3af0:	0e 94 de 1c 	call	0x39bc	; 0x39bc <wait_ready>
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	31 f1       	breq	.+76     	; 0x3b44 <xmit_datablock+0x68>

	d[0] = token;
    3af8:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3afa:	61 e0       	ldi	r22, 0x01	; 1
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	ce 01       	movw	r24, r28
    3b00:	01 96       	adiw	r24, 0x01	; 1
    3b02:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    3b06:	1d 3f       	cpi	r17, 0xFD	; 253
    3b08:	d9 f0       	breq	.+54     	; 0x3b40 <xmit_datablock+0x64>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	72 e0       	ldi	r23, 0x02	; 2
    3b0e:	c7 01       	movw	r24, r14
    3b10:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3b14:	62 e0       	ldi	r22, 0x02	; 2
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	ce 01       	movw	r24, r28
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	70 e0       	ldi	r23, 0x00	; 0
    3b24:	ce 01       	movw	r24, r28
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	8f 71       	andi	r24, 0x1F	; 31
    3b30:	31 e0       	ldi	r19, 0x01	; 1
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	85 30       	cpi	r24, 0x05	; 5
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <xmit_datablock+0x5e>
    3b38:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    3b3a:	83 2f       	mov	r24, r19
    3b3c:	92 2f       	mov	r25, r18
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <xmit_datablock+0x68>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
}
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	1f 91       	pop	r17
    3b4e:	ff 90       	pop	r15
    3b50:	ef 90       	pop	r14
    3b52:	08 95       	ret

00003b54 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	27 97       	sbiw	r28, 0x07	; 7
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	18 2f       	mov	r17, r24
    3b74:	04 2f       	mov	r16, r20
    3b76:	f5 2e       	mov	r15, r21
    3b78:	e6 2e       	mov	r14, r22
    3b7a:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3b7c:	88 23       	and	r24, r24
    3b7e:	54 f4       	brge	.+20     	; 0x3b94 <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	ba 01       	movw	r22, r20
    3b86:	87 e3       	ldi	r24, 0x37	; 55
    3b88:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
		if (n > 1) return n;
    3b8c:	82 30       	cpi	r24, 0x02	; 2
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <send_cmd+0x3e>
    3b90:	57 c0       	rjmp	.+174    	; 0x3c40 <send_cmd+0xec>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3b92:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3b94:	1c 30       	cpi	r17, 0x0C	; 12
    3b96:	29 f1       	breq	.+74     	; 0x3be2 <send_cmd+0x8e>
		deselect();
    3b98:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>
		if (!select()) return 0xFF;
    3b9c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <select>
    3ba0:	89 2b       	or	r24, r25
    3ba2:	e9 f0       	breq	.+58     	; 0x3bde <send_cmd+0x8a>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3ba4:	81 2f       	mov	r24, r17
    3ba6:	80 64       	ori	r24, 0x40	; 64
    3ba8:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3baa:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3bac:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3bae:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3bb0:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    3bb2:	11 23       	and	r17, r17
    3bb4:	e1 f1       	breq	.+120    	; 0x3c2e <send_cmd+0xda>
    3bb6:	38 c0       	rjmp	.+112    	; 0x3c28 <send_cmd+0xd4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3bc4:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	ce 01       	movw	r24, r28
    3bcc:	01 96       	adiw	r24, 0x01	; 1
    3bce:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
	while ((d & 0x80) && --n);
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	88 23       	and	r24, r24
    3bd6:	a4 f5       	brge	.+104    	; 0x3c40 <send_cmd+0xec>
    3bd8:	11 50       	subi	r17, 0x01	; 1
    3bda:	a9 f7       	brne	.-22     	; 0x3bc6 <send_cmd+0x72>
    3bdc:	31 c0       	rjmp	.+98     	; 0x3c40 <send_cmd+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	2f c0       	rjmp	.+94     	; 0x3c40 <send_cmd+0xec>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3be2:	8c e4       	ldi	r24, 0x4C	; 76
    3be4:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3be6:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3be8:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3bea:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3bec:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3bf2:	66 e0       	ldi	r22, 0x06	; 6
    3bf4:	70 e0       	ldi	r23, 0x00	; 0
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	02 96       	adiw	r24, 0x02	; 2
    3bfa:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3bfe:	1c 30       	cpi	r17, 0x0C	; 12
    3c00:	09 f7       	brne	.-62     	; 0x3bc4 <send_cmd+0x70>
    3c02:	da cf       	rjmp	.-76     	; 0x3bb8 <send_cmd+0x64>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3c04:	87 e8       	ldi	r24, 0x87	; 135
    3c06:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3c08:	66 e0       	ldi	r22, 0x06	; 6
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	02 96       	adiw	r24, 0x02	; 2
    3c10:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>
    3c14:	d7 cf       	rjmp	.-82     	; 0x3bc4 <send_cmd+0x70>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3c1a:	66 e0       	ldi	r22, 0x06	; 6
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	ce 01       	movw	r24, r28
    3c20:	02 96       	adiw	r24, 0x02	; 2
    3c22:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>
    3c26:	ce cf       	rjmp	.-100    	; 0x3bc4 <send_cmd+0x70>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    3c28:	18 30       	cpi	r17, 0x08	; 8
    3c2a:	61 f3       	breq	.-40     	; 0x3c04 <send_cmd+0xb0>
    3c2c:	f4 cf       	rjmp	.-24     	; 0x3c16 <send_cmd+0xc2>
	buf[5] = n;
    3c2e:	85 e9       	ldi	r24, 0x95	; 149
    3c30:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3c32:	66 e0       	ldi	r22, 0x06	; 6
    3c34:	70 e0       	ldi	r23, 0x00	; 0
    3c36:	ce 01       	movw	r24, r28
    3c38:	02 96       	adiw	r24, 0x02	; 2
    3c3a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <xmit_mmc>
    3c3e:	c2 cf       	rjmp	.-124    	; 0x3bc4 <send_cmd+0x70>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    3c40:	27 96       	adiw	r28, 0x07	; 7
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	de bf       	out	0x3e, r29	; 62
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	cd bf       	out	0x3d, r28	; 61
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	0f 91       	pop	r16
    3c54:	ff 90       	pop	r15
    3c56:	ef 90       	pop	r14
    3c58:	df 90       	pop	r13
    3c5a:	08 95       	ret

00003c5c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	1f 92       	push	r1
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
	DSTATUS s;
	BYTE d;


	if (drv) return STA_NOINIT;
    3c68:	81 11       	cpse	r24, r1
    3c6a:	18 c0       	rjmp	.+48     	; 0x3c9c <disk_status+0x40>

	/* Check if the card is kept initialized */
	s = Stat;
    3c6c:	10 91 9b 01 	lds	r17, 0x019B
	if (!(s & STA_NOINIT)) {
    3c70:	10 fd       	sbrc	r17, 0
    3c72:	10 c0       	rjmp	.+32     	; 0x3c94 <disk_status+0x38>
		if (send_cmd(CMD13, 0))	/* Read card status */
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	ba 01       	movw	r22, r20
    3c7a:	8d e0       	ldi	r24, 0x0D	; 13
    3c7c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3c80:	81 11       	cpse	r24, r1
			s = STA_NOINIT;
    3c82:	11 e0       	ldi	r17, 0x01	; 1
		rcvr_mmc(&d, 1);		/* Receive following half of R2 */
    3c84:	61 e0       	ldi	r22, 0x01	; 1
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	ce 01       	movw	r24, r28
    3c8a:	01 96       	adiw	r24, 0x01	; 1
    3c8c:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
		deselect();
    3c90:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>
	}
	Stat = s;
    3c94:	10 93 9b 01 	sts	0x019B, r17

	return s;
    3c98:	81 2f       	mov	r24, r17
    3c9a:	01 c0       	rjmp	.+2      	; 0x3c9e <disk_status+0x42>
{
	DSTATUS s;
	BYTE d;


	if (drv) return STA_NOINIT;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
		deselect();
	}
	Stat = s;

	return s;
}
    3c9e:	0f 90       	pop	r0
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	08 95       	ret

00003ca8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <disk_initialize+0xe>
    3cb6:	00 d0       	rcall	.+0      	; 0x3cb8 <disk_initialize+0x10>
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3cbc:	81 11       	cpse	r24, r1
    3cbe:	b2 c0       	rjmp	.+356    	; 0x3e24 <disk_initialize+0x17c>
	} while (--n);
}

static void init_port (void)
{
	PORTE &= 0x7F;	/* Always power on */
    3cc0:	1f 98       	cbi	0x03, 7	; 3
	DDRE |= 0x80;
    3cc2:	17 9a       	sbi	0x02, 7	; 2
	dly_us(10000);	/* 10ms */
    3cc4:	80 e1       	ldi	r24, 0x10	; 16
    3cc6:	97 e2       	ldi	r25, 0x27	; 39
    3cc8:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <dly_us>

	PORTB = (PORTB & 0xFB) | 0x39;	/* CS=H, SCK=L, DI=H, DO=pu */
    3ccc:	88 b3       	in	r24, 0x18	; 24
    3cce:	82 7c       	andi	r24, 0xC2	; 194
    3cd0:	89 63       	ori	r24, 0x39	; 57
    3cd2:	88 bb       	out	0x18, r24	; 24
	DDRB  = (DDRB & 0xC7) | 0x07;
    3cd4:	87 b3       	in	r24, 0x17	; 23
    3cd6:	80 7c       	andi	r24, 0xC0	; 192
    3cd8:	87 60       	ori	r24, 0x07	; 7
    3cda:	87 bb       	out	0x17, r24	; 23
    3cdc:	1a e0       	ldi	r17, 0x0A	; 10


	if (drv) return RES_NOTRDY;

	INIT_PORT();				/* Initialize control port */
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* 80 dummy clocks */
    3cde:	61 e0       	ldi	r22, 0x01	; 1
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	01 96       	adiw	r24, 0x01	; 1
    3ce6:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
    3cea:	11 50       	subi	r17, 0x01	; 1
    3cec:	c1 f7       	brne	.-16     	; 0x3cde <disk_initialize+0x36>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	ba 01       	movw	r22, r20
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3cfa:	81 30       	cpi	r24, 0x01	; 1
    3cfc:	09 f0       	breq	.+2      	; 0x3d00 <disk_initialize+0x58>
    3cfe:	77 c0       	rjmp	.+238    	; 0x3dee <disk_initialize+0x146>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3d00:	4a ea       	ldi	r20, 0xAA	; 170
    3d02:	51 e0       	ldi	r21, 0x01	; 1
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	70 e0       	ldi	r23, 0x00	; 0
    3d08:	88 e0       	ldi	r24, 0x08	; 8
    3d0a:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3d0e:	81 30       	cpi	r24, 0x01	; 1
    3d10:	d1 f5       	brne	.+116    	; 0x3d86 <disk_initialize+0xde>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3d12:	64 e0       	ldi	r22, 0x04	; 4
    3d14:	70 e0       	ldi	r23, 0x00	; 0
    3d16:	ce 01       	movw	r24, r28
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <disk_initialize+0x7e>
    3d24:	66 c0       	rjmp	.+204    	; 0x3df2 <disk_initialize+0x14a>
    3d26:	8c 81       	ldd	r24, Y+4	; 0x04
    3d28:	8a 3a       	cpi	r24, 0xAA	; 170
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <disk_initialize+0x86>
    3d2c:	64 c0       	rjmp	.+200    	; 0x3df6 <disk_initialize+0x14e>
    3d2e:	08 ee       	ldi	r16, 0xE8	; 232
    3d30:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3d32:	40 e0       	ldi	r20, 0x00	; 0
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	70 e4       	ldi	r23, 0x40	; 64
    3d3a:	89 ea       	ldi	r24, 0xA9	; 169
    3d3c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3d40:	88 23       	and	r24, r24
    3d42:	49 f0       	breq	.+18     	; 0x3d56 <disk_initialize+0xae>
					DLY_US(1000);
    3d44:	88 ee       	ldi	r24, 0xE8	; 232
    3d46:	93 e0       	ldi	r25, 0x03	; 3
    3d48:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3d4c:	01 50       	subi	r16, 0x01	; 1
    3d4e:	11 09       	sbc	r17, r1
    3d50:	81 f7       	brne	.-32     	; 0x3d32 <disk_initialize+0x8a>
	if (drv) return RES_NOTRDY;

	INIT_PORT();				/* Initialize control port */
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* 80 dummy clocks */

	ty = 0;
    3d52:	f1 2c       	mov	r15, r1
    3d54:	5c c0       	rjmp	.+184    	; 0x3e0e <disk_initialize+0x166>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					DLY_US(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3d56:	01 2b       	or	r16, r17
    3d58:	09 f4       	brne	.+2      	; 0x3d5c <disk_initialize+0xb4>
    3d5a:	4f c0       	rjmp	.+158    	; 0x3dfa <disk_initialize+0x152>
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	ba 01       	movw	r22, r20
    3d62:	8a e3       	ldi	r24, 0x3A	; 58
    3d64:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3d68:	81 11       	cpse	r24, r1
    3d6a:	49 c0       	rjmp	.+146    	; 0x3dfe <disk_initialize+0x156>
					rcvr_mmc(buf, 4);
    3d6c:	64 e0       	ldi	r22, 0x04	; 4
    3d6e:	70 e0       	ldi	r23, 0x00	; 0
    3d70:	ce 01       	movw	r24, r28
    3d72:	01 96       	adiw	r24, 0x01	; 1
    3d74:	0e 94 ac 1c 	call	0x3958	; 0x3958 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	86 fd       	sbrc	r24, 6
    3d7c:	42 c0       	rjmp	.+132    	; 0x3e02 <disk_initialize+0x15a>
    3d7e:	68 94       	set
    3d80:	ff 24       	eor	r15, r15
    3d82:	f2 f8       	bld	r15, 2
    3d84:	44 c0       	rjmp	.+136    	; 0x3e0e <disk_initialize+0x166>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	ba 01       	movw	r22, r20
    3d8c:	89 ea       	ldi	r24, 0xA9	; 169
    3d8e:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3d92:	82 30       	cpi	r24, 0x02	; 2
    3d94:	28 f0       	brcs	.+10     	; 0x3da0 <disk_initialize+0xf8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3d96:	ee 24       	eor	r14, r14
    3d98:	e3 94       	inc	r14
    3d9a:	ff 24       	eor	r15, r15
    3d9c:	f3 94       	inc	r15
    3d9e:	07 c0       	rjmp	.+14     	; 0x3dae <disk_initialize+0x106>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3da0:	0f 2e       	mov	r0, r31
    3da2:	f9 ea       	ldi	r31, 0xA9	; 169
    3da4:	ef 2e       	mov	r14, r31
    3da6:	f0 2d       	mov	r31, r0
    3da8:	68 94       	set
    3daa:	ff 24       	eor	r15, r15
    3dac:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3dae:	08 ee       	ldi	r16, 0xE8	; 232
    3db0:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	ba 01       	movw	r22, r20
    3db8:	8e 2d       	mov	r24, r14
    3dba:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3dbe:	88 23       	and	r24, r24
    3dc0:	49 f0       	breq	.+18     	; 0x3dd4 <disk_initialize+0x12c>
				DLY_US(1000);
    3dc2:	88 ee       	ldi	r24, 0xE8	; 232
    3dc4:	93 e0       	ldi	r25, 0x03	; 3
    3dc6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3dca:	01 50       	subi	r16, 0x01	; 1
    3dcc:	11 09       	sbc	r17, r1
    3dce:	89 f7       	brne	.-30     	; 0x3db2 <disk_initialize+0x10a>
				if (send_cmd(cmd, 0) == 0) break;
				DLY_US(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3dd0:	f1 2c       	mov	r15, r1
    3dd2:	1d c0       	rjmp	.+58     	; 0x3e0e <disk_initialize+0x166>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				DLY_US(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3dd4:	01 2b       	or	r16, r17
    3dd6:	d1 f0       	breq	.+52     	; 0x3e0c <disk_initialize+0x164>
    3dd8:	40 e0       	ldi	r20, 0x00	; 0
    3dda:	52 e0       	ldi	r21, 0x02	; 2
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	80 e1       	ldi	r24, 0x10	; 16
    3de2:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3de6:	88 23       	and	r24, r24
    3de8:	91 f0       	breq	.+36     	; 0x3e0e <disk_initialize+0x166>
				ty = 0;
    3dea:	f1 2c       	mov	r15, r1
    3dec:	10 c0       	rjmp	.+32     	; 0x3e0e <disk_initialize+0x166>
	if (drv) return RES_NOTRDY;

	INIT_PORT();				/* Initialize control port */
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* 80 dummy clocks */

	ty = 0;
    3dee:	f1 2c       	mov	r15, r1
    3df0:	0e c0       	rjmp	.+28     	; 0x3e0e <disk_initialize+0x166>
    3df2:	f1 2c       	mov	r15, r1
    3df4:	0c c0       	rjmp	.+24     	; 0x3e0e <disk_initialize+0x166>
    3df6:	f1 2c       	mov	r15, r1
    3df8:	0a c0       	rjmp	.+20     	; 0x3e0e <disk_initialize+0x166>
    3dfa:	f1 2c       	mov	r15, r1
    3dfc:	08 c0       	rjmp	.+16     	; 0x3e0e <disk_initialize+0x166>
    3dfe:	f1 2c       	mov	r15, r1
    3e00:	06 c0       	rjmp	.+12     	; 0x3e0e <disk_initialize+0x166>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					DLY_US(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3e02:	0f 2e       	mov	r0, r31
    3e04:	fc e0       	ldi	r31, 0x0C	; 12
    3e06:	ff 2e       	mov	r15, r31
    3e08:	f0 2d       	mov	r31, r0
    3e0a:	01 c0       	rjmp	.+2      	; 0x3e0e <disk_initialize+0x166>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				DLY_US(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3e0c:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    3e0e:	f0 92 19 0d 	sts	0x0D19, r15
	s = ty ? 0 : STA_NOINIT;
    3e12:	11 e0       	ldi	r17, 0x01	; 1
    3e14:	f1 10       	cpse	r15, r1
    3e16:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    3e18:	10 93 9b 01 	sts	0x019B, r17

	deselect();
    3e1c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>

	return s;
    3e20:	81 2f       	mov	r24, r17
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <disk_initialize+0x17e>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3e24:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	ff 90       	pop	r15
    3e38:	ef 90       	pop	r14
    3e3a:	08 95       	ret

00003e3c <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3e3c:	bf 92       	push	r11
    3e3e:	cf 92       	push	r12
    3e40:	df 92       	push	r13
    3e42:	ef 92       	push	r14
    3e44:	ff 92       	push	r15
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	eb 01       	movw	r28, r22
    3e50:	69 01       	movw	r12, r18
    3e52:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3e54:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <disk_status>
    3e58:	80 fd       	sbrc	r24, 0
    3e5a:	3f c0       	rjmp	.+126    	; 0x3eda <disk_read+0x9e>
	if (!count) return RES_PARERR;
    3e5c:	01 15       	cp	r16, r1
    3e5e:	11 05       	cpc	r17, r1
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <disk_read+0x28>
    3e62:	3d c0       	rjmp	.+122    	; 0x3ede <disk_read+0xa2>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    3e64:	80 91 19 0d 	lds	r24, 0x0D19
    3e68:	83 fd       	sbrc	r24, 3
    3e6a:	09 c0       	rjmp	.+18     	; 0x3e7e <disk_read+0x42>
    3e6c:	0b 2e       	mov	r0, r27
    3e6e:	b9 e0       	ldi	r27, 0x09	; 9
    3e70:	cc 0c       	add	r12, r12
    3e72:	dd 1c       	adc	r13, r13
    3e74:	ee 1c       	adc	r14, r14
    3e76:	ff 1c       	adc	r15, r15
    3e78:	ba 95       	dec	r27
    3e7a:	d1 f7       	brne	.-12     	; 0x3e70 <disk_read+0x34>
    3e7c:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3e7e:	02 30       	cpi	r16, 0x02	; 2
    3e80:	11 05       	cpc	r17, r1
    3e82:	28 f4       	brcc	.+10     	; 0x3e8e <disk_read+0x52>
    3e84:	0f 2e       	mov	r0, r31
    3e86:	f1 e1       	ldi	r31, 0x11	; 17
    3e88:	bf 2e       	mov	r11, r31
    3e8a:	f0 2d       	mov	r31, r0
    3e8c:	04 c0       	rjmp	.+8      	; 0x3e96 <disk_read+0x5a>
    3e8e:	0f 2e       	mov	r0, r31
    3e90:	f2 e1       	ldi	r31, 0x12	; 18
    3e92:	bf 2e       	mov	r11, r31
    3e94:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    3e96:	b7 01       	movw	r22, r14
    3e98:	a6 01       	movw	r20, r12
    3e9a:	8b 2d       	mov	r24, r11
    3e9c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3ea0:	81 11       	cpse	r24, r1
    3ea2:	14 c0       	rjmp	.+40     	; 0x3ecc <disk_read+0x90>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	72 e0       	ldi	r23, 0x02	; 2
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <rcvr_datablock>
    3eae:	89 2b       	or	r24, r25
    3eb0:	21 f0       	breq	.+8      	; 0x3eba <disk_read+0x7e>
			buff += 512;
    3eb2:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    3eb4:	01 50       	subi	r16, 0x01	; 1
    3eb6:	11 09       	sbc	r17, r1
    3eb8:	a9 f7       	brne	.-22     	; 0x3ea4 <disk_read+0x68>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3eba:	82 e1       	ldi	r24, 0x12	; 18
    3ebc:	b8 12       	cpse	r11, r24
    3ebe:	06 c0       	rjmp	.+12     	; 0x3ecc <disk_read+0x90>
    3ec0:	40 e0       	ldi	r20, 0x00	; 0
    3ec2:	50 e0       	ldi	r21, 0x00	; 0
    3ec4:	ba 01       	movw	r22, r20
    3ec6:	8c e0       	ldi	r24, 0x0C	; 12
    3ec8:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
	}
	deselect();
    3ecc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>

	return count ? RES_ERROR : RES_OK;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	01 2b       	or	r16, r17
    3ed4:	29 f4       	brne	.+10     	; 0x3ee0 <disk_read+0xa4>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <disk_read+0xa4>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3eda:	83 e0       	ldi	r24, 0x03	; 3
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <disk_read+0xa4>
	if (!count) return RES_PARERR;
    3ede:	84 e0       	ldi	r24, 0x04	; 4
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	df 90       	pop	r13
    3eee:	cf 90       	pop	r12
    3ef0:	bf 90       	pop	r11
    3ef2:	08 95       	ret

00003ef4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3ef4:	cf 92       	push	r12
    3ef6:	df 92       	push	r13
    3ef8:	ef 92       	push	r14
    3efa:	ff 92       	push	r15
    3efc:	0f 93       	push	r16
    3efe:	1f 93       	push	r17
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	eb 01       	movw	r28, r22
    3f06:	69 01       	movw	r12, r18
    3f08:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3f0a:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <disk_status>
    3f0e:	80 fd       	sbrc	r24, 0
    3f10:	50 c0       	rjmp	.+160    	; 0x3fb2 <disk_write+0xbe>
	if (!count) return RES_PARERR;
    3f12:	01 15       	cp	r16, r1
    3f14:	11 05       	cpc	r17, r1
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <disk_write+0x26>
    3f18:	4e c0       	rjmp	.+156    	; 0x3fb6 <disk_write+0xc2>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    3f1a:	80 91 19 0d 	lds	r24, 0x0D19
    3f1e:	83 fd       	sbrc	r24, 3
    3f20:	09 c0       	rjmp	.+18     	; 0x3f34 <disk_write+0x40>
    3f22:	0b 2e       	mov	r0, r27
    3f24:	b9 e0       	ldi	r27, 0x09	; 9
    3f26:	cc 0c       	add	r12, r12
    3f28:	dd 1c       	adc	r13, r13
    3f2a:	ee 1c       	adc	r14, r14
    3f2c:	ff 1c       	adc	r15, r15
    3f2e:	ba 95       	dec	r27
    3f30:	d1 f7       	brne	.-12     	; 0x3f26 <disk_write+0x32>
    3f32:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    3f34:	01 30       	cpi	r16, 0x01	; 1
    3f36:	11 05       	cpc	r17, r1
    3f38:	99 f4       	brne	.+38     	; 0x3f60 <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3f3a:	b7 01       	movw	r22, r14
    3f3c:	a6 01       	movw	r20, r12
    3f3e:	88 e1       	ldi	r24, 0x18	; 24
    3f40:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3f44:	81 11       	cpse	r24, r1
    3f46:	2e c0       	rjmp	.+92     	; 0x3fa4 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    3f48:	6e ef       	ldi	r22, 0xFE	; 254
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <xmit_datablock>
    3f50:	31 e0       	ldi	r19, 0x01	; 1
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	89 2b       	or	r24, r25
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <disk_write+0x66>
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	03 2f       	mov	r16, r19
    3f5c:	12 2f       	mov	r17, r18
    3f5e:	22 c0       	rjmp	.+68     	; 0x3fa4 <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3f60:	86 70       	andi	r24, 0x06	; 6
    3f62:	31 f0       	breq	.+12     	; 0x3f70 <disk_write+0x7c>
    3f64:	a8 01       	movw	r20, r16
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	70 e0       	ldi	r23, 0x00	; 0
    3f6a:	87 e9       	ldi	r24, 0x97	; 151
    3f6c:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3f70:	b7 01       	movw	r22, r14
    3f72:	a6 01       	movw	r20, r12
    3f74:	89 e1       	ldi	r24, 0x19	; 25
    3f76:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    3f7a:	81 11       	cpse	r24, r1
    3f7c:	13 c0       	rjmp	.+38     	; 0x3fa4 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3f7e:	6c ef       	ldi	r22, 0xFC	; 252
    3f80:	ce 01       	movw	r24, r28
    3f82:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <xmit_datablock>
    3f86:	89 2b       	or	r24, r25
    3f88:	21 f0       	breq	.+8      	; 0x3f92 <disk_write+0x9e>
				buff += 512;
    3f8a:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3f8c:	01 50       	subi	r16, 0x01	; 1
    3f8e:	11 09       	sbc	r17, r1
    3f90:	b1 f7       	brne	.-20     	; 0x3f7e <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3f92:	6d ef       	ldi	r22, 0xFD	; 253
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <xmit_datablock>
    3f9c:	89 2b       	or	r24, r25
    3f9e:	11 f4       	brne	.+4      	; 0x3fa4 <disk_write+0xb0>
				count = 1;
    3fa0:	01 e0       	ldi	r16, 0x01	; 1
    3fa2:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3fa4:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>

	return count ? RES_ERROR : RES_OK;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	01 2b       	or	r16, r17
    3fac:	29 f4       	brne	.+10     	; 0x3fb8 <disk_write+0xc4>
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	03 c0       	rjmp	.+6      	; 0x3fb8 <disk_write+0xc4>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3fb2:	83 e0       	ldi	r24, 0x03	; 3
    3fb4:	01 c0       	rjmp	.+2      	; 0x3fb8 <disk_write+0xc4>
	if (!count) return RES_PARERR;
    3fb6:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	df 90       	pop	r13
    3fc6:	cf 90       	pop	r12
    3fc8:	08 95       	ret

00003fca <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3fca:	ef 92       	push	r14
    3fcc:	ff 92       	push	r15
    3fce:	1f 93       	push	r17
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	60 97       	sbiw	r28, 0x10	; 16
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	16 2f       	mov	r17, r22
    3fe6:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3fe8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <disk_status>
    3fec:	80 fd       	sbrc	r24, 0
    3fee:	97 c0       	rjmp	.+302    	; 0x411e <disk_ioctl+0x154>

	res = RES_ERROR;
	switch (ctrl) {
    3ff0:	11 30       	cpi	r17, 0x01	; 1
    3ff2:	69 f0       	breq	.+26     	; 0x400e <disk_ioctl+0x44>
    3ff4:	20 f0       	brcs	.+8      	; 0x3ffe <disk_ioctl+0x34>
    3ff6:	13 30       	cpi	r17, 0x03	; 3
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <disk_ioctl+0x32>
    3ffa:	7d c0       	rjmp	.+250    	; 0x40f6 <disk_ioctl+0x12c>
    3ffc:	87 c0       	rjmp	.+270    	; 0x410c <disk_ioctl+0x142>
	case CTRL_SYNC :		/* Make sure that no pending write process */
		if (select()) res = RES_OK;
    3ffe:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <select>
    4002:	11 e0       	ldi	r17, 0x01	; 1
    4004:	89 2b       	or	r24, r25
    4006:	09 f4       	brne	.+2      	; 0x400a <disk_ioctl+0x40>
    4008:	86 c0       	rjmp	.+268    	; 0x4116 <disk_ioctl+0x14c>
    400a:	10 e0       	ldi	r17, 0x00	; 0
    400c:	84 c0       	rjmp	.+264    	; 0x4116 <disk_ioctl+0x14c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	ba 01       	movw	r22, r20
    4014:	89 e0       	ldi	r24, 0x09	; 9
    4016:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <send_cmd>
    401a:	81 11       	cpse	r24, r1
    401c:	79 c0       	rjmp	.+242    	; 0x4110 <disk_ioctl+0x146>
    401e:	60 e1       	ldi	r22, 0x10	; 16
    4020:	70 e0       	ldi	r23, 0x00	; 0
    4022:	ce 01       	movw	r24, r28
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <rcvr_datablock>
    402a:	89 2b       	or	r24, r25
    402c:	09 f4       	brne	.+2      	; 0x4030 <disk_ioctl+0x66>
    402e:	72 c0       	rjmp	.+228    	; 0x4114 <disk_ioctl+0x14a>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	82 95       	swap	r24
    4034:	86 95       	lsr	r24
    4036:	86 95       	lsr	r24
    4038:	83 70       	andi	r24, 0x03	; 3
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	31 f5       	brne	.+76     	; 0x408a <disk_ioctl+0xc0>
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    403e:	88 85       	ldd	r24, Y+8	; 0x08
    4040:	8f 73       	andi	r24, 0x3F	; 63
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	a0 e0       	ldi	r26, 0x00	; 0
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	dc 01       	movw	r26, r24
    404a:	99 27       	eor	r25, r25
    404c:	88 27       	eor	r24, r24
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	a1 1d       	adc	r26, r1
    4052:	b1 1d       	adc	r27, r1
    4054:	29 85       	ldd	r18, Y+9	; 0x09
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	32 2f       	mov	r19, r18
    405a:	22 27       	eor	r18, r18
    405c:	4a 85       	ldd	r20, Y+10	; 0x0a
    405e:	24 0f       	add	r18, r20
    4060:	31 1d       	adc	r19, r1
    4062:	82 0f       	add	r24, r18
    4064:	93 1f       	adc	r25, r19
    4066:	a1 1d       	adc	r26, r1
    4068:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = cs << 10;
    406a:	07 2e       	mov	r0, r23
    406c:	7a e0       	ldi	r23, 0x0A	; 10
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	aa 1f       	adc	r26, r26
    4074:	bb 1f       	adc	r27, r27
    4076:	7a 95       	dec	r23
    4078:	d1 f7       	brne	.-12     	; 0x406e <disk_ioctl+0xa4>
    407a:	70 2d       	mov	r23, r0
    407c:	f7 01       	movw	r30, r14
    407e:	80 83       	st	Z, r24
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	a2 83       	std	Z+2, r26	; 0x02
    4084:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = cs << (n - 9);
			}
			res = RES_OK;
    4086:	10 e0       	ldi	r17, 0x00	; 0
    4088:	46 c0       	rjmp	.+140    	; 0x4116 <disk_ioctl+0x14c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = cs << 10;
			} else {					/* SDC ver 1.XX or MMC */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    408a:	89 85       	ldd	r24, Y+9	; 0x09
    408c:	82 95       	swap	r24
    408e:	86 95       	lsr	r24
    4090:	86 95       	lsr	r24
    4092:	83 70       	andi	r24, 0x03	; 3
    4094:	28 85       	ldd	r18, Y+8	; 0x08
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	f4 e0       	ldi	r31, 0x04	; 4
    409a:	2f 9f       	mul	r18, r31
    409c:	80 0d       	add	r24, r0
    409e:	91 1d       	adc	r25, r1
    40a0:	11 24       	eor	r1, r1
    40a2:	9c 01       	movw	r18, r24
    40a4:	2f 5f       	subi	r18, 0xFF	; 255
    40a6:	3f 4f       	sbci	r19, 0xFF	; 255
    40a8:	9f 81       	ldd	r25, Y+7	; 0x07
    40aa:	93 70       	andi	r25, 0x03	; 3
    40ac:	89 2f       	mov	r24, r25
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	98 2f       	mov	r25, r24
    40b2:	88 27       	eor	r24, r24
    40b4:	99 0f       	add	r25, r25
    40b6:	99 0f       	add	r25, r25
    40b8:	82 0f       	add	r24, r18
    40ba:	93 1f       	adc	r25, r19
    40bc:	a0 e0       	ldi	r26, 0x00	; 0
    40be:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = cs << 10;
			} else {					/* SDC ver 1.XX or MMC */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    40c0:	2e 81       	ldd	r18, Y+6	; 0x06
    40c2:	32 2f       	mov	r19, r18
    40c4:	3f 70       	andi	r19, 0x0F	; 15
    40c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    40c8:	22 1f       	adc	r18, r18
    40ca:	22 27       	eor	r18, r18
    40cc:	22 1f       	adc	r18, r18
    40ce:	23 0f       	add	r18, r19
    40d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d2:	33 70       	andi	r19, 0x03	; 3
    40d4:	33 0f       	add	r19, r19
    40d6:	23 0f       	add	r18, r19
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = cs << (n - 9);
    40d8:	27 50       	subi	r18, 0x07	; 7
    40da:	04 c0       	rjmp	.+8      	; 0x40e4 <disk_ioctl+0x11a>
    40dc:	88 0f       	add	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	aa 1f       	adc	r26, r26
    40e2:	bb 1f       	adc	r27, r27
    40e4:	2a 95       	dec	r18
    40e6:	d2 f7       	brpl	.-12     	; 0x40dc <disk_ioctl+0x112>
    40e8:	f7 01       	movw	r30, r14
    40ea:	80 83       	st	Z, r24
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	a2 83       	std	Z+2, r26	; 0x02
    40f0:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    40f2:	10 e0       	ldi	r17, 0x00	; 0
    40f4:	10 c0       	rjmp	.+32     	; 0x4116 <disk_ioctl+0x14c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		*(DWORD*)buff = 128;
    40f6:	80 e8       	ldi	r24, 0x80	; 128
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	a0 e0       	ldi	r26, 0x00	; 0
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	f7 01       	movw	r30, r14
    4100:	80 83       	st	Z, r24
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	a2 83       	std	Z+2, r26	; 0x02
    4106:	b3 83       	std	Z+3, r27	; 0x03
		res = RES_OK;
    4108:	10 e0       	ldi	r17, 0x00	; 0
		break;
    410a:	05 c0       	rjmp	.+10     	; 0x4116 <disk_ioctl+0x14c>

	default:
		res = RES_PARERR;
    410c:	14 e0       	ldi	r17, 0x04	; 4
    410e:	03 c0       	rjmp	.+6      	; 0x4116 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    4110:	11 e0       	ldi	r17, 0x01	; 1
    4112:	01 c0       	rjmp	.+2      	; 0x4116 <disk_ioctl+0x14c>
    4114:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    4116:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <deselect>

	return res;
    411a:	81 2f       	mov	r24, r17
    411c:	01 c0       	rjmp	.+2      	; 0x4120 <disk_ioctl+0x156>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    411e:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    4120:	60 96       	adiw	r28, 0x10	; 16
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	ff 90       	pop	r15
    4134:	ef 90       	pop	r14
    4136:	08 95       	ret

00004138 <_ZN7SDMacroC1Ev>:

#include "SDMacro.h"


// default constructor
SDMacro::SDMacro()
    4138:	08 95       	ret

0000413a <_ZN7SDMacroD1Ev>:
{

} //SDMacro

// default destructor
SDMacro::~SDMacro()
    413a:	08 95       	ret

0000413c <_ZN7SDMacro9CheckFileE3FILPc>:
{
	
} //~SDMacro

int SDMacro::CheckFile(FIL cFIL, char* filename)
{
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
	//sprintf(file, "%s.csv", "hello");
	
	f_mount(&FF, "", 0);
    4144:	40 e0       	ldi	r20, 0x00	; 0
    4146:	6f e9       	ldi	r22, 0x9F	; 159
    4148:	75 e0       	ldi	r23, 0x05	; 5
    414a:	44 96       	adiw	r24, 0x14	; 20
    414c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <f_mount>
	if (f_open(&cFIL, filename, FA_OPEN_EXISTING) != FR_OK)
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	6d a1       	ldd	r22, Y+37	; 0x25
    4154:	7e a1       	ldd	r23, Y+38	; 0x26
    4156:	ce 01       	movw	r24, r28
    4158:	05 96       	adiw	r24, 0x05	; 5
    415a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <f_open>
    415e:	88 23       	and	r24, r24
    4160:	89 f0       	breq	.+34     	; 0x4184 <_ZN7SDMacro9CheckFileE3FILPc+0x48>
	{
		
		f_close(&cFIL);
    4162:	ce 01       	movw	r24, r28
    4164:	05 96       	adiw	r24, 0x05	; 5
    4166:	0e 94 46 1a 	call	0x348c	; 0x348c <f_close>
		if (f_open(&cFIL, filename, FA_CREATE_NEW) == FR_OK)
    416a:	44 e0       	ldi	r20, 0x04	; 4
    416c:	6d a1       	ldd	r22, Y+37	; 0x25
    416e:	7e a1       	ldd	r23, Y+38	; 0x26
    4170:	ce 01       	movw	r24, r28
    4172:	05 96       	adiw	r24, 0x05	; 5
    4174:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <f_open>
    4178:	81 11       	cpse	r24, r1
    417a:	04 c0       	rjmp	.+8      	; 0x4184 <_ZN7SDMacro9CheckFileE3FILPc+0x48>
		f_close(&cFIL);
    417c:	ce 01       	movw	r24, r28
    417e:	05 96       	adiw	r24, 0x05	; 5
    4180:	0e 94 46 1a 	call	0x348c	; 0x348c <f_close>
	}
	return 0;
}
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	08 95       	ret

0000418e <_ZN7SDMacro8SendDataEP3FILPcS2_>:
	
	return 0;
}

int SDMacro::SendData(FIL* cFIL, char* BUFFER, char* filename)
{
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	7c 01       	movw	r14, r24
    419c:	eb 01       	movw	r28, r22
    419e:	8a 01       	movw	r16, r20
	
	//UINT bw; // i dont think
	if (f_open(cFIL, filename, FA_WRITE | FA_OPEN_ALWAYS) == FR_OK)
    41a0:	42 e1       	ldi	r20, 0x12	; 18
    41a2:	b9 01       	movw	r22, r18
    41a4:	ce 01       	movw	r24, r28
    41a6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <f_open>
    41aa:	81 11       	cpse	r24, r1
    41ac:	18 c0       	rjmp	.+48     	; 0x41de <_ZN7SDMacro8SendDataEP3FILPcS2_+0x50>
	{
		if (f_lseek(cFIL, f_size(cFIL)) == FR_OK) {
    41ae:	4a 85       	ldd	r20, Y+10	; 0x0a
    41b0:	5b 85       	ldd	r21, Y+11	; 0x0b
    41b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    41b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    41b6:	ce 01       	movw	r24, r28
    41b8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <f_lseek>
    41bc:	81 11       	cpse	r24, r1
    41be:	0f c0       	rjmp	.+30     	; 0x41de <_ZN7SDMacro8SendDataEP3FILPcS2_+0x50>
			f_write(cFIL, BUFFER, strlen(BUFFER), &bw);
    41c0:	f8 01       	movw	r30, r16
    41c2:	01 90       	ld	r0, Z+
    41c4:	00 20       	and	r0, r0
    41c6:	e9 f7       	brne	.-6      	; 0x41c2 <_ZN7SDMacro8SendDataEP3FILPcS2_+0x34>
    41c8:	31 97       	sbiw	r30, 0x01	; 1
    41ca:	af 01       	movw	r20, r30
    41cc:	40 1b       	sub	r20, r16
    41ce:	51 0b       	sbc	r21, r17
    41d0:	97 01       	movw	r18, r14
    41d2:	2a 5b       	subi	r18, 0xBA	; 186
    41d4:	3d 4f       	sbci	r19, 0xFD	; 253
    41d6:	b8 01       	movw	r22, r16
    41d8:	ce 01       	movw	r24, r28
    41da:	0e 94 68 18 	call	0x30d0	; 0x30d0 <f_write>
		}
	}
	f_close(cFIL);
    41de:	ce 01       	movw	r24, r28
    41e0:	0e 94 46 1a 	call	0x348c	; 0x348c <f_close>
	return 0;
}
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	df 91       	pop	r29
    41ea:	cf 91       	pop	r28
    41ec:	1f 91       	pop	r17
    41ee:	0f 91       	pop	r16
    41f0:	ff 90       	pop	r15
    41f2:	ef 90       	pop	r14
    41f4:	08 95       	ret

000041f6 <_ZN5TIMERC1Ev>:
#include "../PIN/PIN.h"

volatile uint16_t TIMER_COUNT;

// default constructor
TIMER::TIMER()
    41f6:	08 95       	ret

000041f8 <__vector_12>:




ISR (TIMER1_COMPA_vect)
{
    41f8:	1f 92       	push	r1
    41fa:	0f 92       	push	r0
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	0f 92       	push	r0
    4200:	11 24       	eor	r1, r1
    4202:	8f 93       	push	r24
    4204:	9f 93       	push	r25
    4206:	af 93       	push	r26
    4208:	bf 93       	push	r27
	timer1_millis++;
    420a:	80 91 1e 0d 	lds	r24, 0x0D1E
    420e:	90 91 1f 0d 	lds	r25, 0x0D1F
    4212:	a0 91 20 0d 	lds	r26, 0x0D20
    4216:	b0 91 21 0d 	lds	r27, 0x0D21
    421a:	01 96       	adiw	r24, 0x01	; 1
    421c:	a1 1d       	adc	r26, r1
    421e:	b1 1d       	adc	r27, r1
    4220:	80 93 1e 0d 	sts	0x0D1E, r24
    4224:	90 93 1f 0d 	sts	0x0D1F, r25
    4228:	a0 93 20 0d 	sts	0x0D20, r26
    422c:	b0 93 21 0d 	sts	0x0D21, r27
}
    4230:	bf 91       	pop	r27
    4232:	af 91       	pop	r26
    4234:	9f 91       	pop	r25
    4236:	8f 91       	pop	r24
    4238:	0f 90       	pop	r0
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	0f 90       	pop	r0
    423e:	1f 90       	pop	r1
    4240:	18 95       	reti

00004242 <__vector_11>:


ISR(TIMER1_CAPT_vect)
{
    4242:	1f 92       	push	r1
    4244:	0f 92       	push	r0
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	0f 92       	push	r0
    424a:	11 24       	eor	r1, r1
    424c:	2f 93       	push	r18
    424e:	3f 93       	push	r19
    4250:	8f 93       	push	r24
    4252:	9f 93       	push	r25
    4254:	af 93       	push	r26
    4256:	bf 93       	push	r27
	if (flag2 == 0)  //falling edge
    4258:	80 91 2a 0d 	lds	r24, 0x0D2A
    425c:	90 91 2b 0d 	lds	r25, 0x0D2B
    4260:	89 2b       	or	r24, r25
    4262:	49 f4       	brne	.+18     	; 0x4276 <__vector_11+0x34>
	{
		fall_edge = ICR1; //save fall edge time to input capture register
    4264:	86 b5       	in	r24, 0x26	; 38
    4266:	97 b5       	in	r25, 0x27	; 39
    4268:	90 93 29 0d 	sts	0x0D29, r25
    426c:	80 93 28 0d 	sts	0x0D28, r24
		TCCR1B |= (1<<ICES1); //change input capture edge select on rising edge
    4270:	8e b5       	in	r24, 0x2e	; 46
    4272:	80 64       	ori	r24, 0x40	; 64
    4274:	8e bd       	out	0x2e, r24	; 46
	}
	if (flag2 == 1) //rising edge
    4276:	80 91 2a 0d 	lds	r24, 0x0D2A
    427a:	90 91 2b 0d 	lds	r25, 0x0D2B
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	61 f4       	brne	.+24     	; 0x429a <__vector_11+0x58>
	{
		rise_edge = ICR1; //save rise edge time to input capture register
    4282:	86 b5       	in	r24, 0x26	; 38
    4284:	97 b5       	in	r25, 0x27	; 39
    4286:	90 93 27 0d 	sts	0x0D27, r25
    428a:	80 93 26 0d 	sts	0x0D26, r24
		TCCR1B &= ~(1<<ICES1); //change input capture edge select on falling edge
    428e:	8e b5       	in	r24, 0x2e	; 46
    4290:	8f 7b       	andi	r24, 0xBF	; 191
    4292:	8e bd       	out	0x2e, r24	; 46
		TIMSK &= ~(1<<TICIE1); //disable input capture interrupt
    4294:	87 b7       	in	r24, 0x37	; 55
    4296:	8f 7d       	andi	r24, 0xDF	; 223
    4298:	87 bf       	out	0x37, r24	; 55
	}
	
	flag2++; //increment flag
    429a:	80 91 2a 0d 	lds	r24, 0x0D2A
    429e:	90 91 2b 0d 	lds	r25, 0x0D2B
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	90 93 2b 0d 	sts	0x0D2B, r25
    42a8:	80 93 2a 0d 	sts	0x0D2A, r24
	
	if (flag2 >= 2)
    42ac:	80 91 2a 0d 	lds	r24, 0x0D2A
    42b0:	90 91 2b 0d 	lds	r25, 0x0D2B
    42b4:	02 97       	sbiw	r24, 0x02	; 2
    42b6:	6c f1       	brlt	.+90     	; 0x4312 <__vector_11+0xd0>
	{
		//	PORTE ^= (1 << 2);
		unsigned long sny_duration = 0;
		
		sny_duration = rise_edge - fall_edge;
    42b8:	20 91 26 0d 	lds	r18, 0x0D26
    42bc:	30 91 27 0d 	lds	r19, 0x0D27
    42c0:	80 91 28 0d 	lds	r24, 0x0D28
    42c4:	90 91 29 0d 	lds	r25, 0x0D29
    42c8:	28 1b       	sub	r18, r24
    42ca:	39 0b       	sbc	r19, r25
		sny_lowocc_us += sny_duration;
    42cc:	80 91 22 0d 	lds	r24, 0x0D22
    42d0:	90 91 23 0d 	lds	r25, 0x0D23
    42d4:	a0 91 24 0d 	lds	r26, 0x0D24
    42d8:	b0 91 25 0d 	lds	r27, 0x0D25
    42dc:	82 0f       	add	r24, r18
    42de:	93 1f       	adc	r25, r19
    42e0:	a1 1d       	adc	r26, r1
    42e2:	b1 1d       	adc	r27, r1
    42e4:	80 93 22 0d 	sts	0x0D22, r24
    42e8:	90 93 23 0d 	sts	0x0D23, r25
    42ec:	a0 93 24 0d 	sts	0x0D24, r26
    42f0:	b0 93 25 0d 	sts	0x0D25, r27
		
		flag2 = 0;
    42f4:	10 92 2b 0d 	sts	0x0D2B, r1
    42f8:	10 92 2a 0d 	sts	0x0D2A, r1
		TIFR = (1 << ICF1);
    42fc:	80 e2       	ldi	r24, 0x20	; 32
    42fe:	86 bf       	out	0x36, r24	; 54
		TIMSK |= (1 << TICIE1);
    4300:	87 b7       	in	r24, 0x37	; 55
    4302:	80 62       	ori	r24, 0x20	; 32
    4304:	87 bf       	out	0x37, r24	; 55
		TCCR1B |= (1 << ICNC1);
    4306:	8e b5       	in	r24, 0x2e	; 46
    4308:	80 68       	ori	r24, 0x80	; 128
    430a:	8e bd       	out	0x2e, r24	; 46
		TCCR1B &= ~(1 << ICES1);
    430c:	8e b5       	in	r24, 0x2e	; 46
    430e:	8f 7b       	andi	r24, 0xBF	; 191
    4310:	8e bd       	out	0x2e, r24	; 46
	}
}
    4312:	bf 91       	pop	r27
    4314:	af 91       	pop	r26
    4316:	9f 91       	pop	r25
    4318:	8f 91       	pop	r24
    431a:	3f 91       	pop	r19
    431c:	2f 91       	pop	r18
    431e:	0f 90       	pop	r0
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	0f 90       	pop	r0
    4324:	1f 90       	pop	r1
    4326:	18 95       	reti

00004328 <_ZN6TIMER2C1Ev>:




TIMER2::TIMER2()
    4328:	08 95       	ret

0000432a <_ZN6TIMER210get_sampleEv>:
}


unsigned long TIMER2::get_sample()
{
	unsigned long temp = sny_lowocc_us;
    432a:	60 91 22 0d 	lds	r22, 0x0D22
    432e:	70 91 23 0d 	lds	r23, 0x0D23
    4332:	80 91 24 0d 	lds	r24, 0x0D24
    4336:	90 91 25 0d 	lds	r25, 0x0D25
	sny_lowocc_us = 0;
    433a:	10 92 22 0d 	sts	0x0D22, r1
    433e:	10 92 23 0d 	sts	0x0D23, r1
    4342:	10 92 24 0d 	sts	0x0D24, r1
    4346:	10 92 25 0d 	sts	0x0D25, r1
	return temp;
}
    434a:	08 95       	ret

0000434c <_ZN6TIMER210initializeEv>:

int TIMER2::initialize(void)
{
	// Timer1 Enable
	// CTC mode, Clock/8
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << ICNC1); //taes way
    434c:	8e b5       	in	r24, 0x2e	; 46
    434e:	8a 68       	ori	r24, 0x8A	; 138
    4350:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1<<CS10) | (1<<CS12) | (1<<WGM12) | (1 << ICNC1);
	
	TCCR1B &= ~(1 << ICES1);	// Falling Edge
    4352:	8e b5       	in	r24, 0x2e	; 46
    4354:	8f 7b       	andi	r24, 0xBF	; 191
    4356:	8e bd       	out	0x2e, r24	; 46
	
	// Load the high byte, then the low byte
	// into the output compare
	OCR1AH = (CTC_MATCH_OVERFLOW >> 8);
    4358:	83 e0       	ldi	r24, 0x03	; 3
    435a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = CTC_MATCH_OVERFLOW;
    435c:	80 ed       	ldi	r24, 0xD0	; 208
    435e:	8a bd       	out	0x2a, r24	; 42

	// Enable the compare match interrupt and input capture
	TIMSK |= (1 << OCIE1A) | (1 << TICIE1);
    4360:	87 b7       	in	r24, 0x37	; 55
    4362:	80 63       	ori	r24, 0x30	; 48
    4364:	87 bf       	out	0x37, r24	; 55

	// Input capture interrupt enable
	TIFR |= (1 << ICF1);
    4366:	86 b7       	in	r24, 0x36	; 54
    4368:	80 62       	ori	r24, 0x20	; 32
    436a:	86 bf       	out	0x36, r24	; 54
	
	return 0;
}
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	08 95       	ret

00004372 <_ZN6TIMER26millisEv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4372:	f8 94       	cli

unsigned long TIMER2::millis(void)
{
	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
    4374:	80 91 1e 0d 	lds	r24, 0x0D1E
    4378:	90 91 1f 0d 	lds	r25, 0x0D1F
    437c:	a0 91 20 0d 	lds	r26, 0x0D20
    4380:	b0 91 21 0d 	lds	r27, 0x0D21
    4384:	80 93 1a 0d 	sts	0x0D1A, r24
    4388:	90 93 1b 0d 	sts	0x0D1B, r25
    438c:	a0 93 1c 0d 	sts	0x0D1C, r26
    4390:	b0 93 1d 0d 	sts	0x0D1D, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4394:	78 94       	sei
	}
		
	return millis_return;
    4396:	60 91 1a 0d 	lds	r22, 0x0D1A
    439a:	70 91 1b 0d 	lds	r23, 0x0D1B
    439e:	80 91 1c 0d 	lds	r24, 0x0D1C
    43a2:	90 91 1d 0d 	lds	r25, 0x0D1D
}
    43a6:	08 95       	ret

000043a8 <_ZN5USARTC1Ev>:




// default constructor
USART::USART()
    43a8:	08 95       	ret

000043aa <_ZN5USART11Initialize1Ej>:
} //USART


int USART::Initialize1(unsigned int ubrr)
{
	UBRR1H = (unsigned char) (ubrr>>8); //last 4 values of the baud rate
    43aa:	70 93 98 00 	sts	0x0098, r23
	UBRR1L = (unsigned char) ubrr; // first 8 values of the baud rate
    43ae:	60 93 99 00 	sts	0x0099, r22
	
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);// | (1 << RXCIE1); // initialize tx and rx in the register
    43b2:	88 e1       	ldi	r24, 0x18	; 24
    43b4:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (1 << USBS1) | (3 << UCSZ10); // set the number of stop bits to 2 and the number of data bits to 8
    43b8:	8e e0       	ldi	r24, 0x0E	; 14
    43ba:	80 93 9d 00 	sts	0x009D, r24
	return 0;
}
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	08 95       	ret

000043c4 <_ZN5USART11Initialize0Ej>:

int USART::Initialize0(unsigned int ubrr)
{
	UBRR0H = (unsigned char) (ubrr>>8); //last 4 values of the baud rate
    43c4:	70 93 90 00 	sts	0x0090, r23
	UBRR0L = (unsigned char) ubrr; // first 8 values of the baud rate
    43c8:	69 b9       	out	0x09, r22	; 9
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);// | (1<<RXCIE0); // initialize tx and rx in the register
    43ca:	88 e1       	ldi	r24, 0x18	; 24
    43cc:	8a b9       	out	0x0a, r24	; 10
	//UCSR0B |= (1 << RXCIE0);
	
	UCSR0C = (1 << USBS0) | (3 << UCSZ00); // set the number of stop bits to 2 and the number of data bits to 8
    43ce:	8e e0       	ldi	r24, 0x0E	; 14
    43d0:	80 93 95 00 	sts	0x0095, r24
	return 0;
}
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	08 95       	ret

000043da <_ZN5USART9Transmit1Eh>:

int USART::Transmit1(unsigned char data)
{
	//if (!isalnum(data) || data != ',' || data != '\n' || data != '"' || data != ':' || data != '-') return 0;
	
	while (!(UCSR1A & (1 << UDRE1))); //wait for status flag to say that it is ready to send
    43da:	eb e9       	ldi	r30, 0x9B	; 155
    43dc:	f0 e0       	ldi	r31, 0x00	; 0
    43de:	80 81       	ld	r24, Z
    43e0:	85 ff       	sbrs	r24, 5
    43e2:	fd cf       	rjmp	.-6      	; 0x43de <_ZN5USART9Transmit1Eh+0x4>
	UDR1 = data; // make the UDR pin set to the data so that it will send - has to be 8 bits
    43e4:	60 93 9c 00 	sts	0x009C, r22
	
	//UCSR0B |= (1<<UDRIE0);
	return 0;
}
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	08 95       	ret

000043ee <_ZN5USART9Transmit0Eh>:

int USART::Transmit0(unsigned char data)
{
	//if (!isalnum(data) || data != ',' || data != '\n' || data != '"' || data != ':' || data != '-') return 0;
	
	while (!(UCSR0A & (1 << UDRE0))); //wait for status flag to say that it is ready to send
    43ee:	5d 9b       	sbis	0x0b, 5	; 11
    43f0:	fe cf       	rjmp	.-4      	; 0x43ee <_ZN5USART9Transmit0Eh>
	UDR0 = data; // make the UDR pin set to the data so that it will send - has to be 8 bits
    43f2:	6c b9       	out	0x0c, r22	; 12
	
	//UCSR0B |= (1<<UDRIE0);
	return 0;
}
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	08 95       	ret

000043fa <_ZN5USART12sendToUSART1EPc>:
}



int USART::sendToUSART1(char* BUFFER)
{
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	eb 01       	movw	r28, r22
	//memset(BUFFER, 0, data_length);
	int index = 0;
	while (BUFFER[index] != 0)
    4404:	68 81       	ld	r22, Y
    4406:	66 23       	and	r22, r22
    4408:	41 f0       	breq	.+16     	; 0x441a <_ZN5USART12sendToUSART1EPc+0x20>
    440a:	8c 01       	movw	r16, r24
    440c:	21 96       	adiw	r28, 0x01	; 1
	{
		Transmit1(BUFFER[index]);
    440e:	c8 01       	movw	r24, r16
    4410:	0e 94 ed 21 	call	0x43da	; 0x43da <_ZN5USART9Transmit1Eh>

int USART::sendToUSART1(char* BUFFER)
{
	//memset(BUFFER, 0, data_length);
	int index = 0;
	while (BUFFER[index] != 0)
    4414:	69 91       	ld	r22, Y+
    4416:	61 11       	cpse	r22, r1
    4418:	fa cf       	rjmp	.-12     	; 0x440e <_ZN5USART12sendToUSART1EPc+0x14>
		Transmit1(BUFFER[index]);
		index++;
	}
	return 0;
	//memset(BUFFER, 0, data_length);
}
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	08 95       	ret

00004428 <_ZN5USART12sendToUSART0EPc>:

int USART::sendToUSART0(char* BUFFER)
{
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	eb 01       	movw	r28, r22
	//memset(BUFFER, 0, data_length);
	int index = 0;
	while (BUFFER[index] != 0)
    4432:	68 81       	ld	r22, Y
    4434:	66 23       	and	r22, r22
    4436:	41 f0       	breq	.+16     	; 0x4448 <_ZN5USART12sendToUSART0EPc+0x20>
    4438:	8c 01       	movw	r16, r24
    443a:	21 96       	adiw	r28, 0x01	; 1
	{
		Transmit0(BUFFER[index]);
    443c:	c8 01       	movw	r24, r16
    443e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN5USART9Transmit0Eh>

int USART::sendToUSART0(char* BUFFER)
{
	//memset(BUFFER, 0, data_length);
	int index = 0;
	while (BUFFER[index] != 0)
    4442:	69 91       	ld	r22, Y+
    4444:	61 11       	cpse	r22, r1
    4446:	fa cf       	rjmp	.-12     	; 0x443c <_ZN5USART12sendToUSART0EPc+0x14>
		Transmit0(BUFFER[index]);
		index++;
	}
	return 0;
	//memset(BUFFER, 0, data_length);
}
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	08 95       	ret

00004456 <__vector_18>:

int post_STATUS = 0;


ISR(USART0_RX_vect)
{
    4456:	1f 92       	push	r1
    4458:	0f 92       	push	r0
    445a:	0f b6       	in	r0, 0x3f	; 63
    445c:	0f 92       	push	r0
    445e:	11 24       	eor	r1, r1
    4460:	2f 93       	push	r18
    4462:	3f 93       	push	r19
    4464:	8f 93       	push	r24
    4466:	9f 93       	push	r25
    4468:	ef 93       	push	r30
    446a:	ff 93       	push	r31
	char ReceiveByte;
	
	ReceiveByte = UDR0;
    446c:	8c b1       	in	r24, 0x0c	; 12
	UDR1 = ReceiveByte;
    446e:	80 93 9c 00 	sts	0x009C, r24
	
	if (doit == 1 && read_buf_index < 300)
    4472:	20 91 34 0d 	lds	r18, 0x0D34
    4476:	30 91 35 0d 	lds	r19, 0x0D35
    447a:	21 30       	cpi	r18, 0x01	; 1
    447c:	31 05       	cpc	r19, r1
    447e:	91 f4       	brne	.+36     	; 0x44a4 <__vector_18+0x4e>
    4480:	20 91 36 0d 	lds	r18, 0x0D36
    4484:	30 91 37 0d 	lds	r19, 0x0D37
    4488:	2c 32       	cpi	r18, 0x2C	; 44
    448a:	91 e0       	ldi	r25, 0x01	; 1
    448c:	39 07       	cpc	r19, r25
    448e:	54 f4       	brge	.+20     	; 0x44a4 <__vector_18+0x4e>
	{
		read_buf[read_buf_index] = ReceiveByte;
    4490:	f9 01       	movw	r30, r18
    4492:	e8 5c       	subi	r30, 0xC8	; 200
    4494:	f2 4f       	sbci	r31, 0xF2	; 242
    4496:	80 83       	st	Z, r24
		read_buf_index ++;
    4498:	2f 5f       	subi	r18, 0xFF	; 255
    449a:	3f 4f       	sbci	r19, 0xFF	; 255
    449c:	30 93 37 0d 	sts	0x0D37, r19
    44a0:	20 93 36 0d 	sts	0x0D36, r18
	}
	
}
    44a4:	ff 91       	pop	r31
    44a6:	ef 91       	pop	r30
    44a8:	9f 91       	pop	r25
    44aa:	8f 91       	pop	r24
    44ac:	3f 91       	pop	r19
    44ae:	2f 91       	pop	r18
    44b0:	0f 90       	pop	r0
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	0f 90       	pop	r0
    44b6:	1f 90       	pop	r1
    44b8:	18 95       	reti

000044ba <_ZN4WIFIC1Ev>:


// default constructor
WIFI::WIFI()
    44ba:	08 95       	ret

000044bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>:
}


// here is where i check that the response is what i want
int WIFI::checkRX(USART* fUSART, char *substring1, int string_length1, char *substring2, int string_length2, int TIMEOUT)
{
    44bc:	af 92       	push	r10
    44be:	bf 92       	push	r11
    44c0:	cf 92       	push	r12
    44c2:	df 92       	push	r13
    44c4:	ef 92       	push	r14
    44c6:	ff 92       	push	r15
    44c8:	0f 93       	push	r16
    44ca:	1f 93       	push	r17
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
    44d0:	cd b7       	in	r28, 0x3d	; 61
    44d2:	de b7       	in	r29, 0x3e	; 62
    44d4:	cc 52       	subi	r28, 0x2C	; 44
    44d6:	d1 40       	sbci	r29, 0x01	; 1
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
	
	doit = 1;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	90 93 35 0d 	sts	0x0D35, r25
    44ea:	80 93 34 0d 	sts	0x0D34, r24
	int wait = 0;
	int status = 0;
	
	//memset(messageArray, 0, 20);
	messageArray = substring1;
    44ee:	50 93 33 0d 	sts	0x0D33, r21
    44f2:	40 93 32 0d 	sts	0x0D32, r20
	messageArrayLen = string_length1;
    44f6:	30 93 31 0d 	sts	0x0D31, r19
    44fa:	20 93 30 0d 	sts	0x0D30, r18
	messageArray_STATUS = 0;
    44fe:	10 92 2f 0d 	sts	0x0D2F, r1
    4502:	10 92 2e 0d 	sts	0x0D2E, r1
	message_INDEX = 0;
    4506:	10 92 2d 0d 	sts	0x0D2D, r1
    450a:	10 92 2c 0d 	sts	0x0D2C, r1


	UCSR0B |= (1 << RXEN0);
    450e:	54 9a       	sbi	0x0a, 4	; 10
	UCSR0B |= (1 << RXCIE0);
    4510:	57 9a       	sbi	0x0a, 7	; 10
	TIMSK &= ~(1 << OCIE1A);
    4512:	87 b7       	in	r24, 0x37	; 55
    4514:	8f 7e       	andi	r24, 0xEF	; 239
    4516:	87 bf       	out	0x37, r24	; 55

	while (wait < TIMEOUT)
    4518:	1c 14       	cp	r1, r12
    451a:	1d 04       	cpc	r1, r13
    451c:	74 f5       	brge	.+92     	; 0x457a <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xbe>
    451e:	5a 01       	movw	r10, r20
    4520:	e1 2c       	mov	r14, r1
    4522:	f1 2c       	mov	r15, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4524:	f8 94       	cli
	{

		char cmpr_buf[300];

		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			strcpy(cmpr_buf, read_buf);
    4526:	68 e3       	ldi	r22, 0x38	; 56
    4528:	7d e0       	ldi	r23, 0x0D	; 13
    452a:	ce 01       	movw	r24, r28
    452c:	01 96       	adiw	r24, 0x01	; 1
    452e:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <strcpy>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4532:	78 94       	sei
		}
		
		if (strstr(cmpr_buf, substring1)){
    4534:	b5 01       	movw	r22, r10
    4536:	ce 01       	movw	r24, r28
    4538:	01 96       	adiw	r24, 0x01	; 1
    453a:	0e 94 77 27 	call	0x4eee	; 0x4eee <strstr>
    453e:	89 2b       	or	r24, r25
    4540:	b1 f4       	brne	.+44     	; 0x456e <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xb2>
			status = 1;
			break;
		}

		if (strstr(cmpr_buf, substring2)){
    4542:	b8 01       	movw	r22, r16
    4544:	ce 01       	movw	r24, r28
    4546:	01 96       	adiw	r24, 0x01	; 1
    4548:	0e 94 77 27 	call	0x4eee	; 0x4eee <strstr>
    454c:	89 2b       	or	r24, r25
    454e:	91 f4       	brne	.+36     	; 0x4574 <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xb8>
			status = 2;
			break;
		}

		wait ++;
    4550:	8f ef       	ldi	r24, 0xFF	; 255
    4552:	e8 1a       	sub	r14, r24
    4554:	f8 0a       	sbc	r15, r24
    4556:	af e1       	ldi	r26, 0x1F	; 31
    4558:	be e4       	ldi	r27, 0x4E	; 78
    455a:	11 97       	sbiw	r26, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0x9e>
    455e:	00 c0       	rjmp	.+0      	; 0x4560 <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xa4>
    4560:	00 00       	nop

	UCSR0B |= (1 << RXEN0);
	UCSR0B |= (1 << RXCIE0);
	TIMSK &= ~(1 << OCIE1A);

	while (wait < TIMEOUT)
    4562:	ec 14       	cp	r14, r12
    4564:	fd 04       	cpc	r15, r13
    4566:	f1 f6       	brne	.-68     	; 0x4524 <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0x68>
int WIFI::checkRX(USART* fUSART, char *substring1, int string_length1, char *substring2, int string_length2, int TIMEOUT)
{
	
	doit = 1;
	int wait = 0;
	int status = 0;
    4568:	40 e0       	ldi	r20, 0x00	; 0
    456a:	50 e0       	ldi	r21, 0x00	; 0
    456c:	08 c0       	rjmp	.+16     	; 0x457e <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xc2>
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			strcpy(cmpr_buf, read_buf);
		}
		
		if (strstr(cmpr_buf, substring1)){
			status = 1;
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	05 c0       	rjmp	.+10     	; 0x457e <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xc2>
			break;
		}

		if (strstr(cmpr_buf, substring2)){
			status = 2;
    4574:	42 e0       	ldi	r20, 0x02	; 2
    4576:	50 e0       	ldi	r21, 0x00	; 0
    4578:	02 c0       	rjmp	.+4      	; 0x457e <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xc2>
int WIFI::checkRX(USART* fUSART, char *substring1, int string_length1, char *substring2, int string_length2, int TIMEOUT)
{
	
	doit = 1;
	int wait = 0;
	int status = 0;
    457a:	40 e0       	ldi	r20, 0x00	; 0
    457c:	50 e0       	ldi	r21, 0x00	; 0
		}

		wait ++;
		_delay_ms(10);
	}
	TIMSK |= (1 << OCIE1A);
    457e:	97 b7       	in	r25, 0x37	; 55
    4580:	90 61       	ori	r25, 0x10	; 16
    4582:	97 bf       	out	0x37, r25	; 55
	UCSR0B &= ~(1 << RXEN0);
    4584:	54 98       	cbi	0x0a, 4	; 10
	UCSR0B &= ~(1 << RXCIE0);
    4586:	57 98       	cbi	0x0a, 7	; 10
	
	doit = 0;
    4588:	10 92 35 0d 	sts	0x0D35, r1
    458c:	10 92 34 0d 	sts	0x0D34, r1
	
	
	memset(read_buf, 0, 300);
    4590:	2c e2       	ldi	r18, 0x2C	; 44
    4592:	31 e0       	ldi	r19, 0x01	; 1
    4594:	e8 e3       	ldi	r30, 0x38	; 56
    4596:	fd e0       	ldi	r31, 0x0D	; 13
    4598:	df 01       	movw	r26, r30
    459a:	c9 01       	movw	r24, r18
    459c:	1d 92       	st	X+, r1
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	e9 f7       	brne	.-6      	; 0x459c <_ZN4WIFI7checkRXEP5USARTPciS2_ii+0xe0>
	read_buf_index = 0;
    45a2:	10 92 37 0d 	sts	0x0D37, r1
    45a6:	10 92 36 0d 	sts	0x0D36, r1
	
	
	return status;
}
    45aa:	ca 01       	movw	r24, r20
    45ac:	c4 5d       	subi	r28, 0xD4	; 212
    45ae:	de 4f       	sbci	r29, 0xFE	; 254
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	1f 91       	pop	r17
    45c0:	0f 91       	pop	r16
    45c2:	ff 90       	pop	r15
    45c4:	ef 90       	pop	r14
    45c6:	df 90       	pop	r13
    45c8:	cf 90       	pop	r12
    45ca:	bf 90       	pop	r11
    45cc:	af 90       	pop	r10
    45ce:	08 95       	ret

000045d0 <_ZN4WIFI7connectEP5USART>:
	return 0;
}


int WIFI::connect(USART *fUSART)
{
    45d0:	8f 92       	push	r8
    45d2:	9f 92       	push	r9
    45d4:	af 92       	push	r10
    45d6:	bf 92       	push	r11
    45d8:	cf 92       	push	r12
    45da:	df 92       	push	r13
    45dc:	ef 92       	push	r14
    45de:	ff 92       	push	r15
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	4c 01       	movw	r8, r24
    45ea:	eb 01       	movw	r28, r22
    45ec:	68 94       	set
    45ee:	aa 24       	eor	r10, r10
    45f0:	a2 f8       	bld	r10, 2
    45f2:	b1 2c       	mov	r11, r1
	{
		
		// check if it tries to connect more than 3 times then send back a flag to reset the wifi
		if (i > 3) return 0;

		fUSART->sendToUSART0("AT+CIPSTART=\"TCP\",\"test.airsensors.ca\",80\r\n");             //start up the connection
    45f4:	62 e8       	ldi	r22, 0x82	; 130
    45f6:	72 e0       	ldi	r23, 0x02	; 2
    45f8:	ce 01       	movw	r24, r28
    45fa:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
		fUSART->sendToUSART1("AT+CIPSTART=\"TCP\",\"test.airsensors.ca\",80\r\n");             //start up the connection
    45fe:	62 e8       	ldi	r22, 0x82	; 130
    4600:	72 e0       	ldi	r23, 0x02	; 2
    4602:	ce 01       	movw	r24, r28
    4604:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
		int status = checkRX(fUSART, "K", 1, "CON", 3, TIMEOUT2);
    4608:	c0 90 a0 01 	lds	r12, 0x01A0
    460c:	d0 90 a1 01 	lds	r13, 0x01A1
    4610:	0f 2e       	mov	r0, r31
    4612:	f3 e0       	ldi	r31, 0x03	; 3
    4614:	ef 2e       	mov	r14, r31
    4616:	f1 2c       	mov	r15, r1
    4618:	f0 2d       	mov	r31, r0
    461a:	0f e0       	ldi	r16, 0x0F	; 15
    461c:	13 e0       	ldi	r17, 0x03	; 3
    461e:	21 e0       	ldi	r18, 0x01	; 1
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	4e ea       	ldi	r20, 0xAE	; 174
    4624:	52 e0       	ldi	r21, 0x02	; 2
    4626:	be 01       	movw	r22, r28
    4628:	c4 01       	movw	r24, r8
    462a:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>

		if (status ==1) {
    462e:	81 30       	cpi	r24, 0x01	; 1
    4630:	91 05       	cpc	r25, r1
    4632:	41 f4       	brne	.+16     	; 0x4644 <_ZN4WIFI7connectEP5USART+0x74>
			fUSART->sendToUSART1("Connected to Host.\r\n");
    4634:	60 eb       	ldi	r22, 0xB0	; 176
    4636:	72 e0       	ldi	r23, 0x02	; 2
    4638:	ce 01       	movw	r24, r28
    463a:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
			fUSART->sendToUSART1("could not connect. attempting to reconnect");
		}
	
	}
	
	return 1;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	90 e0       	ldi	r25, 0x00	; 0
		fUSART->sendToUSART1("AT+CIPSTART=\"TCP\",\"test.airsensors.ca\",80\r\n");             //start up the connection
		int status = checkRX(fUSART, "K", 1, "CON", 3, TIMEOUT2);

		if (status ==1) {
			fUSART->sendToUSART1("Connected to Host.\r\n");
			break;
    4642:	19 c0       	rjmp	.+50     	; 0x4676 <_ZN4WIFI7connectEP5USART+0xa6>
		} 
		if (status == 2) {
    4644:	82 30       	cpi	r24, 0x02	; 2
    4646:	91 05       	cpc	r25, r1
    4648:	41 f4       	brne	.+16     	; 0x465a <_ZN4WIFI7connectEP5USART+0x8a>
			fUSART->sendToUSART1("Already connected.\r\n");
    464a:	65 ec       	ldi	r22, 0xC5	; 197
    464c:	72 e0       	ldi	r23, 0x02	; 2
    464e:	ce 01       	movw	r24, r28
    4650:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
			fUSART->sendToUSART1("could not connect. attempting to reconnect");
		}
	
	}
	
	return 1;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	90 e0       	ldi	r25, 0x00	; 0
			fUSART->sendToUSART1("Connected to Host.\r\n");
			break;
		} 
		if (status == 2) {
			fUSART->sendToUSART1("Already connected.\r\n");
			break;
    4658:	0e c0       	rjmp	.+28     	; 0x4676 <_ZN4WIFI7connectEP5USART+0xa6>
		}
		if (status == 0) {
    465a:	89 2b       	or	r24, r25
    465c:	29 f4       	brne	.+10     	; 0x4668 <_ZN4WIFI7connectEP5USART+0x98>
			fUSART->sendToUSART1("could not connect. attempting to reconnect");
    465e:	6a ed       	ldi	r22, 0xDA	; 218
    4660:	72 e0       	ldi	r23, 0x02	; 2
    4662:	ce 01       	movw	r24, r28
    4664:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	a8 1a       	sub	r10, r24
    466c:	b1 08       	sbc	r11, r1

	for (int i = 0; i <= 5; i++)
	{
		
		// check if it tries to connect more than 3 times then send back a flag to reset the wifi
		if (i > 3) return 0;
    466e:	09 f0       	breq	.+2      	; 0x4672 <_ZN4WIFI7connectEP5USART+0xa2>
    4670:	c1 cf       	rjmp	.-126    	; 0x45f4 <_ZN4WIFI7connectEP5USART+0x24>
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	90 e0       	ldi	r25, 0x00	; 0
		}
	
	}
	
	return 1;
}
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	ff 90       	pop	r15
    4680:	ef 90       	pop	r14
    4682:	df 90       	pop	r13
    4684:	cf 90       	pop	r12
    4686:	bf 90       	pop	r11
    4688:	af 90       	pop	r10
    468a:	9f 90       	pop	r9
    468c:	8f 90       	pop	r8
    468e:	08 95       	ret

00004690 <_ZN4WIFI9setupWifiEP5USARTPcS2_>:


int WIFI::setupWifi(USART* fUSART, char *USERNAME, char *PASSWORD)
{
    4690:	4f 92       	push	r4
    4692:	5f 92       	push	r5
    4694:	6f 92       	push	r6
    4696:	7f 92       	push	r7
    4698:	8f 92       	push	r8
    469a:	9f 92       	push	r9
    469c:	af 92       	push	r10
    469e:	bf 92       	push	r11
    46a0:	cf 92       	push	r12
    46a2:	df 92       	push	r13
    46a4:	ef 92       	push	r14
    46a6:	ff 92       	push	r15
    46a8:	0f 93       	push	r16
    46aa:	1f 93       	push	r17
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
    46b4:	c4 56       	subi	r28, 0x64	; 100
    46b6:	d1 09       	sbc	r29, r1
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	4c 01       	movw	r8, r24
    46c4:	5b 01       	movw	r10, r22
    46c6:	74 2e       	mov	r7, r20
    46c8:	65 2e       	mov	r6, r21
    46ca:	52 2e       	mov	r5, r18
    46cc:	43 2e       	mov	r4, r19
    46ce:	2f ef       	ldi	r18, 0xFF	; 255
    46d0:	33 ed       	ldi	r19, 0xD3	; 211
    46d2:	80 e3       	ldi	r24, 0x30	; 48
    46d4:	21 50       	subi	r18, 0x01	; 1
    46d6:	30 40       	sbci	r19, 0x00	; 0
    46d8:	80 40       	sbci	r24, 0x00	; 0
    46da:	e1 f7       	brne	.-8      	; 0x46d4 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x44>
    46dc:	00 c0       	rjmp	.+0      	; 0x46de <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x4e>
    46de:	00 00       	nop
	
	_delay_ms(2000);
	char cmd[100];
	sprintf(cmd, "AT+RST\r\n");
    46e0:	89 e0       	ldi	r24, 0x09	; 9
    46e2:	e5 e0       	ldi	r30, 0x05	; 5
    46e4:	f3 e0       	ldi	r31, 0x03	; 3
    46e6:	8e 01       	movw	r16, r28
    46e8:	0f 5f       	subi	r16, 0xFF	; 255
    46ea:	1f 4f       	sbci	r17, 0xFF	; 255
    46ec:	d8 01       	movw	r26, r16
    46ee:	01 90       	ld	r0, Z+
    46f0:	0d 92       	st	X+, r0
    46f2:	8a 95       	dec	r24
    46f4:	e1 f7       	brne	.-8      	; 0x46ee <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x5e>
	
	uint8_t connect_bool = 0; // this determines if the reset connected or not

	// try to reset first
	fUSART->sendToUSART0(cmd);
    46f6:	b8 01       	movw	r22, r16
    46f8:	c5 01       	movw	r24, r10
    46fa:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	memset(cmd, 0, 100);
    46fe:	84 e6       	ldi	r24, 0x64	; 100
    4700:	f8 01       	movw	r30, r16
    4702:	11 92       	st	Z+, r1
    4704:	8a 95       	dec	r24
    4706:	e9 f7       	brne	.-6      	; 0x4702 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x72>
	if (checkRX(fUSART, " CON", 4, "NONE", 300, TIMEOUT3) == 1) connect_bool = 1;
    4708:	c0 90 9e 01 	lds	r12, 0x019E
    470c:	d0 90 9f 01 	lds	r13, 0x019F
    4710:	0f 2e       	mov	r0, r31
    4712:	fc e2       	ldi	r31, 0x2C	; 44
    4714:	ef 2e       	mov	r14, r31
    4716:	ff 24       	eor	r15, r15
    4718:	f3 94       	inc	r15
    471a:	f0 2d       	mov	r31, r0
    471c:	0d e7       	ldi	r16, 0x7D	; 125
    471e:	12 e0       	ldi	r17, 0x02	; 2
    4720:	24 e0       	ldi	r18, 0x04	; 4
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	4e e0       	ldi	r20, 0x0E	; 14
    4726:	53 e0       	ldi	r21, 0x03	; 3
    4728:	b5 01       	movw	r22, r10
    472a:	c4 01       	movw	r24, r8
    472c:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>

	if (connect_bool == 0) {
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	b1 f1       	breq	.+108    	; 0x47a0 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x110>
		if (checkRX(fUSART, "IP", 2, "NONE", 300, TIMEOUT3) == 1) connect_bool = 1;
    4734:	c0 90 9e 01 	lds	r12, 0x019E
    4738:	d0 90 9f 01 	lds	r13, 0x019F
    473c:	22 e0       	ldi	r18, 0x02	; 2
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	43 e1       	ldi	r20, 0x13	; 19
    4742:	53 e0       	ldi	r21, 0x03	; 3
    4744:	b5 01       	movw	r22, r10
    4746:	c4 01       	movw	r24, r8
    4748:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	09 f0       	breq	.+2      	; 0x4752 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0xc2>
    4750:	81 c0       	rjmp	.+258    	; 0x4854 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x1c4>
    4752:	26 c0       	rjmp	.+76     	; 0x47a0 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x110>
		fUSART->sendToUSART0(cmd);
		fUSART->sendToUSART1(cmd);
		memset(cmd, 0, 100);

		if (checkRX(fUSART, " CON", 4, "NONE", 300, TIMEOUT1) != 1) {
			fUSART->sendToUSART1("Cound not connect to network\r\n");
    4754:	66 e1       	ldi	r22, 0x16	; 22
    4756:	73 e0       	ldi	r23, 0x03	; 3
    4758:	c5 01       	movw	r24, r10
    475a:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
			return connect_bool;
    475e:	00 e0       	ldi	r16, 0x00	; 0
    4760:	10 e0       	ldi	r17, 0x00	; 0
    4762:	b1 c0       	rjmp	.+354    	; 0x48c6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x236>
		}
		
		
		if (checkRX(fUSART, "IP", 2, "NONE", 300, TIMEOUT4) != 1) {
    4764:	c0 90 9c 01 	lds	r12, 0x019C
    4768:	d0 90 9d 01 	lds	r13, 0x019D
    476c:	0f 2e       	mov	r0, r31
    476e:	fc e2       	ldi	r31, 0x2C	; 44
    4770:	ef 2e       	mov	r14, r31
    4772:	ff 24       	eor	r15, r15
    4774:	f3 94       	inc	r15
    4776:	f0 2d       	mov	r31, r0
    4778:	0d e7       	ldi	r16, 0x7D	; 125
    477a:	12 e0       	ldi	r17, 0x02	; 2
    477c:	22 e0       	ldi	r18, 0x02	; 2
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	43 e1       	ldi	r20, 0x13	; 19
    4782:	53 e0       	ldi	r21, 0x03	; 3
    4784:	b5 01       	movw	r22, r10
    4786:	c4 01       	movw	r24, r8
    4788:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	41 f0       	breq	.+16     	; 0x47a0 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x110>
			fUSART->sendToUSART1("Could not get IP address\r\n");
    4790:	65 e3       	ldi	r22, 0x35	; 53
    4792:	73 e0       	ldi	r23, 0x03	; 3
    4794:	c5 01       	movw	r24, r10
    4796:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
			return connect_bool;
    479a:	00 e0       	ldi	r16, 0x00	; 0
    479c:	10 e0       	ldi	r17, 0x00	; 0
    479e:	93 c0       	rjmp	.+294    	; 0x48c6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x236>

		connect_bool = 1;
	}


	fUSART->sendToUSART0("AT+CWMODE=1\r\n");
    47a0:	60 e5       	ldi	r22, 0x50	; 80
    47a2:	73 e0       	ldi	r23, 0x03	; 3
    47a4:	c5 01       	movw	r24, r10
    47a6:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	if (checkRX(fUSART, "K", 1, "NONE", 300, TIMEOUT2) != 1) {
    47aa:	c0 90 a0 01 	lds	r12, 0x01A0
    47ae:	d0 90 a1 01 	lds	r13, 0x01A1
    47b2:	0f 2e       	mov	r0, r31
    47b4:	fc e2       	ldi	r31, 0x2C	; 44
    47b6:	ef 2e       	mov	r14, r31
    47b8:	ff 24       	eor	r15, r15
    47ba:	f3 94       	inc	r15
    47bc:	f0 2d       	mov	r31, r0
    47be:	0d e7       	ldi	r16, 0x7D	; 125
    47c0:	12 e0       	ldi	r17, 0x02	; 2
    47c2:	21 e0       	ldi	r18, 0x01	; 1
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	4e ea       	ldi	r20, 0xAE	; 174
    47c8:	52 e0       	ldi	r21, 0x02	; 2
    47ca:	b5 01       	movw	r22, r10
    47cc:	c4 01       	movw	r24, r8
    47ce:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    47d2:	01 97       	sbiw	r24, 0x01	; 1
    47d4:	41 f0       	breq	.+16     	; 0x47e6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x156>
		fUSART->sendToUSART1("Could not chance CWMODE\r\n");
    47d6:	6e e5       	ldi	r22, 0x5E	; 94
    47d8:	73 e0       	ldi	r23, 0x03	; 3
    47da:	c5 01       	movw	r24, r10
    47dc:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
		return 0;
    47e0:	00 e0       	ldi	r16, 0x00	; 0
    47e2:	10 e0       	ldi	r17, 0x00	; 0
    47e4:	70 c0       	rjmp	.+224    	; 0x48c6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x236>
	}

	fUSART->sendToUSART0("AT+CIFSR\r\n");
    47e6:	68 e7       	ldi	r22, 0x78	; 120
    47e8:	73 e0       	ldi	r23, 0x03	; 3
    47ea:	c5 01       	movw	r24, r10
    47ec:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	if (checkRX(fUSART, "192", 3, "NONE", 300, TIMEOUT2) != 1) {
    47f0:	c0 90 a0 01 	lds	r12, 0x01A0
    47f4:	d0 90 a1 01 	lds	r13, 0x01A1
    47f8:	0f 2e       	mov	r0, r31
    47fa:	fc e2       	ldi	r31, 0x2C	; 44
    47fc:	ef 2e       	mov	r14, r31
    47fe:	ff 24       	eor	r15, r15
    4800:	f3 94       	inc	r15
    4802:	f0 2d       	mov	r31, r0
    4804:	0d e7       	ldi	r16, 0x7D	; 125
    4806:	12 e0       	ldi	r17, 0x02	; 2
    4808:	23 e0       	ldi	r18, 0x03	; 3
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	43 e8       	ldi	r20, 0x83	; 131
    480e:	53 e0       	ldi	r21, 0x03	; 3
    4810:	b5 01       	movw	r22, r10
    4812:	c4 01       	movw	r24, r8
    4814:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    4818:	8c 01       	movw	r16, r24
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	41 f0       	breq	.+16     	; 0x482e <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x19e>
		fUSART->sendToUSART1("No IP address\r\n");
    481e:	67 e8       	ldi	r22, 0x87	; 135
    4820:	73 e0       	ldi	r23, 0x03	; 3
    4822:	c5 01       	movw	r24, r10
    4824:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
		return 0;
    4828:	00 e0       	ldi	r16, 0x00	; 0
    482a:	10 e0       	ldi	r17, 0x00	; 0
    482c:	4c c0       	rjmp	.+152    	; 0x48c6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x236>
	}
	
	fUSART->sendToUSART0("AT+CIPMUX=0\r\n");
    482e:	67 e9       	ldi	r22, 0x97	; 151
    4830:	73 e0       	ldi	r23, 0x03	; 3
    4832:	c5 01       	movw	r24, r10
    4834:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
    4838:	ff ef       	ldi	r31, 0xFF	; 255
    483a:	23 ed       	ldi	r18, 0xD3	; 211
    483c:	30 e3       	ldi	r19, 0x30	; 48
    483e:	f1 50       	subi	r31, 0x01	; 1
    4840:	20 40       	sbci	r18, 0x00	; 0
    4842:	30 40       	sbci	r19, 0x00	; 0
    4844:	e1 f7       	brne	.-8      	; 0x483e <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x1ae>
    4846:	00 c0       	rjmp	.+0      	; 0x4848 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x1b8>
    4848:	00 00       	nop
	//fUSART->sendToUSART1("AT+CIPMUX=0\r\n");
	
	_delay_ms(2000);
	int reset_flag;
	reset_flag = connect(fUSART);
    484a:	b5 01       	movw	r22, r10
    484c:	c4 01       	movw	r24, r8
    484e:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN4WIFI7connectEP5USART>

	return 1;
    4852:	39 c0       	rjmp	.+114    	; 0x48c6 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x236>
	if (connect_bool == 0) {
		if (checkRX(fUSART, "IP", 2, "NONE", 300, TIMEOUT3) == 1) connect_bool = 1;
	}

	if (connect_bool == 0) {
		sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", USERNAME, PASSWORD);
    4854:	4f 92       	push	r4
    4856:	5f 92       	push	r5
    4858:	6f 92       	push	r6
    485a:	7f 92       	push	r7
    485c:	85 ea       	ldi	r24, 0xA5	; 165
    485e:	93 e0       	ldi	r25, 0x03	; 3
    4860:	9f 93       	push	r25
    4862:	8f 93       	push	r24
    4864:	8e 01       	movw	r16, r28
    4866:	0f 5f       	subi	r16, 0xFF	; 255
    4868:	1f 4f       	sbci	r17, 0xFF	; 255
    486a:	1f 93       	push	r17
    486c:	0f 93       	push	r16
    486e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
		//sprintf(cmd, "AT+CWJAP=\"SOCAAR\",\"Particle$f1yf@r\"\r\n", USERNAME, PASSWORD);
					
		fUSART->sendToUSART0(cmd);
    4872:	b8 01       	movw	r22, r16
    4874:	c5 01       	movw	r24, r10
    4876:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
		fUSART->sendToUSART1(cmd);
    487a:	b8 01       	movw	r22, r16
    487c:	c5 01       	movw	r24, r10
    487e:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
		memset(cmd, 0, 100);
    4882:	84 e6       	ldi	r24, 0x64	; 100
    4884:	f8 01       	movw	r30, r16
    4886:	11 92       	st	Z+, r1
    4888:	8a 95       	dec	r24
    488a:	e9 f7       	brne	.-6      	; 0x4886 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x1f6>

		if (checkRX(fUSART, " CON", 4, "NONE", 300, TIMEOUT1) != 1) {
    488c:	c0 90 a2 01 	lds	r12, 0x01A2
    4890:	d0 90 a3 01 	lds	r13, 0x01A3
    4894:	0f 2e       	mov	r0, r31
    4896:	fc e2       	ldi	r31, 0x2C	; 44
    4898:	ef 2e       	mov	r14, r31
    489a:	ff 24       	eor	r15, r15
    489c:	f3 94       	inc	r15
    489e:	f0 2d       	mov	r31, r0
    48a0:	0d e7       	ldi	r16, 0x7D	; 125
    48a2:	12 e0       	ldi	r17, 0x02	; 2
    48a4:	24 e0       	ldi	r18, 0x04	; 4
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	4e e0       	ldi	r20, 0x0E	; 14
    48aa:	53 e0       	ldi	r21, 0x03	; 3
    48ac:	b5 01       	movw	r22, r10
    48ae:	c4 01       	movw	r24, r8
    48b0:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    48b4:	0f b6       	in	r0, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	0f be       	out	0x3f, r0	; 63
    48bc:	cd bf       	out	0x3d, r28	; 61
    48be:	01 97       	sbiw	r24, 0x01	; 1
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0x234>
    48c2:	48 cf       	rjmp	.-368    	; 0x4754 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0xc4>
    48c4:	4f cf       	rjmp	.-354    	; 0x4764 <_ZN4WIFI9setupWifiEP5USARTPcS2_+0xd4>
	_delay_ms(2000);
	int reset_flag;
	reset_flag = connect(fUSART);

	return 1;
}
    48c6:	c8 01       	movw	r24, r16
    48c8:	cc 59       	subi	r28, 0x9C	; 156
    48ca:	df 4f       	sbci	r29, 0xFF	; 255
    48cc:	0f b6       	in	r0, 0x3f	; 63
    48ce:	f8 94       	cli
    48d0:	de bf       	out	0x3e, r29	; 62
    48d2:	0f be       	out	0x3f, r0	; 63
    48d4:	cd bf       	out	0x3d, r28	; 61
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	df 90       	pop	r13
    48e4:	cf 90       	pop	r12
    48e6:	bf 90       	pop	r11
    48e8:	af 90       	pop	r10
    48ea:	9f 90       	pop	r9
    48ec:	8f 90       	pop	r8
    48ee:	7f 90       	pop	r7
    48f0:	6f 90       	pop	r6
    48f2:	5f 90       	pop	r5
    48f4:	4f 90       	pop	r4
    48f6:	08 95       	ret

000048f8 <_ZN4WIFI11POST_singleEP5USARTPcS2_S2_S2_>:




int WIFI::POST_single(USART* fUSART, char *post_len, char *body_len, char *BUFFER, char *HEADER)
{
    48f8:	af 92       	push	r10
    48fa:	bf 92       	push	r11
    48fc:	cf 92       	push	r12
    48fe:	df 92       	push	r13
    4900:	ef 92       	push	r14
    4902:	ff 92       	push	r15
    4904:	0f 93       	push	r16
    4906:	1f 93       	push	r17
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	eb 01       	movw	r28, r22
    490e:	5a 01       	movw	r10, r20
    4910:	69 01       	movw	r12, r18

	fUSART->sendToUSART0("AT+CIPSEND=");  //begin send data to remote server
    4912:	6a eb       	ldi	r22, 0xBA	; 186
    4914:	73 e0       	ldi	r23, 0x03	; 3
    4916:	ce 01       	movw	r24, r28
    4918:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0(post_len);  //begin send data to remote server
    491c:	b5 01       	movw	r22, r10
    491e:	ce 01       	movw	r24, r28
    4920:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0("\r\n");  //begin send data to remote server
    4924:	6d e9       	ldi	r22, 0x9D	; 157
    4926:	75 e0       	ldi	r23, 0x05	; 5
    4928:	ce 01       	movw	r24, r28
    492a:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART1("AT+CIPSEND=");  //begin send data to remote server
    492e:	6a eb       	ldi	r22, 0xBA	; 186
    4930:	73 e0       	ldi	r23, 0x03	; 3
    4932:	ce 01       	movw	r24, r28
    4934:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1(post_len);  //begin send data to remote server
    4938:	b5 01       	movw	r22, r10
    493a:	ce 01       	movw	r24, r28
    493c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1("\r\n");  //begin send data to remote server
    4940:	6d e9       	ldi	r22, 0x9D	; 157
    4942:	75 e0       	ldi	r23, 0x05	; 5
    4944:	ce 01       	movw	r24, r28
    4946:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
    494a:	2f ef       	ldi	r18, 0xFF	; 255
    494c:	80 e7       	ldi	r24, 0x70	; 112
    494e:	92 e0       	ldi	r25, 0x02	; 2
    4950:	21 50       	subi	r18, 0x01	; 1
    4952:	80 40       	sbci	r24, 0x00	; 0
    4954:	90 40       	sbci	r25, 0x00	; 0
    4956:	e1 f7       	brne	.-8      	; 0x4950 <_ZN4WIFI11POST_singleEP5USARTPcS2_S2_S2_+0x58>
    4958:	00 c0       	rjmp	.+0      	; 0x495a <_ZN4WIFI11POST_singleEP5USARTPcS2_S2_S2_+0x62>
    495a:	00 00       	nop
	_delay_ms(100);


	// POST HEADER
	
	fUSART->sendToUSART0("POST /cloud/post3.php HTTP/1.1\r\n");
    495c:	66 ec       	ldi	r22, 0xC6	; 198
    495e:	73 e0       	ldi	r23, 0x03	; 3
    4960:	ce 01       	movw	r24, r28
    4962:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART1("POST /cloud/post3.php HTTP/1.1\r\n");
    4966:	66 ec       	ldi	r22, 0xC6	; 198
    4968:	73 e0       	ldi	r23, 0x03	; 3
    496a:	ce 01       	movw	r24, r28
    496c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	
	fUSART->sendToUSART0("Host: test.airsensors.ca\r\n");
    4970:	67 ee       	ldi	r22, 0xE7	; 231
    4972:	73 e0       	ldi	r23, 0x03	; 3
    4974:	ce 01       	movw	r24, r28
    4976:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART1("Host: test.airsensors.ca\r\n");
    497a:	67 ee       	ldi	r22, 0xE7	; 231
    497c:	73 e0       	ldi	r23, 0x03	; 3
    497e:	ce 01       	movw	r24, r28
    4980:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	
	fUSART->sendToUSART0("Content-Type: application/x-www-form-urlencoded\r\n");
    4984:	6f ec       	ldi	r22, 0xCF	; 207
    4986:	75 e0       	ldi	r23, 0x05	; 5
    4988:	ce 01       	movw	r24, r28
    498a:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART1("Content-Type: application/x-www-form-urlencoded\r\n");
    498e:	6f ec       	ldi	r22, 0xCF	; 207
    4990:	75 e0       	ldi	r23, 0x05	; 5
    4992:	ce 01       	movw	r24, r28
    4994:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>

	fUSART->sendToUSART0("Content-Length: "); //447\r\n\r\n");
    4998:	64 e6       	ldi	r22, 0x64	; 100
    499a:	74 e0       	ldi	r23, 0x04	; 4
    499c:	ce 01       	movw	r24, r28
    499e:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART1("Content-Length: "); //447\r\n\r\n");
    49a2:	64 e6       	ldi	r22, 0x64	; 100
    49a4:	74 e0       	ldi	r23, 0x04	; 4
    49a6:	ce 01       	movw	r24, r28
    49a8:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	
	fUSART->sendToUSART0(body_len);
    49ac:	b6 01       	movw	r22, r12
    49ae:	ce 01       	movw	r24, r28
    49b0:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0("\r\n\r\n");
    49b4:	6b e9       	ldi	r22, 0x9B	; 155
    49b6:	75 e0       	ldi	r23, 0x05	; 5
    49b8:	ce 01       	movw	r24, r28
    49ba:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	
	fUSART->sendToUSART1(body_len);
    49be:	b6 01       	movw	r22, r12
    49c0:	ce 01       	movw	r24, r28
    49c2:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1("\r\n\r\n");
    49c6:	6b e9       	ldi	r22, 0x9B	; 155
    49c8:	75 e0       	ldi	r23, 0x05	; 5
    49ca:	ce 01       	movw	r24, r28
    49cc:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>


	fUSART->sendToUSART0("vector=");
    49d0:	61 e0       	ldi	r22, 0x01	; 1
    49d2:	76 e0       	ldi	r23, 0x06	; 6
    49d4:	ce 01       	movw	r24, r28
    49d6:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0(BUFFER);
    49da:	b8 01       	movw	r22, r16
    49dc:	ce 01       	movw	r24, r28
    49de:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0("&header=");
    49e2:	69 e0       	ldi	r22, 0x09	; 9
    49e4:	76 e0       	ldi	r23, 0x06	; 6
    49e6:	ce 01       	movw	r24, r28
    49e8:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0(HEADER);
    49ec:	b7 01       	movw	r22, r14
    49ee:	ce 01       	movw	r24, r28
    49f0:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
	fUSART->sendToUSART0("\r\n\r\n");
    49f4:	6b e9       	ldi	r22, 0x9B	; 155
    49f6:	75 e0       	ldi	r23, 0x05	; 5
    49f8:	ce 01       	movw	r24, r28
    49fa:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>

	fUSART->sendToUSART1("vector=");
    49fe:	61 e0       	ldi	r22, 0x01	; 1
    4a00:	76 e0       	ldi	r23, 0x06	; 6
    4a02:	ce 01       	movw	r24, r28
    4a04:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1(BUFFER);
    4a08:	b8 01       	movw	r22, r16
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1("&header=");
    4a10:	69 e0       	ldi	r22, 0x09	; 9
    4a12:	76 e0       	ldi	r23, 0x06	; 6
    4a14:	ce 01       	movw	r24, r28
    4a16:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1(HEADER);
    4a1a:	b7 01       	movw	r22, r14
    4a1c:	ce 01       	movw	r24, r28
    4a1e:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
	fUSART->sendToUSART1("\r\n");
    4a22:	6d e9       	ldi	r22, 0x9D	; 157
    4a24:	75 e0       	ldi	r23, 0x05	; 5
    4a26:	ce 01       	movw	r24, r28
    4a28:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>


	return 0;
}
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	bf 90       	pop	r11
    4a42:	af 90       	pop	r10
    4a44:	08 95       	ret

00004a46 <_ZN4WIFI16send_applicationEP5USARTPciS2_i>:


int WIFI::send_application(USART* fUSART, char *BUFFER, int BUFFER_len, char *HEADER, int HEADER_len)
{
    4a46:	4f 92       	push	r4
    4a48:	5f 92       	push	r5
    4a4a:	6f 92       	push	r6
    4a4c:	7f 92       	push	r7
    4a4e:	8f 92       	push	r8
    4a50:	9f 92       	push	r9
    4a52:	af 92       	push	r10
    4a54:	bf 92       	push	r11
    4a56:	cf 92       	push	r12
    4a58:	df 92       	push	r13
    4a5a:	ef 92       	push	r14
    4a5c:	ff 92       	push	r15
    4a5e:	0f 93       	push	r16
    4a60:	1f 93       	push	r17
    4a62:	cf 93       	push	r28
    4a64:	df 93       	push	r29
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	2a 97       	sbiw	r28, 0x0a	; 10
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	cd bf       	out	0x3d, r28	; 61
    4a76:	4c 01       	movw	r8, r24
    4a78:	5b 01       	movw	r10, r22
    4a7a:	2a 01       	movw	r4, r20
    4a7c:	38 01       	movw	r6, r16
	
	int body_length = BUFFER_len + HEADER_len + 19;
    4a7e:	e2 0e       	add	r14, r18
    4a80:	f3 1e       	adc	r15, r19
	int post_length = body_length + 130;
    4a82:	c7 01       	movw	r24, r14
    4a84:	8b 56       	subi	r24, 0x6B	; 107
    4a86:	9f 4f       	sbci	r25, 0xFF	; 255
	
	char post_len[5];
	char body_len[5];
	
	sprintf(post_len, "%d", post_length);
    4a88:	9f 93       	push	r25
    4a8a:	8f 93       	push	r24
    4a8c:	0d ec       	ldi	r16, 0xCD	; 205
    4a8e:	11 e0       	ldi	r17, 0x01	; 1
    4a90:	1f 93       	push	r17
    4a92:	0f 93       	push	r16
    4a94:	ce 01       	movw	r24, r28
    4a96:	06 96       	adiw	r24, 0x06	; 6
    4a98:	9f 93       	push	r25
    4a9a:	8f 93       	push	r24
    4a9c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>


int WIFI::send_application(USART* fUSART, char *BUFFER, int BUFFER_len, char *HEADER, int HEADER_len)
{
	
	int body_length = BUFFER_len + HEADER_len + 19;
    4aa0:	23 e1       	ldi	r18, 0x13	; 19
    4aa2:	e2 0e       	add	r14, r18
    4aa4:	f1 1c       	adc	r15, r1
	
	char post_len[5];
	char body_len[5];
	
	sprintf(post_len, "%d", post_length);
	sprintf(body_len, "%d", body_length);
    4aa6:	ff 92       	push	r15
    4aa8:	ef 92       	push	r14
    4aaa:	1f 93       	push	r17
    4aac:	0f 93       	push	r16
    4aae:	ce 01       	movw	r24, r28
    4ab0:	01 96       	adiw	r24, 0x01	; 1
    4ab2:	9f 93       	push	r25
    4ab4:	8f 93       	push	r24
    4ab6:	0e 94 91 27 	call	0x4f22	; 0x4f22 <sprintf>
	int reset_flag = 0;

	while (post_STATUS != 1)
	{

		fUSART->sendToUSART0("AT+CIPSTATUS\r\n");
    4aba:	67 eb       	ldi	r22, 0xB7	; 183
    4abc:	75 e0       	ldi	r23, 0x05	; 5
    4abe:	c5 01       	movw	r24, r10
    4ac0:	0e 94 14 22 	call	0x4428	; 0x4428 <_ZN5USART12sendToUSART0EPc>
		fUSART->sendToUSART1("AT+CIPSTATUS\r\n");
    4ac4:	67 eb       	ldi	r22, 0xB7	; 183
    4ac6:	75 e0       	ldi	r23, 0x05	; 5
    4ac8:	c5 01       	movw	r24, r10
    4aca:	0e 94 fd 21 	call	0x43fa	; 0x43fa <_ZN5USART12sendToUSART1EPc>
		
		int status_temp = checkRX(fUSART, ":3", 2, ":4", 2, TIMEOUT3);
    4ace:	c0 90 9e 01 	lds	r12, 0x019E
    4ad2:	d0 90 9f 01 	lds	r13, 0x019F
    4ad6:	68 94       	set
    4ad8:	ee 24       	eor	r14, r14
    4ada:	e1 f8       	bld	r14, 1
    4adc:	f1 2c       	mov	r15, r1
    4ade:	06 ec       	ldi	r16, 0xC6	; 198
    4ae0:	15 e0       	ldi	r17, 0x05	; 5
    4ae2:	22 e0       	ldi	r18, 0x02	; 2
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	49 ec       	ldi	r20, 0xC9	; 201
    4ae8:	55 e0       	ldi	r21, 0x05	; 5
    4aea:	b5 01       	movw	r22, r10
    4aec:	c4 01       	movw	r24, r8
    4aee:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
		if (status_temp != 1) {
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	39 f0       	breq	.+14     	; 0x4b0e <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0xc8>
			if (connect(fUSART) ==0) return 0;
    4b00:	b5 01       	movw	r22, r10
    4b02:	c4 01       	movw	r24, r8
    4b04:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN4WIFI7connectEP5USART>
    4b08:	00 97       	sbiw	r24, 0x00	; 0
    4b0a:	09 f4       	brne	.+2      	; 0x4b0e <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0xc8>
    4b0c:	5a c0       	rjmp	.+180    	; 0x4bc2 <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x17c>
		}
		
		POST_single(fUSART, post_len, body_len, BUFFER, HEADER);
    4b0e:	73 01       	movw	r14, r6
    4b10:	82 01       	movw	r16, r4
    4b12:	9e 01       	movw	r18, r28
    4b14:	2f 5f       	subi	r18, 0xFF	; 255
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	ae 01       	movw	r20, r28
    4b1a:	4a 5f       	subi	r20, 0xFA	; 250
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1e:	b5 01       	movw	r22, r10
    4b20:	c4 01       	movw	r24, r8
    4b22:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <_ZN4WIFI11POST_singleEP5USARTPcS2_S2_S2_>

		TIMSK &= ~(1 << OCIE1A);
    4b26:	87 b7       	in	r24, 0x37	; 55
    4b28:	8f 7e       	andi	r24, 0xEF	; 239
    4b2a:	87 bf       	out	0x37, r24	; 55
		post_STATUS = checkRX(fUSART, "*/", 2, "ERR", 3, TIMEOUT2);
    4b2c:	c0 90 a0 01 	lds	r12, 0x01A0
    4b30:	d0 90 a1 01 	lds	r13, 0x01A1
    4b34:	0f 2e       	mov	r0, r31
    4b36:	f3 e0       	ldi	r31, 0x03	; 3
    4b38:	ef 2e       	mov	r14, r31
    4b3a:	f1 2c       	mov	r15, r1
    4b3c:	f0 2d       	mov	r31, r0
    4b3e:	02 e1       	ldi	r16, 0x12	; 18
    4b40:	16 e0       	ldi	r17, 0x06	; 6
    4b42:	22 e0       	ldi	r18, 0x02	; 2
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	4c ec       	ldi	r20, 0xCC	; 204
    4b48:	55 e0       	ldi	r21, 0x05	; 5
    4b4a:	b5 01       	movw	r22, r10
    4b4c:	c4 01       	movw	r24, r8
    4b4e:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    4b52:	3c 01       	movw	r6, r24
		if (post_STATUS == 2) return 2;
    4b54:	02 97       	sbiw	r24, 0x02	; 2
    4b56:	99 f1       	breq	.+102    	; 0x4bbe <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x178>

		TIMSK |= (1 << OCIE1A);
    4b58:	97 b7       	in	r25, 0x37	; 55
    4b5a:	90 61       	ori	r25, 0x10	; 16
    4b5c:	97 bf       	out	0x37, r25	; 55
    4b5e:	8f ef       	ldi	r24, 0xFF	; 255
    4b60:	99 e6       	ldi	r25, 0x69	; 105
    4b62:	28 e1       	ldi	r18, 0x18	; 24
    4b64:	81 50       	subi	r24, 0x01	; 1
    4b66:	90 40       	sbci	r25, 0x00	; 0
    4b68:	20 40       	sbci	r18, 0x00	; 0
    4b6a:	e1 f7       	brne	.-8      	; 0x4b64 <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x11e>
    4b6c:	00 c0       	rjmp	.+0      	; 0x4b6e <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x128>
    4b6e:	00 00       	nop


// private function used to send the special character(26) through the serial port *this is required to send the data
int WIFI::sendSpecial(USART* fUSART)
{
	fUSART->Transmit0(char(26));
    4b70:	6a e1       	ldi	r22, 0x1A	; 26
    4b72:	c5 01       	movw	r24, r10
    4b74:	0e 94 f7 21 	call	0x43ee	; 0x43ee <_ZN5USART9Transmit0Eh>
		TIMSK |= (1 << OCIE1A);
		
		_delay_ms(1000);//200
		sendSpecial(fUSART);
		
		if (post_STATUS != 1) post_STATUS = checkRX(fUSART, "*/", 2, "NONE", 300, TIMEOUT2);
    4b78:	6a 94       	dec	r6
    4b7a:	67 28       	or	r6, r7
    4b7c:	a1 f0       	breq	.+40     	; 0x4ba6 <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x160>
    4b7e:	c0 90 a0 01 	lds	r12, 0x01A0
    4b82:	d0 90 a1 01 	lds	r13, 0x01A1
    4b86:	0f 2e       	mov	r0, r31
    4b88:	fc e2       	ldi	r31, 0x2C	; 44
    4b8a:	ef 2e       	mov	r14, r31
    4b8c:	ff 24       	eor	r15, r15
    4b8e:	f3 94       	inc	r15
    4b90:	f0 2d       	mov	r31, r0
    4b92:	0d e7       	ldi	r16, 0x7D	; 125
    4b94:	12 e0       	ldi	r17, 0x02	; 2
    4b96:	22 e0       	ldi	r18, 0x02	; 2
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	4c ec       	ldi	r20, 0xCC	; 204
    4b9c:	55 e0       	ldi	r21, 0x05	; 5
    4b9e:	b5 01       	movw	r22, r10
    4ba0:	c4 01       	movw	r24, r8
    4ba2:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN4WIFI7checkRXEP5USARTPciS2_ii>
    4ba6:	8f ef       	ldi	r24, 0xFF	; 255
    4ba8:	94 e3       	ldi	r25, 0x34	; 52
    4baa:	2c e0       	ldi	r18, 0x0C	; 12
    4bac:	81 50       	subi	r24, 0x01	; 1
    4bae:	90 40       	sbci	r25, 0x00	; 0
    4bb0:	20 40       	sbci	r18, 0x00	; 0
    4bb2:	e1 f7       	brne	.-8      	; 0x4bac <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x166>
    4bb4:	00 c0       	rjmp	.+0      	; 0x4bb6 <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x170>
    4bb6:	00 00       	nop
		_delay_ms(500); // might need to change this //2000 was 2000
		post_STATUS = 1;
	}


	return 1;
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <_ZN4WIFI16send_applicationEP5USARTPciS2_i+0x17c>
		
		POST_single(fUSART, post_len, body_len, BUFFER, HEADER);

		TIMSK &= ~(1 << OCIE1A);
		post_STATUS = checkRX(fUSART, "*/", 2, "ERR", 3, TIMEOUT2);
		if (post_STATUS == 2) return 2;
    4bbe:	82 e0       	ldi	r24, 0x02	; 2
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
		post_STATUS = 1;
	}


	return 1;
}
    4bc2:	2a 96       	adiw	r28, 0x0a	; 10
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	de bf       	out	0x3e, r29	; 62
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    4bd6:	ff 90       	pop	r15
    4bd8:	ef 90       	pop	r14
    4bda:	df 90       	pop	r13
    4bdc:	cf 90       	pop	r12
    4bde:	bf 90       	pop	r11
    4be0:	af 90       	pop	r10
    4be2:	9f 90       	pop	r9
    4be4:	8f 90       	pop	r8
    4be6:	7f 90       	pop	r7
    4be8:	6f 90       	pop	r6
    4bea:	5f 90       	pop	r5
    4bec:	4f 90       	pop	r4
    4bee:	08 95       	ret

00004bf0 <__udivmodsi4>:
    4bf0:	a1 e2       	ldi	r26, 0x21	; 33
    4bf2:	1a 2e       	mov	r1, r26
    4bf4:	aa 1b       	sub	r26, r26
    4bf6:	bb 1b       	sub	r27, r27
    4bf8:	fd 01       	movw	r30, r26
    4bfa:	0d c0       	rjmp	.+26     	; 0x4c16 <__udivmodsi4_ep>

00004bfc <__udivmodsi4_loop>:
    4bfc:	aa 1f       	adc	r26, r26
    4bfe:	bb 1f       	adc	r27, r27
    4c00:	ee 1f       	adc	r30, r30
    4c02:	ff 1f       	adc	r31, r31
    4c04:	a2 17       	cp	r26, r18
    4c06:	b3 07       	cpc	r27, r19
    4c08:	e4 07       	cpc	r30, r20
    4c0a:	f5 07       	cpc	r31, r21
    4c0c:	20 f0       	brcs	.+8      	; 0x4c16 <__udivmodsi4_ep>
    4c0e:	a2 1b       	sub	r26, r18
    4c10:	b3 0b       	sbc	r27, r19
    4c12:	e4 0b       	sbc	r30, r20
    4c14:	f5 0b       	sbc	r31, r21

00004c16 <__udivmodsi4_ep>:
    4c16:	66 1f       	adc	r22, r22
    4c18:	77 1f       	adc	r23, r23
    4c1a:	88 1f       	adc	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	1a 94       	dec	r1
    4c20:	69 f7       	brne	.-38     	; 0x4bfc <__udivmodsi4_loop>
    4c22:	60 95       	com	r22
    4c24:	70 95       	com	r23
    4c26:	80 95       	com	r24
    4c28:	90 95       	com	r25
    4c2a:	9b 01       	movw	r18, r22
    4c2c:	ac 01       	movw	r20, r24
    4c2e:	bd 01       	movw	r22, r26
    4c30:	cf 01       	movw	r24, r30
    4c32:	08 95       	ret

00004c34 <__tablejump2__>:
    4c34:	ee 0f       	add	r30, r30
    4c36:	ff 1f       	adc	r31, r31
    4c38:	05 90       	lpm	r0, Z+
    4c3a:	f4 91       	lpm	r31, Z
    4c3c:	e0 2d       	mov	r30, r0
    4c3e:	09 94       	ijmp

00004c40 <__muluhisi3>:
    4c40:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__umulhisi3>
    4c44:	a5 9f       	mul	r26, r21
    4c46:	90 0d       	add	r25, r0
    4c48:	b4 9f       	mul	r27, r20
    4c4a:	90 0d       	add	r25, r0
    4c4c:	a4 9f       	mul	r26, r20
    4c4e:	80 0d       	add	r24, r0
    4c50:	91 1d       	adc	r25, r1
    4c52:	11 24       	eor	r1, r1
    4c54:	08 95       	ret

00004c56 <__umulhisi3>:
    4c56:	a2 9f       	mul	r26, r18
    4c58:	b0 01       	movw	r22, r0
    4c5a:	b3 9f       	mul	r27, r19
    4c5c:	c0 01       	movw	r24, r0
    4c5e:	a3 9f       	mul	r26, r19
    4c60:	70 0d       	add	r23, r0
    4c62:	81 1d       	adc	r24, r1
    4c64:	11 24       	eor	r1, r1
    4c66:	91 1d       	adc	r25, r1
    4c68:	b2 9f       	mul	r27, r18
    4c6a:	70 0d       	add	r23, r0
    4c6c:	81 1d       	adc	r24, r1
    4c6e:	11 24       	eor	r1, r1
    4c70:	91 1d       	adc	r25, r1
    4c72:	08 95       	ret

00004c74 <__divsf3>:
    4c74:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <__divsf3x>
    4c78:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__fp_round>
    4c7c:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__fp_pscB>
    4c80:	58 f0       	brcs	.+22     	; 0x4c98 <__divsf3+0x24>
    4c82:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__fp_pscA>
    4c86:	40 f0       	brcs	.+16     	; 0x4c98 <__divsf3+0x24>
    4c88:	29 f4       	brne	.+10     	; 0x4c94 <__divsf3+0x20>
    4c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4c8c:	29 f0       	breq	.+10     	; 0x4c98 <__divsf3+0x24>
    4c8e:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__fp_inf>
    4c92:	51 11       	cpse	r21, r1
    4c94:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <__fp_szero>
    4c98:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__fp_nan>

00004c9c <__divsf3x>:
    4c9c:	0e 94 40 27 	call	0x4e80	; 0x4e80 <__fp_split3>
    4ca0:	68 f3       	brcs	.-38     	; 0x4c7c <__divsf3+0x8>

00004ca2 <__divsf3_pse>:
    4ca2:	99 23       	and	r25, r25
    4ca4:	b1 f3       	breq	.-20     	; 0x4c92 <__divsf3+0x1e>
    4ca6:	55 23       	and	r21, r21
    4ca8:	91 f3       	breq	.-28     	; 0x4c8e <__divsf3+0x1a>
    4caa:	95 1b       	sub	r25, r21
    4cac:	55 0b       	sbc	r21, r21
    4cae:	bb 27       	eor	r27, r27
    4cb0:	aa 27       	eor	r26, r26
    4cb2:	62 17       	cp	r22, r18
    4cb4:	73 07       	cpc	r23, r19
    4cb6:	84 07       	cpc	r24, r20
    4cb8:	38 f0       	brcs	.+14     	; 0x4cc8 <__divsf3_pse+0x26>
    4cba:	9f 5f       	subi	r25, 0xFF	; 255
    4cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cbe:	22 0f       	add	r18, r18
    4cc0:	33 1f       	adc	r19, r19
    4cc2:	44 1f       	adc	r20, r20
    4cc4:	aa 1f       	adc	r26, r26
    4cc6:	a9 f3       	breq	.-22     	; 0x4cb2 <__divsf3_pse+0x10>
    4cc8:	35 d0       	rcall	.+106    	; 0x4d34 <__divsf3_pse+0x92>
    4cca:	0e 2e       	mov	r0, r30
    4ccc:	3a f0       	brmi	.+14     	; 0x4cdc <__divsf3_pse+0x3a>
    4cce:	e0 e8       	ldi	r30, 0x80	; 128
    4cd0:	32 d0       	rcall	.+100    	; 0x4d36 <__divsf3_pse+0x94>
    4cd2:	91 50       	subi	r25, 0x01	; 1
    4cd4:	50 40       	sbci	r21, 0x00	; 0
    4cd6:	e6 95       	lsr	r30
    4cd8:	00 1c       	adc	r0, r0
    4cda:	ca f7       	brpl	.-14     	; 0x4cce <__divsf3_pse+0x2c>
    4cdc:	2b d0       	rcall	.+86     	; 0x4d34 <__divsf3_pse+0x92>
    4cde:	fe 2f       	mov	r31, r30
    4ce0:	29 d0       	rcall	.+82     	; 0x4d34 <__divsf3_pse+0x92>
    4ce2:	66 0f       	add	r22, r22
    4ce4:	77 1f       	adc	r23, r23
    4ce6:	88 1f       	adc	r24, r24
    4ce8:	bb 1f       	adc	r27, r27
    4cea:	26 17       	cp	r18, r22
    4cec:	37 07       	cpc	r19, r23
    4cee:	48 07       	cpc	r20, r24
    4cf0:	ab 07       	cpc	r26, r27
    4cf2:	b0 e8       	ldi	r27, 0x80	; 128
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <__divsf3_pse+0x56>
    4cf6:	bb 0b       	sbc	r27, r27
    4cf8:	80 2d       	mov	r24, r0
    4cfa:	bf 01       	movw	r22, r30
    4cfc:	ff 27       	eor	r31, r31
    4cfe:	93 58       	subi	r25, 0x83	; 131
    4d00:	5f 4f       	sbci	r21, 0xFF	; 255
    4d02:	3a f0       	brmi	.+14     	; 0x4d12 <__divsf3_pse+0x70>
    4d04:	9e 3f       	cpi	r25, 0xFE	; 254
    4d06:	51 05       	cpc	r21, r1
    4d08:	78 f0       	brcs	.+30     	; 0x4d28 <__divsf3_pse+0x86>
    4d0a:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__fp_inf>
    4d0e:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <__fp_szero>
    4d12:	5f 3f       	cpi	r21, 0xFF	; 255
    4d14:	e4 f3       	brlt	.-8      	; 0x4d0e <__divsf3_pse+0x6c>
    4d16:	98 3e       	cpi	r25, 0xE8	; 232
    4d18:	d4 f3       	brlt	.-12     	; 0x4d0e <__divsf3_pse+0x6c>
    4d1a:	86 95       	lsr	r24
    4d1c:	77 95       	ror	r23
    4d1e:	67 95       	ror	r22
    4d20:	b7 95       	ror	r27
    4d22:	f7 95       	ror	r31
    4d24:	9f 5f       	subi	r25, 0xFF	; 255
    4d26:	c9 f7       	brne	.-14     	; 0x4d1a <__divsf3_pse+0x78>
    4d28:	88 0f       	add	r24, r24
    4d2a:	91 1d       	adc	r25, r1
    4d2c:	96 95       	lsr	r25
    4d2e:	87 95       	ror	r24
    4d30:	97 f9       	bld	r25, 7
    4d32:	08 95       	ret
    4d34:	e1 e0       	ldi	r30, 0x01	; 1
    4d36:	66 0f       	add	r22, r22
    4d38:	77 1f       	adc	r23, r23
    4d3a:	88 1f       	adc	r24, r24
    4d3c:	bb 1f       	adc	r27, r27
    4d3e:	62 17       	cp	r22, r18
    4d40:	73 07       	cpc	r23, r19
    4d42:	84 07       	cpc	r24, r20
    4d44:	ba 07       	cpc	r27, r26
    4d46:	20 f0       	brcs	.+8      	; 0x4d50 <__divsf3_pse+0xae>
    4d48:	62 1b       	sub	r22, r18
    4d4a:	73 0b       	sbc	r23, r19
    4d4c:	84 0b       	sbc	r24, r20
    4d4e:	ba 0b       	sbc	r27, r26
    4d50:	ee 1f       	adc	r30, r30
    4d52:	88 f7       	brcc	.-30     	; 0x4d36 <__divsf3_pse+0x94>
    4d54:	e0 95       	com	r30
    4d56:	08 95       	ret

00004d58 <__fixunssfsi>:
    4d58:	0e 94 48 27 	call	0x4e90	; 0x4e90 <__fp_splitA>
    4d5c:	88 f0       	brcs	.+34     	; 0x4d80 <__fixunssfsi+0x28>
    4d5e:	9f 57       	subi	r25, 0x7F	; 127
    4d60:	98 f0       	brcs	.+38     	; 0x4d88 <__fixunssfsi+0x30>
    4d62:	b9 2f       	mov	r27, r25
    4d64:	99 27       	eor	r25, r25
    4d66:	b7 51       	subi	r27, 0x17	; 23
    4d68:	b0 f0       	brcs	.+44     	; 0x4d96 <__fixunssfsi+0x3e>
    4d6a:	e1 f0       	breq	.+56     	; 0x4da4 <__fixunssfsi+0x4c>
    4d6c:	66 0f       	add	r22, r22
    4d6e:	77 1f       	adc	r23, r23
    4d70:	88 1f       	adc	r24, r24
    4d72:	99 1f       	adc	r25, r25
    4d74:	1a f0       	brmi	.+6      	; 0x4d7c <__fixunssfsi+0x24>
    4d76:	ba 95       	dec	r27
    4d78:	c9 f7       	brne	.-14     	; 0x4d6c <__fixunssfsi+0x14>
    4d7a:	14 c0       	rjmp	.+40     	; 0x4da4 <__fixunssfsi+0x4c>
    4d7c:	b1 30       	cpi	r27, 0x01	; 1
    4d7e:	91 f0       	breq	.+36     	; 0x4da4 <__fixunssfsi+0x4c>
    4d80:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <__fp_zero>
    4d84:	b1 e0       	ldi	r27, 0x01	; 1
    4d86:	08 95       	ret
    4d88:	0c 94 62 27 	jmp	0x4ec4	; 0x4ec4 <__fp_zero>
    4d8c:	67 2f       	mov	r22, r23
    4d8e:	78 2f       	mov	r23, r24
    4d90:	88 27       	eor	r24, r24
    4d92:	b8 5f       	subi	r27, 0xF8	; 248
    4d94:	39 f0       	breq	.+14     	; 0x4da4 <__fixunssfsi+0x4c>
    4d96:	b9 3f       	cpi	r27, 0xF9	; 249
    4d98:	cc f3       	brlt	.-14     	; 0x4d8c <__fixunssfsi+0x34>
    4d9a:	86 95       	lsr	r24
    4d9c:	77 95       	ror	r23
    4d9e:	67 95       	ror	r22
    4da0:	b3 95       	inc	r27
    4da2:	d9 f7       	brne	.-10     	; 0x4d9a <__fixunssfsi+0x42>
    4da4:	3e f4       	brtc	.+14     	; 0x4db4 <__fixunssfsi+0x5c>
    4da6:	90 95       	com	r25
    4da8:	80 95       	com	r24
    4daa:	70 95       	com	r23
    4dac:	61 95       	neg	r22
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	8f 4f       	sbci	r24, 0xFF	; 255
    4db2:	9f 4f       	sbci	r25, 0xFF	; 255
    4db4:	08 95       	ret

00004db6 <__floatunsisf>:
    4db6:	e8 94       	clt
    4db8:	09 c0       	rjmp	.+18     	; 0x4dcc <__floatsisf+0x12>

00004dba <__floatsisf>:
    4dba:	97 fb       	bst	r25, 7
    4dbc:	3e f4       	brtc	.+14     	; 0x4dcc <__floatsisf+0x12>
    4dbe:	90 95       	com	r25
    4dc0:	80 95       	com	r24
    4dc2:	70 95       	com	r23
    4dc4:	61 95       	neg	r22
    4dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dca:	9f 4f       	sbci	r25, 0xFF	; 255
    4dcc:	99 23       	and	r25, r25
    4dce:	a9 f0       	breq	.+42     	; 0x4dfa <__floatsisf+0x40>
    4dd0:	f9 2f       	mov	r31, r25
    4dd2:	96 e9       	ldi	r25, 0x96	; 150
    4dd4:	bb 27       	eor	r27, r27
    4dd6:	93 95       	inc	r25
    4dd8:	f6 95       	lsr	r31
    4dda:	87 95       	ror	r24
    4ddc:	77 95       	ror	r23
    4dde:	67 95       	ror	r22
    4de0:	b7 95       	ror	r27
    4de2:	f1 11       	cpse	r31, r1
    4de4:	f8 cf       	rjmp	.-16     	; 0x4dd6 <__floatsisf+0x1c>
    4de6:	fa f4       	brpl	.+62     	; 0x4e26 <__floatsisf+0x6c>
    4de8:	bb 0f       	add	r27, r27
    4dea:	11 f4       	brne	.+4      	; 0x4df0 <__floatsisf+0x36>
    4dec:	60 ff       	sbrs	r22, 0
    4dee:	1b c0       	rjmp	.+54     	; 0x4e26 <__floatsisf+0x6c>
    4df0:	6f 5f       	subi	r22, 0xFF	; 255
    4df2:	7f 4f       	sbci	r23, 0xFF	; 255
    4df4:	8f 4f       	sbci	r24, 0xFF	; 255
    4df6:	9f 4f       	sbci	r25, 0xFF	; 255
    4df8:	16 c0       	rjmp	.+44     	; 0x4e26 <__floatsisf+0x6c>
    4dfa:	88 23       	and	r24, r24
    4dfc:	11 f0       	breq	.+4      	; 0x4e02 <__floatsisf+0x48>
    4dfe:	96 e9       	ldi	r25, 0x96	; 150
    4e00:	11 c0       	rjmp	.+34     	; 0x4e24 <__floatsisf+0x6a>
    4e02:	77 23       	and	r23, r23
    4e04:	21 f0       	breq	.+8      	; 0x4e0e <__floatsisf+0x54>
    4e06:	9e e8       	ldi	r25, 0x8E	; 142
    4e08:	87 2f       	mov	r24, r23
    4e0a:	76 2f       	mov	r23, r22
    4e0c:	05 c0       	rjmp	.+10     	; 0x4e18 <__floatsisf+0x5e>
    4e0e:	66 23       	and	r22, r22
    4e10:	71 f0       	breq	.+28     	; 0x4e2e <__floatsisf+0x74>
    4e12:	96 e8       	ldi	r25, 0x86	; 134
    4e14:	86 2f       	mov	r24, r22
    4e16:	70 e0       	ldi	r23, 0x00	; 0
    4e18:	60 e0       	ldi	r22, 0x00	; 0
    4e1a:	2a f0       	brmi	.+10     	; 0x4e26 <__floatsisf+0x6c>
    4e1c:	9a 95       	dec	r25
    4e1e:	66 0f       	add	r22, r22
    4e20:	77 1f       	adc	r23, r23
    4e22:	88 1f       	adc	r24, r24
    4e24:	da f7       	brpl	.-10     	; 0x4e1c <__floatsisf+0x62>
    4e26:	88 0f       	add	r24, r24
    4e28:	96 95       	lsr	r25
    4e2a:	87 95       	ror	r24
    4e2c:	97 f9       	bld	r25, 7
    4e2e:	08 95       	ret

00004e30 <__fp_inf>:
    4e30:	97 f9       	bld	r25, 7
    4e32:	9f 67       	ori	r25, 0x7F	; 127
    4e34:	80 e8       	ldi	r24, 0x80	; 128
    4e36:	70 e0       	ldi	r23, 0x00	; 0
    4e38:	60 e0       	ldi	r22, 0x00	; 0
    4e3a:	08 95       	ret

00004e3c <__fp_nan>:
    4e3c:	9f ef       	ldi	r25, 0xFF	; 255
    4e3e:	80 ec       	ldi	r24, 0xC0	; 192
    4e40:	08 95       	ret

00004e42 <__fp_pscA>:
    4e42:	00 24       	eor	r0, r0
    4e44:	0a 94       	dec	r0
    4e46:	16 16       	cp	r1, r22
    4e48:	17 06       	cpc	r1, r23
    4e4a:	18 06       	cpc	r1, r24
    4e4c:	09 06       	cpc	r0, r25
    4e4e:	08 95       	ret

00004e50 <__fp_pscB>:
    4e50:	00 24       	eor	r0, r0
    4e52:	0a 94       	dec	r0
    4e54:	12 16       	cp	r1, r18
    4e56:	13 06       	cpc	r1, r19
    4e58:	14 06       	cpc	r1, r20
    4e5a:	05 06       	cpc	r0, r21
    4e5c:	08 95       	ret

00004e5e <__fp_round>:
    4e5e:	09 2e       	mov	r0, r25
    4e60:	03 94       	inc	r0
    4e62:	00 0c       	add	r0, r0
    4e64:	11 f4       	brne	.+4      	; 0x4e6a <__fp_round+0xc>
    4e66:	88 23       	and	r24, r24
    4e68:	52 f0       	brmi	.+20     	; 0x4e7e <__fp_round+0x20>
    4e6a:	bb 0f       	add	r27, r27
    4e6c:	40 f4       	brcc	.+16     	; 0x4e7e <__fp_round+0x20>
    4e6e:	bf 2b       	or	r27, r31
    4e70:	11 f4       	brne	.+4      	; 0x4e76 <__fp_round+0x18>
    4e72:	60 ff       	sbrs	r22, 0
    4e74:	04 c0       	rjmp	.+8      	; 0x4e7e <__fp_round+0x20>
    4e76:	6f 5f       	subi	r22, 0xFF	; 255
    4e78:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7e:	08 95       	ret

00004e80 <__fp_split3>:
    4e80:	57 fd       	sbrc	r21, 7
    4e82:	90 58       	subi	r25, 0x80	; 128
    4e84:	44 0f       	add	r20, r20
    4e86:	55 1f       	adc	r21, r21
    4e88:	59 f0       	breq	.+22     	; 0x4ea0 <__fp_splitA+0x10>
    4e8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4e8c:	71 f0       	breq	.+28     	; 0x4eaa <__fp_splitA+0x1a>
    4e8e:	47 95       	ror	r20

00004e90 <__fp_splitA>:
    4e90:	88 0f       	add	r24, r24
    4e92:	97 fb       	bst	r25, 7
    4e94:	99 1f       	adc	r25, r25
    4e96:	61 f0       	breq	.+24     	; 0x4eb0 <__fp_splitA+0x20>
    4e98:	9f 3f       	cpi	r25, 0xFF	; 255
    4e9a:	79 f0       	breq	.+30     	; 0x4eba <__fp_splitA+0x2a>
    4e9c:	87 95       	ror	r24
    4e9e:	08 95       	ret
    4ea0:	12 16       	cp	r1, r18
    4ea2:	13 06       	cpc	r1, r19
    4ea4:	14 06       	cpc	r1, r20
    4ea6:	55 1f       	adc	r21, r21
    4ea8:	f2 cf       	rjmp	.-28     	; 0x4e8e <__fp_split3+0xe>
    4eaa:	46 95       	lsr	r20
    4eac:	f1 df       	rcall	.-30     	; 0x4e90 <__fp_splitA>
    4eae:	08 c0       	rjmp	.+16     	; 0x4ec0 <__fp_splitA+0x30>
    4eb0:	16 16       	cp	r1, r22
    4eb2:	17 06       	cpc	r1, r23
    4eb4:	18 06       	cpc	r1, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	f1 cf       	rjmp	.-30     	; 0x4e9c <__fp_splitA+0xc>
    4eba:	86 95       	lsr	r24
    4ebc:	71 05       	cpc	r23, r1
    4ebe:	61 05       	cpc	r22, r1
    4ec0:	08 94       	sec
    4ec2:	08 95       	ret

00004ec4 <__fp_zero>:
    4ec4:	e8 94       	clt

00004ec6 <__fp_szero>:
    4ec6:	bb 27       	eor	r27, r27
    4ec8:	66 27       	eor	r22, r22
    4eca:	77 27       	eor	r23, r23
    4ecc:	cb 01       	movw	r24, r22
    4ece:	97 f9       	bld	r25, 7
    4ed0:	08 95       	ret

00004ed2 <memset>:
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	01 c0       	rjmp	.+2      	; 0x4ed8 <memset+0x6>
    4ed6:	6d 93       	st	X+, r22
    4ed8:	41 50       	subi	r20, 0x01	; 1
    4eda:	50 40       	sbci	r21, 0x00	; 0
    4edc:	e0 f7       	brcc	.-8      	; 0x4ed6 <memset+0x4>
    4ede:	08 95       	ret

00004ee0 <strcpy>:
    4ee0:	fb 01       	movw	r30, r22
    4ee2:	dc 01       	movw	r26, r24
    4ee4:	01 90       	ld	r0, Z+
    4ee6:	0d 92       	st	X+, r0
    4ee8:	00 20       	and	r0, r0
    4eea:	e1 f7       	brne	.-8      	; 0x4ee4 <strcpy+0x4>
    4eec:	08 95       	ret

00004eee <strstr>:
    4eee:	fb 01       	movw	r30, r22
    4ef0:	51 91       	ld	r21, Z+
    4ef2:	55 23       	and	r21, r21
    4ef4:	a9 f0       	breq	.+42     	; 0x4f20 <strstr+0x32>
    4ef6:	bf 01       	movw	r22, r30
    4ef8:	dc 01       	movw	r26, r24
    4efa:	4d 91       	ld	r20, X+
    4efc:	45 17       	cp	r20, r21
    4efe:	41 11       	cpse	r20, r1
    4f00:	e1 f7       	brne	.-8      	; 0x4efa <strstr+0xc>
    4f02:	59 f4       	brne	.+22     	; 0x4f1a <strstr+0x2c>
    4f04:	cd 01       	movw	r24, r26
    4f06:	01 90       	ld	r0, Z+
    4f08:	00 20       	and	r0, r0
    4f0a:	49 f0       	breq	.+18     	; 0x4f1e <strstr+0x30>
    4f0c:	4d 91       	ld	r20, X+
    4f0e:	40 15       	cp	r20, r0
    4f10:	41 11       	cpse	r20, r1
    4f12:	c9 f3       	breq	.-14     	; 0x4f06 <strstr+0x18>
    4f14:	fb 01       	movw	r30, r22
    4f16:	41 11       	cpse	r20, r1
    4f18:	ef cf       	rjmp	.-34     	; 0x4ef8 <strstr+0xa>
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	01 97       	sbiw	r24, 0x01	; 1
    4f20:	08 95       	ret

00004f22 <sprintf>:
    4f22:	ae e0       	ldi	r26, 0x0E	; 14
    4f24:	b0 e0       	ldi	r27, 0x00	; 0
    4f26:	e7 e9       	ldi	r30, 0x97	; 151
    4f28:	f7 e2       	ldi	r31, 0x27	; 39
    4f2a:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <__prologue_saves__+0x1c>
    4f2e:	0d 89       	ldd	r16, Y+21	; 0x15
    4f30:	1e 89       	ldd	r17, Y+22	; 0x16
    4f32:	86 e0       	ldi	r24, 0x06	; 6
    4f34:	8c 83       	std	Y+4, r24	; 0x04
    4f36:	1a 83       	std	Y+2, r17	; 0x02
    4f38:	09 83       	std	Y+1, r16	; 0x01
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	9f e7       	ldi	r25, 0x7F	; 127
    4f3e:	9e 83       	std	Y+6, r25	; 0x06
    4f40:	8d 83       	std	Y+5, r24	; 0x05
    4f42:	ae 01       	movw	r20, r28
    4f44:	47 5e       	subi	r20, 0xE7	; 231
    4f46:	5f 4f       	sbci	r21, 0xFF	; 255
    4f48:	6f 89       	ldd	r22, Y+23	; 0x17
    4f4a:	78 8d       	ldd	r23, Y+24	; 0x18
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	01 96       	adiw	r24, 0x01	; 1
    4f50:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <vfprintf>
    4f54:	2f 81       	ldd	r18, Y+7	; 0x07
    4f56:	38 85       	ldd	r19, Y+8	; 0x08
    4f58:	f8 01       	movw	r30, r16
    4f5a:	e2 0f       	add	r30, r18
    4f5c:	f3 1f       	adc	r31, r19
    4f5e:	10 82       	st	Z, r1
    4f60:	2e 96       	adiw	r28, 0x0e	; 14
    4f62:	e4 e0       	ldi	r30, 0x04	; 4
    4f64:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <__epilogue_restores__+0x1c>

00004f68 <vfprintf>:
    4f68:	ac e0       	ldi	r26, 0x0C	; 12
    4f6a:	b0 e0       	ldi	r27, 0x00	; 0
    4f6c:	ea eb       	ldi	r30, 0xBA	; 186
    4f6e:	f7 e2       	ldi	r31, 0x27	; 39
    4f70:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <__prologue_saves__>
    4f74:	7c 01       	movw	r14, r24
    4f76:	6b 01       	movw	r12, r22
    4f78:	8a 01       	movw	r16, r20
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	17 82       	std	Z+7, r1	; 0x07
    4f7e:	16 82       	std	Z+6, r1	; 0x06
    4f80:	83 81       	ldd	r24, Z+3	; 0x03
    4f82:	81 ff       	sbrs	r24, 1
    4f84:	bd c1       	rjmp	.+890    	; 0x5300 <vfprintf+0x398>
    4f86:	ce 01       	movw	r24, r28
    4f88:	01 96       	adiw	r24, 0x01	; 1
    4f8a:	4c 01       	movw	r8, r24
    4f8c:	f7 01       	movw	r30, r14
    4f8e:	93 81       	ldd	r25, Z+3	; 0x03
    4f90:	f6 01       	movw	r30, r12
    4f92:	93 fd       	sbrc	r25, 3
    4f94:	85 91       	lpm	r24, Z+
    4f96:	93 ff       	sbrs	r25, 3
    4f98:	81 91       	ld	r24, Z+
    4f9a:	6f 01       	movw	r12, r30
    4f9c:	88 23       	and	r24, r24
    4f9e:	09 f4       	brne	.+2      	; 0x4fa2 <vfprintf+0x3a>
    4fa0:	ab c1       	rjmp	.+854    	; 0x52f8 <vfprintf+0x390>
    4fa2:	85 32       	cpi	r24, 0x25	; 37
    4fa4:	39 f4       	brne	.+14     	; 0x4fb4 <vfprintf+0x4c>
    4fa6:	93 fd       	sbrc	r25, 3
    4fa8:	85 91       	lpm	r24, Z+
    4faa:	93 ff       	sbrs	r25, 3
    4fac:	81 91       	ld	r24, Z+
    4fae:	6f 01       	movw	r12, r30
    4fb0:	85 32       	cpi	r24, 0x25	; 37
    4fb2:	29 f4       	brne	.+10     	; 0x4fbe <vfprintf+0x56>
    4fb4:	b7 01       	movw	r22, r14
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    4fbc:	e7 cf       	rjmp	.-50     	; 0x4f8c <vfprintf+0x24>
    4fbe:	51 2c       	mov	r5, r1
    4fc0:	31 2c       	mov	r3, r1
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	20 32       	cpi	r18, 0x20	; 32
    4fc6:	a0 f4       	brcc	.+40     	; 0x4ff0 <vfprintf+0x88>
    4fc8:	8b 32       	cpi	r24, 0x2B	; 43
    4fca:	69 f0       	breq	.+26     	; 0x4fe6 <vfprintf+0x7e>
    4fcc:	30 f4       	brcc	.+12     	; 0x4fda <vfprintf+0x72>
    4fce:	80 32       	cpi	r24, 0x20	; 32
    4fd0:	59 f0       	breq	.+22     	; 0x4fe8 <vfprintf+0x80>
    4fd2:	83 32       	cpi	r24, 0x23	; 35
    4fd4:	69 f4       	brne	.+26     	; 0x4ff0 <vfprintf+0x88>
    4fd6:	20 61       	ori	r18, 0x10	; 16
    4fd8:	2c c0       	rjmp	.+88     	; 0x5032 <vfprintf+0xca>
    4fda:	8d 32       	cpi	r24, 0x2D	; 45
    4fdc:	39 f0       	breq	.+14     	; 0x4fec <vfprintf+0x84>
    4fde:	80 33       	cpi	r24, 0x30	; 48
    4fe0:	39 f4       	brne	.+14     	; 0x4ff0 <vfprintf+0x88>
    4fe2:	21 60       	ori	r18, 0x01	; 1
    4fe4:	26 c0       	rjmp	.+76     	; 0x5032 <vfprintf+0xca>
    4fe6:	22 60       	ori	r18, 0x02	; 2
    4fe8:	24 60       	ori	r18, 0x04	; 4
    4fea:	23 c0       	rjmp	.+70     	; 0x5032 <vfprintf+0xca>
    4fec:	28 60       	ori	r18, 0x08	; 8
    4fee:	21 c0       	rjmp	.+66     	; 0x5032 <vfprintf+0xca>
    4ff0:	27 fd       	sbrc	r18, 7
    4ff2:	27 c0       	rjmp	.+78     	; 0x5042 <vfprintf+0xda>
    4ff4:	30 ed       	ldi	r19, 0xD0	; 208
    4ff6:	38 0f       	add	r19, r24
    4ff8:	3a 30       	cpi	r19, 0x0A	; 10
    4ffa:	78 f4       	brcc	.+30     	; 0x501a <vfprintf+0xb2>
    4ffc:	26 ff       	sbrs	r18, 6
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <vfprintf+0xa4>
    5000:	fa e0       	ldi	r31, 0x0A	; 10
    5002:	5f 9e       	mul	r5, r31
    5004:	30 0d       	add	r19, r0
    5006:	11 24       	eor	r1, r1
    5008:	53 2e       	mov	r5, r19
    500a:	13 c0       	rjmp	.+38     	; 0x5032 <vfprintf+0xca>
    500c:	8a e0       	ldi	r24, 0x0A	; 10
    500e:	38 9e       	mul	r3, r24
    5010:	30 0d       	add	r19, r0
    5012:	11 24       	eor	r1, r1
    5014:	33 2e       	mov	r3, r19
    5016:	20 62       	ori	r18, 0x20	; 32
    5018:	0c c0       	rjmp	.+24     	; 0x5032 <vfprintf+0xca>
    501a:	8e 32       	cpi	r24, 0x2E	; 46
    501c:	21 f4       	brne	.+8      	; 0x5026 <vfprintf+0xbe>
    501e:	26 fd       	sbrc	r18, 6
    5020:	6b c1       	rjmp	.+726    	; 0x52f8 <vfprintf+0x390>
    5022:	20 64       	ori	r18, 0x40	; 64
    5024:	06 c0       	rjmp	.+12     	; 0x5032 <vfprintf+0xca>
    5026:	8c 36       	cpi	r24, 0x6C	; 108
    5028:	11 f4       	brne	.+4      	; 0x502e <vfprintf+0xc6>
    502a:	20 68       	ori	r18, 0x80	; 128
    502c:	02 c0       	rjmp	.+4      	; 0x5032 <vfprintf+0xca>
    502e:	88 36       	cpi	r24, 0x68	; 104
    5030:	41 f4       	brne	.+16     	; 0x5042 <vfprintf+0xda>
    5032:	f6 01       	movw	r30, r12
    5034:	93 fd       	sbrc	r25, 3
    5036:	85 91       	lpm	r24, Z+
    5038:	93 ff       	sbrs	r25, 3
    503a:	81 91       	ld	r24, Z+
    503c:	6f 01       	movw	r12, r30
    503e:	81 11       	cpse	r24, r1
    5040:	c1 cf       	rjmp	.-126    	; 0x4fc4 <vfprintf+0x5c>
    5042:	98 2f       	mov	r25, r24
    5044:	9f 7d       	andi	r25, 0xDF	; 223
    5046:	95 54       	subi	r25, 0x45	; 69
    5048:	93 30       	cpi	r25, 0x03	; 3
    504a:	28 f4       	brcc	.+10     	; 0x5056 <vfprintf+0xee>
    504c:	0c 5f       	subi	r16, 0xFC	; 252
    504e:	1f 4f       	sbci	r17, 0xFF	; 255
    5050:	ff e3       	ldi	r31, 0x3F	; 63
    5052:	f9 83       	std	Y+1, r31	; 0x01
    5054:	0d c0       	rjmp	.+26     	; 0x5070 <vfprintf+0x108>
    5056:	83 36       	cpi	r24, 0x63	; 99
    5058:	31 f0       	breq	.+12     	; 0x5066 <vfprintf+0xfe>
    505a:	83 37       	cpi	r24, 0x73	; 115
    505c:	71 f0       	breq	.+28     	; 0x507a <vfprintf+0x112>
    505e:	83 35       	cpi	r24, 0x53	; 83
    5060:	09 f0       	breq	.+2      	; 0x5064 <vfprintf+0xfc>
    5062:	5b c0       	rjmp	.+182    	; 0x511a <vfprintf+0x1b2>
    5064:	22 c0       	rjmp	.+68     	; 0x50aa <vfprintf+0x142>
    5066:	f8 01       	movw	r30, r16
    5068:	80 81       	ld	r24, Z
    506a:	89 83       	std	Y+1, r24	; 0x01
    506c:	0e 5f       	subi	r16, 0xFE	; 254
    506e:	1f 4f       	sbci	r17, 0xFF	; 255
    5070:	44 24       	eor	r4, r4
    5072:	43 94       	inc	r4
    5074:	51 2c       	mov	r5, r1
    5076:	54 01       	movw	r10, r8
    5078:	15 c0       	rjmp	.+42     	; 0x50a4 <vfprintf+0x13c>
    507a:	38 01       	movw	r6, r16
    507c:	f2 e0       	ldi	r31, 0x02	; 2
    507e:	6f 0e       	add	r6, r31
    5080:	71 1c       	adc	r7, r1
    5082:	f8 01       	movw	r30, r16
    5084:	a0 80       	ld	r10, Z
    5086:	b1 80       	ldd	r11, Z+1	; 0x01
    5088:	26 ff       	sbrs	r18, 6
    508a:	03 c0       	rjmp	.+6      	; 0x5092 <vfprintf+0x12a>
    508c:	65 2d       	mov	r22, r5
    508e:	70 e0       	ldi	r23, 0x00	; 0
    5090:	02 c0       	rjmp	.+4      	; 0x5096 <vfprintf+0x12e>
    5092:	6f ef       	ldi	r22, 0xFF	; 255
    5094:	7f ef       	ldi	r23, 0xFF	; 255
    5096:	c5 01       	movw	r24, r10
    5098:	2c 87       	std	Y+12, r18	; 0x0c
    509a:	0e 94 91 29 	call	0x5322	; 0x5322 <strnlen>
    509e:	2c 01       	movw	r4, r24
    50a0:	83 01       	movw	r16, r6
    50a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    50a4:	2f 77       	andi	r18, 0x7F	; 127
    50a6:	22 2e       	mov	r2, r18
    50a8:	17 c0       	rjmp	.+46     	; 0x50d8 <vfprintf+0x170>
    50aa:	38 01       	movw	r6, r16
    50ac:	f2 e0       	ldi	r31, 0x02	; 2
    50ae:	6f 0e       	add	r6, r31
    50b0:	71 1c       	adc	r7, r1
    50b2:	f8 01       	movw	r30, r16
    50b4:	a0 80       	ld	r10, Z
    50b6:	b1 80       	ldd	r11, Z+1	; 0x01
    50b8:	26 ff       	sbrs	r18, 6
    50ba:	03 c0       	rjmp	.+6      	; 0x50c2 <vfprintf+0x15a>
    50bc:	65 2d       	mov	r22, r5
    50be:	70 e0       	ldi	r23, 0x00	; 0
    50c0:	02 c0       	rjmp	.+4      	; 0x50c6 <vfprintf+0x15e>
    50c2:	6f ef       	ldi	r22, 0xFF	; 255
    50c4:	7f ef       	ldi	r23, 0xFF	; 255
    50c6:	c5 01       	movw	r24, r10
    50c8:	2c 87       	std	Y+12, r18	; 0x0c
    50ca:	0e 94 86 29 	call	0x530c	; 0x530c <strnlen_P>
    50ce:	2c 01       	movw	r4, r24
    50d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    50d2:	20 68       	ori	r18, 0x80	; 128
    50d4:	22 2e       	mov	r2, r18
    50d6:	83 01       	movw	r16, r6
    50d8:	23 fc       	sbrc	r2, 3
    50da:	1b c0       	rjmp	.+54     	; 0x5112 <vfprintf+0x1aa>
    50dc:	83 2d       	mov	r24, r3
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	48 16       	cp	r4, r24
    50e2:	59 06       	cpc	r5, r25
    50e4:	b0 f4       	brcc	.+44     	; 0x5112 <vfprintf+0x1aa>
    50e6:	b7 01       	movw	r22, r14
    50e8:	80 e2       	ldi	r24, 0x20	; 32
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    50f0:	3a 94       	dec	r3
    50f2:	f4 cf       	rjmp	.-24     	; 0x50dc <vfprintf+0x174>
    50f4:	f5 01       	movw	r30, r10
    50f6:	27 fc       	sbrc	r2, 7
    50f8:	85 91       	lpm	r24, Z+
    50fa:	27 fe       	sbrs	r2, 7
    50fc:	81 91       	ld	r24, Z+
    50fe:	5f 01       	movw	r10, r30
    5100:	b7 01       	movw	r22, r14
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    5108:	31 10       	cpse	r3, r1
    510a:	3a 94       	dec	r3
    510c:	f1 e0       	ldi	r31, 0x01	; 1
    510e:	4f 1a       	sub	r4, r31
    5110:	51 08       	sbc	r5, r1
    5112:	41 14       	cp	r4, r1
    5114:	51 04       	cpc	r5, r1
    5116:	71 f7       	brne	.-36     	; 0x50f4 <vfprintf+0x18c>
    5118:	e5 c0       	rjmp	.+458    	; 0x52e4 <vfprintf+0x37c>
    511a:	84 36       	cpi	r24, 0x64	; 100
    511c:	11 f0       	breq	.+4      	; 0x5122 <vfprintf+0x1ba>
    511e:	89 36       	cpi	r24, 0x69	; 105
    5120:	39 f5       	brne	.+78     	; 0x5170 <vfprintf+0x208>
    5122:	f8 01       	movw	r30, r16
    5124:	27 ff       	sbrs	r18, 7
    5126:	07 c0       	rjmp	.+14     	; 0x5136 <vfprintf+0x1ce>
    5128:	60 81       	ld	r22, Z
    512a:	71 81       	ldd	r23, Z+1	; 0x01
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	0c 5f       	subi	r16, 0xFC	; 252
    5132:	1f 4f       	sbci	r17, 0xFF	; 255
    5134:	08 c0       	rjmp	.+16     	; 0x5146 <vfprintf+0x1de>
    5136:	60 81       	ld	r22, Z
    5138:	71 81       	ldd	r23, Z+1	; 0x01
    513a:	07 2e       	mov	r0, r23
    513c:	00 0c       	add	r0, r0
    513e:	88 0b       	sbc	r24, r24
    5140:	99 0b       	sbc	r25, r25
    5142:	0e 5f       	subi	r16, 0xFE	; 254
    5144:	1f 4f       	sbci	r17, 0xFF	; 255
    5146:	2f 76       	andi	r18, 0x6F	; 111
    5148:	72 2e       	mov	r7, r18
    514a:	97 ff       	sbrs	r25, 7
    514c:	09 c0       	rjmp	.+18     	; 0x5160 <vfprintf+0x1f8>
    514e:	90 95       	com	r25
    5150:	80 95       	com	r24
    5152:	70 95       	com	r23
    5154:	61 95       	neg	r22
    5156:	7f 4f       	sbci	r23, 0xFF	; 255
    5158:	8f 4f       	sbci	r24, 0xFF	; 255
    515a:	9f 4f       	sbci	r25, 0xFF	; 255
    515c:	20 68       	ori	r18, 0x80	; 128
    515e:	72 2e       	mov	r7, r18
    5160:	2a e0       	ldi	r18, 0x0A	; 10
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	a4 01       	movw	r20, r8
    5166:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <__ultoa_invert>
    516a:	a8 2e       	mov	r10, r24
    516c:	a8 18       	sub	r10, r8
    516e:	44 c0       	rjmp	.+136    	; 0x51f8 <vfprintf+0x290>
    5170:	85 37       	cpi	r24, 0x75	; 117
    5172:	29 f4       	brne	.+10     	; 0x517e <vfprintf+0x216>
    5174:	2f 7e       	andi	r18, 0xEF	; 239
    5176:	b2 2e       	mov	r11, r18
    5178:	2a e0       	ldi	r18, 0x0A	; 10
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	25 c0       	rjmp	.+74     	; 0x51c8 <vfprintf+0x260>
    517e:	f2 2f       	mov	r31, r18
    5180:	f9 7f       	andi	r31, 0xF9	; 249
    5182:	bf 2e       	mov	r11, r31
    5184:	8f 36       	cpi	r24, 0x6F	; 111
    5186:	c1 f0       	breq	.+48     	; 0x51b8 <vfprintf+0x250>
    5188:	18 f4       	brcc	.+6      	; 0x5190 <vfprintf+0x228>
    518a:	88 35       	cpi	r24, 0x58	; 88
    518c:	79 f0       	breq	.+30     	; 0x51ac <vfprintf+0x244>
    518e:	b4 c0       	rjmp	.+360    	; 0x52f8 <vfprintf+0x390>
    5190:	80 37       	cpi	r24, 0x70	; 112
    5192:	19 f0       	breq	.+6      	; 0x519a <vfprintf+0x232>
    5194:	88 37       	cpi	r24, 0x78	; 120
    5196:	21 f0       	breq	.+8      	; 0x51a0 <vfprintf+0x238>
    5198:	af c0       	rjmp	.+350    	; 0x52f8 <vfprintf+0x390>
    519a:	2f 2f       	mov	r18, r31
    519c:	20 61       	ori	r18, 0x10	; 16
    519e:	b2 2e       	mov	r11, r18
    51a0:	b4 fe       	sbrs	r11, 4
    51a2:	0d c0       	rjmp	.+26     	; 0x51be <vfprintf+0x256>
    51a4:	8b 2d       	mov	r24, r11
    51a6:	84 60       	ori	r24, 0x04	; 4
    51a8:	b8 2e       	mov	r11, r24
    51aa:	09 c0       	rjmp	.+18     	; 0x51be <vfprintf+0x256>
    51ac:	24 ff       	sbrs	r18, 4
    51ae:	0a c0       	rjmp	.+20     	; 0x51c4 <vfprintf+0x25c>
    51b0:	9f 2f       	mov	r25, r31
    51b2:	96 60       	ori	r25, 0x06	; 6
    51b4:	b9 2e       	mov	r11, r25
    51b6:	06 c0       	rjmp	.+12     	; 0x51c4 <vfprintf+0x25c>
    51b8:	28 e0       	ldi	r18, 0x08	; 8
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	05 c0       	rjmp	.+10     	; 0x51c8 <vfprintf+0x260>
    51be:	20 e1       	ldi	r18, 0x10	; 16
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <vfprintf+0x260>
    51c4:	20 e1       	ldi	r18, 0x10	; 16
    51c6:	32 e0       	ldi	r19, 0x02	; 2
    51c8:	f8 01       	movw	r30, r16
    51ca:	b7 fe       	sbrs	r11, 7
    51cc:	07 c0       	rjmp	.+14     	; 0x51dc <vfprintf+0x274>
    51ce:	60 81       	ld	r22, Z
    51d0:	71 81       	ldd	r23, Z+1	; 0x01
    51d2:	82 81       	ldd	r24, Z+2	; 0x02
    51d4:	93 81       	ldd	r25, Z+3	; 0x03
    51d6:	0c 5f       	subi	r16, 0xFC	; 252
    51d8:	1f 4f       	sbci	r17, 0xFF	; 255
    51da:	06 c0       	rjmp	.+12     	; 0x51e8 <vfprintf+0x280>
    51dc:	60 81       	ld	r22, Z
    51de:	71 81       	ldd	r23, Z+1	; 0x01
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	0e 5f       	subi	r16, 0xFE	; 254
    51e6:	1f 4f       	sbci	r17, 0xFF	; 255
    51e8:	a4 01       	movw	r20, r8
    51ea:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <__ultoa_invert>
    51ee:	a8 2e       	mov	r10, r24
    51f0:	a8 18       	sub	r10, r8
    51f2:	fb 2d       	mov	r31, r11
    51f4:	ff 77       	andi	r31, 0x7F	; 127
    51f6:	7f 2e       	mov	r7, r31
    51f8:	76 fe       	sbrs	r7, 6
    51fa:	0b c0       	rjmp	.+22     	; 0x5212 <vfprintf+0x2aa>
    51fc:	37 2d       	mov	r19, r7
    51fe:	3e 7f       	andi	r19, 0xFE	; 254
    5200:	a5 14       	cp	r10, r5
    5202:	50 f4       	brcc	.+20     	; 0x5218 <vfprintf+0x2b0>
    5204:	74 fe       	sbrs	r7, 4
    5206:	0a c0       	rjmp	.+20     	; 0x521c <vfprintf+0x2b4>
    5208:	72 fc       	sbrc	r7, 2
    520a:	08 c0       	rjmp	.+16     	; 0x521c <vfprintf+0x2b4>
    520c:	37 2d       	mov	r19, r7
    520e:	3e 7e       	andi	r19, 0xEE	; 238
    5210:	05 c0       	rjmp	.+10     	; 0x521c <vfprintf+0x2b4>
    5212:	ba 2c       	mov	r11, r10
    5214:	37 2d       	mov	r19, r7
    5216:	03 c0       	rjmp	.+6      	; 0x521e <vfprintf+0x2b6>
    5218:	ba 2c       	mov	r11, r10
    521a:	01 c0       	rjmp	.+2      	; 0x521e <vfprintf+0x2b6>
    521c:	b5 2c       	mov	r11, r5
    521e:	34 ff       	sbrs	r19, 4
    5220:	0d c0       	rjmp	.+26     	; 0x523c <vfprintf+0x2d4>
    5222:	fe 01       	movw	r30, r28
    5224:	ea 0d       	add	r30, r10
    5226:	f1 1d       	adc	r31, r1
    5228:	80 81       	ld	r24, Z
    522a:	80 33       	cpi	r24, 0x30	; 48
    522c:	11 f4       	brne	.+4      	; 0x5232 <vfprintf+0x2ca>
    522e:	39 7e       	andi	r19, 0xE9	; 233
    5230:	09 c0       	rjmp	.+18     	; 0x5244 <vfprintf+0x2dc>
    5232:	32 ff       	sbrs	r19, 2
    5234:	06 c0       	rjmp	.+12     	; 0x5242 <vfprintf+0x2da>
    5236:	b3 94       	inc	r11
    5238:	b3 94       	inc	r11
    523a:	04 c0       	rjmp	.+8      	; 0x5244 <vfprintf+0x2dc>
    523c:	83 2f       	mov	r24, r19
    523e:	86 78       	andi	r24, 0x86	; 134
    5240:	09 f0       	breq	.+2      	; 0x5244 <vfprintf+0x2dc>
    5242:	b3 94       	inc	r11
    5244:	33 fd       	sbrc	r19, 3
    5246:	13 c0       	rjmp	.+38     	; 0x526e <vfprintf+0x306>
    5248:	30 ff       	sbrs	r19, 0
    524a:	06 c0       	rjmp	.+12     	; 0x5258 <vfprintf+0x2f0>
    524c:	5a 2c       	mov	r5, r10
    524e:	b3 14       	cp	r11, r3
    5250:	18 f4       	brcc	.+6      	; 0x5258 <vfprintf+0x2f0>
    5252:	53 0c       	add	r5, r3
    5254:	5b 18       	sub	r5, r11
    5256:	b3 2c       	mov	r11, r3
    5258:	b3 14       	cp	r11, r3
    525a:	68 f4       	brcc	.+26     	; 0x5276 <vfprintf+0x30e>
    525c:	b7 01       	movw	r22, r14
    525e:	80 e2       	ldi	r24, 0x20	; 32
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	3c 87       	std	Y+12, r19	; 0x0c
    5264:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    5268:	b3 94       	inc	r11
    526a:	3c 85       	ldd	r19, Y+12	; 0x0c
    526c:	f5 cf       	rjmp	.-22     	; 0x5258 <vfprintf+0x2f0>
    526e:	b3 14       	cp	r11, r3
    5270:	10 f4       	brcc	.+4      	; 0x5276 <vfprintf+0x30e>
    5272:	3b 18       	sub	r3, r11
    5274:	01 c0       	rjmp	.+2      	; 0x5278 <vfprintf+0x310>
    5276:	31 2c       	mov	r3, r1
    5278:	34 ff       	sbrs	r19, 4
    527a:	12 c0       	rjmp	.+36     	; 0x52a0 <vfprintf+0x338>
    527c:	b7 01       	movw	r22, r14
    527e:	80 e3       	ldi	r24, 0x30	; 48
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	3c 87       	std	Y+12, r19	; 0x0c
    5284:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    5288:	3c 85       	ldd	r19, Y+12	; 0x0c
    528a:	32 ff       	sbrs	r19, 2
    528c:	17 c0       	rjmp	.+46     	; 0x52bc <vfprintf+0x354>
    528e:	31 fd       	sbrc	r19, 1
    5290:	03 c0       	rjmp	.+6      	; 0x5298 <vfprintf+0x330>
    5292:	88 e7       	ldi	r24, 0x78	; 120
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	02 c0       	rjmp	.+4      	; 0x529c <vfprintf+0x334>
    5298:	88 e5       	ldi	r24, 0x58	; 88
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	b7 01       	movw	r22, r14
    529e:	0c c0       	rjmp	.+24     	; 0x52b8 <vfprintf+0x350>
    52a0:	83 2f       	mov	r24, r19
    52a2:	86 78       	andi	r24, 0x86	; 134
    52a4:	59 f0       	breq	.+22     	; 0x52bc <vfprintf+0x354>
    52a6:	31 ff       	sbrs	r19, 1
    52a8:	02 c0       	rjmp	.+4      	; 0x52ae <vfprintf+0x346>
    52aa:	8b e2       	ldi	r24, 0x2B	; 43
    52ac:	01 c0       	rjmp	.+2      	; 0x52b0 <vfprintf+0x348>
    52ae:	80 e2       	ldi	r24, 0x20	; 32
    52b0:	37 fd       	sbrc	r19, 7
    52b2:	8d e2       	ldi	r24, 0x2D	; 45
    52b4:	b7 01       	movw	r22, r14
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52bc:	a5 14       	cp	r10, r5
    52be:	38 f4       	brcc	.+14     	; 0x52ce <vfprintf+0x366>
    52c0:	b7 01       	movw	r22, r14
    52c2:	80 e3       	ldi	r24, 0x30	; 48
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52ca:	5a 94       	dec	r5
    52cc:	f7 cf       	rjmp	.-18     	; 0x52bc <vfprintf+0x354>
    52ce:	aa 94       	dec	r10
    52d0:	f4 01       	movw	r30, r8
    52d2:	ea 0d       	add	r30, r10
    52d4:	f1 1d       	adc	r31, r1
    52d6:	80 81       	ld	r24, Z
    52d8:	b7 01       	movw	r22, r14
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52e0:	a1 10       	cpse	r10, r1
    52e2:	f5 cf       	rjmp	.-22     	; 0x52ce <vfprintf+0x366>
    52e4:	33 20       	and	r3, r3
    52e6:	09 f4       	brne	.+2      	; 0x52ea <vfprintf+0x382>
    52e8:	51 ce       	rjmp	.-862    	; 0x4f8c <vfprintf+0x24>
    52ea:	b7 01       	movw	r22, r14
    52ec:	80 e2       	ldi	r24, 0x20	; 32
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52f4:	3a 94       	dec	r3
    52f6:	f6 cf       	rjmp	.-20     	; 0x52e4 <vfprintf+0x37c>
    52f8:	f7 01       	movw	r30, r14
    52fa:	86 81       	ldd	r24, Z+6	; 0x06
    52fc:	97 81       	ldd	r25, Z+7	; 0x07
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <vfprintf+0x39c>
    5300:	8f ef       	ldi	r24, 0xFF	; 255
    5302:	9f ef       	ldi	r25, 0xFF	; 255
    5304:	2c 96       	adiw	r28, 0x0c	; 12
    5306:	e2 e1       	ldi	r30, 0x12	; 18
    5308:	0c 94 4e 2a 	jmp	0x549c	; 0x549c <__epilogue_restores__>

0000530c <strnlen_P>:
    530c:	fc 01       	movw	r30, r24
    530e:	05 90       	lpm	r0, Z+
    5310:	61 50       	subi	r22, 0x01	; 1
    5312:	70 40       	sbci	r23, 0x00	; 0
    5314:	01 10       	cpse	r0, r1
    5316:	d8 f7       	brcc	.-10     	; 0x530e <strnlen_P+0x2>
    5318:	80 95       	com	r24
    531a:	90 95       	com	r25
    531c:	8e 0f       	add	r24, r30
    531e:	9f 1f       	adc	r25, r31
    5320:	08 95       	ret

00005322 <strnlen>:
    5322:	fc 01       	movw	r30, r24
    5324:	61 50       	subi	r22, 0x01	; 1
    5326:	70 40       	sbci	r23, 0x00	; 0
    5328:	01 90       	ld	r0, Z+
    532a:	01 10       	cpse	r0, r1
    532c:	d8 f7       	brcc	.-10     	; 0x5324 <strnlen+0x2>
    532e:	80 95       	com	r24
    5330:	90 95       	com	r25
    5332:	8e 0f       	add	r24, r30
    5334:	9f 1f       	adc	r25, r31
    5336:	08 95       	ret

00005338 <fputc>:
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	fb 01       	movw	r30, r22
    5342:	23 81       	ldd	r18, Z+3	; 0x03
    5344:	21 fd       	sbrc	r18, 1
    5346:	03 c0       	rjmp	.+6      	; 0x534e <fputc+0x16>
    5348:	8f ef       	ldi	r24, 0xFF	; 255
    534a:	9f ef       	ldi	r25, 0xFF	; 255
    534c:	28 c0       	rjmp	.+80     	; 0x539e <fputc+0x66>
    534e:	22 ff       	sbrs	r18, 2
    5350:	16 c0       	rjmp	.+44     	; 0x537e <fputc+0x46>
    5352:	46 81       	ldd	r20, Z+6	; 0x06
    5354:	57 81       	ldd	r21, Z+7	; 0x07
    5356:	24 81       	ldd	r18, Z+4	; 0x04
    5358:	35 81       	ldd	r19, Z+5	; 0x05
    535a:	42 17       	cp	r20, r18
    535c:	53 07       	cpc	r21, r19
    535e:	44 f4       	brge	.+16     	; 0x5370 <fputc+0x38>
    5360:	a0 81       	ld	r26, Z
    5362:	b1 81       	ldd	r27, Z+1	; 0x01
    5364:	9d 01       	movw	r18, r26
    5366:	2f 5f       	subi	r18, 0xFF	; 255
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	31 83       	std	Z+1, r19	; 0x01
    536c:	20 83       	st	Z, r18
    536e:	8c 93       	st	X, r24
    5370:	26 81       	ldd	r18, Z+6	; 0x06
    5372:	37 81       	ldd	r19, Z+7	; 0x07
    5374:	2f 5f       	subi	r18, 0xFF	; 255
    5376:	3f 4f       	sbci	r19, 0xFF	; 255
    5378:	37 83       	std	Z+7, r19	; 0x07
    537a:	26 83       	std	Z+6, r18	; 0x06
    537c:	10 c0       	rjmp	.+32     	; 0x539e <fputc+0x66>
    537e:	eb 01       	movw	r28, r22
    5380:	09 2f       	mov	r16, r25
    5382:	18 2f       	mov	r17, r24
    5384:	00 84       	ldd	r0, Z+8	; 0x08
    5386:	f1 85       	ldd	r31, Z+9	; 0x09
    5388:	e0 2d       	mov	r30, r0
    538a:	09 95       	icall
    538c:	89 2b       	or	r24, r25
    538e:	e1 f6       	brne	.-72     	; 0x5348 <fputc+0x10>
    5390:	8e 81       	ldd	r24, Y+6	; 0x06
    5392:	9f 81       	ldd	r25, Y+7	; 0x07
    5394:	01 96       	adiw	r24, 0x01	; 1
    5396:	9f 83       	std	Y+7, r25	; 0x07
    5398:	8e 83       	std	Y+6, r24	; 0x06
    539a:	81 2f       	mov	r24, r17
    539c:	90 2f       	mov	r25, r16
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	1f 91       	pop	r17
    53a4:	0f 91       	pop	r16
    53a6:	08 95       	ret

000053a8 <__ultoa_invert>:
    53a8:	fa 01       	movw	r30, r20
    53aa:	aa 27       	eor	r26, r26
    53ac:	28 30       	cpi	r18, 0x08	; 8
    53ae:	51 f1       	breq	.+84     	; 0x5404 <__ultoa_invert+0x5c>
    53b0:	20 31       	cpi	r18, 0x10	; 16
    53b2:	81 f1       	breq	.+96     	; 0x5414 <__ultoa_invert+0x6c>
    53b4:	e8 94       	clt
    53b6:	6f 93       	push	r22
    53b8:	6e 7f       	andi	r22, 0xFE	; 254
    53ba:	6e 5f       	subi	r22, 0xFE	; 254
    53bc:	7f 4f       	sbci	r23, 0xFF	; 255
    53be:	8f 4f       	sbci	r24, 0xFF	; 255
    53c0:	9f 4f       	sbci	r25, 0xFF	; 255
    53c2:	af 4f       	sbci	r26, 0xFF	; 255
    53c4:	b1 e0       	ldi	r27, 0x01	; 1
    53c6:	3e d0       	rcall	.+124    	; 0x5444 <__ultoa_invert+0x9c>
    53c8:	b4 e0       	ldi	r27, 0x04	; 4
    53ca:	3c d0       	rcall	.+120    	; 0x5444 <__ultoa_invert+0x9c>
    53cc:	67 0f       	add	r22, r23
    53ce:	78 1f       	adc	r23, r24
    53d0:	89 1f       	adc	r24, r25
    53d2:	9a 1f       	adc	r25, r26
    53d4:	a1 1d       	adc	r26, r1
    53d6:	68 0f       	add	r22, r24
    53d8:	79 1f       	adc	r23, r25
    53da:	8a 1f       	adc	r24, r26
    53dc:	91 1d       	adc	r25, r1
    53de:	a1 1d       	adc	r26, r1
    53e0:	6a 0f       	add	r22, r26
    53e2:	71 1d       	adc	r23, r1
    53e4:	81 1d       	adc	r24, r1
    53e6:	91 1d       	adc	r25, r1
    53e8:	a1 1d       	adc	r26, r1
    53ea:	20 d0       	rcall	.+64     	; 0x542c <__ultoa_invert+0x84>
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <__ultoa_invert+0x48>
    53ee:	68 94       	set
    53f0:	3f 91       	pop	r19
    53f2:	2a e0       	ldi	r18, 0x0A	; 10
    53f4:	26 9f       	mul	r18, r22
    53f6:	11 24       	eor	r1, r1
    53f8:	30 19       	sub	r19, r0
    53fa:	30 5d       	subi	r19, 0xD0	; 208
    53fc:	31 93       	st	Z+, r19
    53fe:	de f6       	brtc	.-74     	; 0x53b6 <__ultoa_invert+0xe>
    5400:	cf 01       	movw	r24, r30
    5402:	08 95       	ret
    5404:	46 2f       	mov	r20, r22
    5406:	47 70       	andi	r20, 0x07	; 7
    5408:	40 5d       	subi	r20, 0xD0	; 208
    540a:	41 93       	st	Z+, r20
    540c:	b3 e0       	ldi	r27, 0x03	; 3
    540e:	0f d0       	rcall	.+30     	; 0x542e <__ultoa_invert+0x86>
    5410:	c9 f7       	brne	.-14     	; 0x5404 <__ultoa_invert+0x5c>
    5412:	f6 cf       	rjmp	.-20     	; 0x5400 <__ultoa_invert+0x58>
    5414:	46 2f       	mov	r20, r22
    5416:	4f 70       	andi	r20, 0x0F	; 15
    5418:	40 5d       	subi	r20, 0xD0	; 208
    541a:	4a 33       	cpi	r20, 0x3A	; 58
    541c:	18 f0       	brcs	.+6      	; 0x5424 <__ultoa_invert+0x7c>
    541e:	49 5d       	subi	r20, 0xD9	; 217
    5420:	31 fd       	sbrc	r19, 1
    5422:	40 52       	subi	r20, 0x20	; 32
    5424:	41 93       	st	Z+, r20
    5426:	02 d0       	rcall	.+4      	; 0x542c <__ultoa_invert+0x84>
    5428:	a9 f7       	brne	.-22     	; 0x5414 <__ultoa_invert+0x6c>
    542a:	ea cf       	rjmp	.-44     	; 0x5400 <__ultoa_invert+0x58>
    542c:	b4 e0       	ldi	r27, 0x04	; 4
    542e:	a6 95       	lsr	r26
    5430:	97 95       	ror	r25
    5432:	87 95       	ror	r24
    5434:	77 95       	ror	r23
    5436:	67 95       	ror	r22
    5438:	ba 95       	dec	r27
    543a:	c9 f7       	brne	.-14     	; 0x542e <__ultoa_invert+0x86>
    543c:	00 97       	sbiw	r24, 0x00	; 0
    543e:	61 05       	cpc	r22, r1
    5440:	71 05       	cpc	r23, r1
    5442:	08 95       	ret
    5444:	9b 01       	movw	r18, r22
    5446:	ac 01       	movw	r20, r24
    5448:	0a 2e       	mov	r0, r26
    544a:	06 94       	lsr	r0
    544c:	57 95       	ror	r21
    544e:	47 95       	ror	r20
    5450:	37 95       	ror	r19
    5452:	27 95       	ror	r18
    5454:	ba 95       	dec	r27
    5456:	c9 f7       	brne	.-14     	; 0x544a <__ultoa_invert+0xa2>
    5458:	62 0f       	add	r22, r18
    545a:	73 1f       	adc	r23, r19
    545c:	84 1f       	adc	r24, r20
    545e:	95 1f       	adc	r25, r21
    5460:	a0 1d       	adc	r26, r0
    5462:	08 95       	ret

00005464 <__prologue_saves__>:
    5464:	2f 92       	push	r2
    5466:	3f 92       	push	r3
    5468:	4f 92       	push	r4
    546a:	5f 92       	push	r5
    546c:	6f 92       	push	r6
    546e:	7f 92       	push	r7
    5470:	8f 92       	push	r8
    5472:	9f 92       	push	r9
    5474:	af 92       	push	r10
    5476:	bf 92       	push	r11
    5478:	cf 92       	push	r12
    547a:	df 92       	push	r13
    547c:	ef 92       	push	r14
    547e:	ff 92       	push	r15
    5480:	0f 93       	push	r16
    5482:	1f 93       	push	r17
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	ca 1b       	sub	r28, r26
    548e:	db 0b       	sbc	r29, r27
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	de bf       	out	0x3e, r29	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	09 94       	ijmp

0000549c <__epilogue_restores__>:
    549c:	2a 88       	ldd	r2, Y+18	; 0x12
    549e:	39 88       	ldd	r3, Y+17	; 0x11
    54a0:	48 88       	ldd	r4, Y+16	; 0x10
    54a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    54a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    54a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    54a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    54aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    54ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    54ae:	b9 84       	ldd	r11, Y+9	; 0x09
    54b0:	c8 84       	ldd	r12, Y+8	; 0x08
    54b2:	df 80       	ldd	r13, Y+7	; 0x07
    54b4:	ee 80       	ldd	r14, Y+6	; 0x06
    54b6:	fd 80       	ldd	r15, Y+5	; 0x05
    54b8:	0c 81       	ldd	r16, Y+4	; 0x04
    54ba:	1b 81       	ldd	r17, Y+3	; 0x03
    54bc:	aa 81       	ldd	r26, Y+2	; 0x02
    54be:	b9 81       	ldd	r27, Y+1	; 0x01
    54c0:	ce 0f       	add	r28, r30
    54c2:	d1 1d       	adc	r29, r1
    54c4:	0f b6       	in	r0, 0x3f	; 63
    54c6:	f8 94       	cli
    54c8:	de bf       	out	0x3e, r29	; 62
    54ca:	0f be       	out	0x3f, r0	; 63
    54cc:	cd bf       	out	0x3d, r28	; 61
    54ce:	ed 01       	movw	r28, r26
    54d0:	08 95       	ret

000054d2 <__do_global_dtors>:
    54d2:	10 e0       	ldi	r17, 0x00	; 0
    54d4:	c7 e4       	ldi	r28, 0x47	; 71
    54d6:	d0 e0       	ldi	r29, 0x00	; 0
    54d8:	04 c0       	rjmp	.+8      	; 0x54e2 <__do_global_dtors+0x10>
    54da:	fe 01       	movw	r30, r28
    54dc:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <__tablejump2__>
    54e0:	21 96       	adiw	r28, 0x01	; 1
    54e2:	c8 34       	cpi	r28, 0x48	; 72
    54e4:	d1 07       	cpc	r29, r17
    54e6:	c9 f7       	brne	.-14     	; 0x54da <__do_global_dtors+0x8>
    54e8:	f8 94       	cli

000054ea <__stop_program>:
    54ea:	ff cf       	rjmp	.-2      	; 0x54ea <__stop_program>
